
STM32L0_FreeRTOS_FW_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08018000  08018000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054fc  080180c0  080180c0  000080c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0801d5bc  0801d5bc  0000d5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d72c  0801d72c  00010074  2**0
                  CONTENTS
  4 .ARM          00000008  0801d72c  0801d72c  0000d72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d734  0801d734  00010074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d734  0801d734  0000d734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d738  0801d738  0000d738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801d73c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e58  20000074  0801d7b0  00010074  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20001ecc  0801d7b0  00011ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017446  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa0  00000000  00000000  000274e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0002a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  0002b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003043  00000000  00000000  0002c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001496b  00000000  00000000  0002f943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e686  00000000  00000000  000442ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e4  00000000  00000000  000d2984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080180c0 <__do_global_dtors_aux>:
 80180c0:	b510      	push	{r4, lr}
 80180c2:	4c06      	ldr	r4, [pc, #24]	; (80180dc <__do_global_dtors_aux+0x1c>)
 80180c4:	7823      	ldrb	r3, [r4, #0]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d107      	bne.n	80180da <__do_global_dtors_aux+0x1a>
 80180ca:	4b05      	ldr	r3, [pc, #20]	; (80180e0 <__do_global_dtors_aux+0x20>)
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d002      	beq.n	80180d6 <__do_global_dtors_aux+0x16>
 80180d0:	4804      	ldr	r0, [pc, #16]	; (80180e4 <__do_global_dtors_aux+0x24>)
 80180d2:	e000      	b.n	80180d6 <__do_global_dtors_aux+0x16>
 80180d4:	bf00      	nop
 80180d6:	2301      	movs	r3, #1
 80180d8:	7023      	strb	r3, [r4, #0]
 80180da:	bd10      	pop	{r4, pc}
 80180dc:	20000074 	.word	0x20000074
 80180e0:	00000000 	.word	0x00000000
 80180e4:	0801d5a4 	.word	0x0801d5a4

080180e8 <frame_dummy>:
 80180e8:	4b04      	ldr	r3, [pc, #16]	; (80180fc <frame_dummy+0x14>)
 80180ea:	b510      	push	{r4, lr}
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d003      	beq.n	80180f8 <frame_dummy+0x10>
 80180f0:	4903      	ldr	r1, [pc, #12]	; (8018100 <frame_dummy+0x18>)
 80180f2:	4804      	ldr	r0, [pc, #16]	; (8018104 <frame_dummy+0x1c>)
 80180f4:	e000      	b.n	80180f8 <frame_dummy+0x10>
 80180f6:	bf00      	nop
 80180f8:	bd10      	pop	{r4, pc}
 80180fa:	46c0      	nop			; (mov r8, r8)
 80180fc:	00000000 	.word	0x00000000
 8018100:	20000078 	.word	0x20000078
 8018104:	0801d5a4 	.word	0x0801d5a4

08018108 <__udivsi3>:
 8018108:	2200      	movs	r2, #0
 801810a:	0843      	lsrs	r3, r0, #1
 801810c:	428b      	cmp	r3, r1
 801810e:	d374      	bcc.n	80181fa <__udivsi3+0xf2>
 8018110:	0903      	lsrs	r3, r0, #4
 8018112:	428b      	cmp	r3, r1
 8018114:	d35f      	bcc.n	80181d6 <__udivsi3+0xce>
 8018116:	0a03      	lsrs	r3, r0, #8
 8018118:	428b      	cmp	r3, r1
 801811a:	d344      	bcc.n	80181a6 <__udivsi3+0x9e>
 801811c:	0b03      	lsrs	r3, r0, #12
 801811e:	428b      	cmp	r3, r1
 8018120:	d328      	bcc.n	8018174 <__udivsi3+0x6c>
 8018122:	0c03      	lsrs	r3, r0, #16
 8018124:	428b      	cmp	r3, r1
 8018126:	d30d      	bcc.n	8018144 <__udivsi3+0x3c>
 8018128:	22ff      	movs	r2, #255	; 0xff
 801812a:	0209      	lsls	r1, r1, #8
 801812c:	ba12      	rev	r2, r2
 801812e:	0c03      	lsrs	r3, r0, #16
 8018130:	428b      	cmp	r3, r1
 8018132:	d302      	bcc.n	801813a <__udivsi3+0x32>
 8018134:	1212      	asrs	r2, r2, #8
 8018136:	0209      	lsls	r1, r1, #8
 8018138:	d065      	beq.n	8018206 <__udivsi3+0xfe>
 801813a:	0b03      	lsrs	r3, r0, #12
 801813c:	428b      	cmp	r3, r1
 801813e:	d319      	bcc.n	8018174 <__udivsi3+0x6c>
 8018140:	e000      	b.n	8018144 <__udivsi3+0x3c>
 8018142:	0a09      	lsrs	r1, r1, #8
 8018144:	0bc3      	lsrs	r3, r0, #15
 8018146:	428b      	cmp	r3, r1
 8018148:	d301      	bcc.n	801814e <__udivsi3+0x46>
 801814a:	03cb      	lsls	r3, r1, #15
 801814c:	1ac0      	subs	r0, r0, r3
 801814e:	4152      	adcs	r2, r2
 8018150:	0b83      	lsrs	r3, r0, #14
 8018152:	428b      	cmp	r3, r1
 8018154:	d301      	bcc.n	801815a <__udivsi3+0x52>
 8018156:	038b      	lsls	r3, r1, #14
 8018158:	1ac0      	subs	r0, r0, r3
 801815a:	4152      	adcs	r2, r2
 801815c:	0b43      	lsrs	r3, r0, #13
 801815e:	428b      	cmp	r3, r1
 8018160:	d301      	bcc.n	8018166 <__udivsi3+0x5e>
 8018162:	034b      	lsls	r3, r1, #13
 8018164:	1ac0      	subs	r0, r0, r3
 8018166:	4152      	adcs	r2, r2
 8018168:	0b03      	lsrs	r3, r0, #12
 801816a:	428b      	cmp	r3, r1
 801816c:	d301      	bcc.n	8018172 <__udivsi3+0x6a>
 801816e:	030b      	lsls	r3, r1, #12
 8018170:	1ac0      	subs	r0, r0, r3
 8018172:	4152      	adcs	r2, r2
 8018174:	0ac3      	lsrs	r3, r0, #11
 8018176:	428b      	cmp	r3, r1
 8018178:	d301      	bcc.n	801817e <__udivsi3+0x76>
 801817a:	02cb      	lsls	r3, r1, #11
 801817c:	1ac0      	subs	r0, r0, r3
 801817e:	4152      	adcs	r2, r2
 8018180:	0a83      	lsrs	r3, r0, #10
 8018182:	428b      	cmp	r3, r1
 8018184:	d301      	bcc.n	801818a <__udivsi3+0x82>
 8018186:	028b      	lsls	r3, r1, #10
 8018188:	1ac0      	subs	r0, r0, r3
 801818a:	4152      	adcs	r2, r2
 801818c:	0a43      	lsrs	r3, r0, #9
 801818e:	428b      	cmp	r3, r1
 8018190:	d301      	bcc.n	8018196 <__udivsi3+0x8e>
 8018192:	024b      	lsls	r3, r1, #9
 8018194:	1ac0      	subs	r0, r0, r3
 8018196:	4152      	adcs	r2, r2
 8018198:	0a03      	lsrs	r3, r0, #8
 801819a:	428b      	cmp	r3, r1
 801819c:	d301      	bcc.n	80181a2 <__udivsi3+0x9a>
 801819e:	020b      	lsls	r3, r1, #8
 80181a0:	1ac0      	subs	r0, r0, r3
 80181a2:	4152      	adcs	r2, r2
 80181a4:	d2cd      	bcs.n	8018142 <__udivsi3+0x3a>
 80181a6:	09c3      	lsrs	r3, r0, #7
 80181a8:	428b      	cmp	r3, r1
 80181aa:	d301      	bcc.n	80181b0 <__udivsi3+0xa8>
 80181ac:	01cb      	lsls	r3, r1, #7
 80181ae:	1ac0      	subs	r0, r0, r3
 80181b0:	4152      	adcs	r2, r2
 80181b2:	0983      	lsrs	r3, r0, #6
 80181b4:	428b      	cmp	r3, r1
 80181b6:	d301      	bcc.n	80181bc <__udivsi3+0xb4>
 80181b8:	018b      	lsls	r3, r1, #6
 80181ba:	1ac0      	subs	r0, r0, r3
 80181bc:	4152      	adcs	r2, r2
 80181be:	0943      	lsrs	r3, r0, #5
 80181c0:	428b      	cmp	r3, r1
 80181c2:	d301      	bcc.n	80181c8 <__udivsi3+0xc0>
 80181c4:	014b      	lsls	r3, r1, #5
 80181c6:	1ac0      	subs	r0, r0, r3
 80181c8:	4152      	adcs	r2, r2
 80181ca:	0903      	lsrs	r3, r0, #4
 80181cc:	428b      	cmp	r3, r1
 80181ce:	d301      	bcc.n	80181d4 <__udivsi3+0xcc>
 80181d0:	010b      	lsls	r3, r1, #4
 80181d2:	1ac0      	subs	r0, r0, r3
 80181d4:	4152      	adcs	r2, r2
 80181d6:	08c3      	lsrs	r3, r0, #3
 80181d8:	428b      	cmp	r3, r1
 80181da:	d301      	bcc.n	80181e0 <__udivsi3+0xd8>
 80181dc:	00cb      	lsls	r3, r1, #3
 80181de:	1ac0      	subs	r0, r0, r3
 80181e0:	4152      	adcs	r2, r2
 80181e2:	0883      	lsrs	r3, r0, #2
 80181e4:	428b      	cmp	r3, r1
 80181e6:	d301      	bcc.n	80181ec <__udivsi3+0xe4>
 80181e8:	008b      	lsls	r3, r1, #2
 80181ea:	1ac0      	subs	r0, r0, r3
 80181ec:	4152      	adcs	r2, r2
 80181ee:	0843      	lsrs	r3, r0, #1
 80181f0:	428b      	cmp	r3, r1
 80181f2:	d301      	bcc.n	80181f8 <__udivsi3+0xf0>
 80181f4:	004b      	lsls	r3, r1, #1
 80181f6:	1ac0      	subs	r0, r0, r3
 80181f8:	4152      	adcs	r2, r2
 80181fa:	1a41      	subs	r1, r0, r1
 80181fc:	d200      	bcs.n	8018200 <__udivsi3+0xf8>
 80181fe:	4601      	mov	r1, r0
 8018200:	4152      	adcs	r2, r2
 8018202:	4610      	mov	r0, r2
 8018204:	4770      	bx	lr
 8018206:	e7ff      	b.n	8018208 <__udivsi3+0x100>
 8018208:	b501      	push	{r0, lr}
 801820a:	2000      	movs	r0, #0
 801820c:	f000 f806 	bl	801821c <__aeabi_idiv0>
 8018210:	bd02      	pop	{r1, pc}
 8018212:	46c0      	nop			; (mov r8, r8)

08018214 <__aeabi_uidivmod>:
 8018214:	2900      	cmp	r1, #0
 8018216:	d0f7      	beq.n	8018208 <__udivsi3+0x100>
 8018218:	e776      	b.n	8018108 <__udivsi3>
 801821a:	4770      	bx	lr

0801821c <__aeabi_idiv0>:
 801821c:	4770      	bx	lr
 801821e:	46c0      	nop			; (mov r8, r8)

08018220 <__aeabi_uldivmod>:
 8018220:	2b00      	cmp	r3, #0
 8018222:	d111      	bne.n	8018248 <__aeabi_uldivmod+0x28>
 8018224:	2a00      	cmp	r2, #0
 8018226:	d10f      	bne.n	8018248 <__aeabi_uldivmod+0x28>
 8018228:	2900      	cmp	r1, #0
 801822a:	d100      	bne.n	801822e <__aeabi_uldivmod+0xe>
 801822c:	2800      	cmp	r0, #0
 801822e:	d002      	beq.n	8018236 <__aeabi_uldivmod+0x16>
 8018230:	2100      	movs	r1, #0
 8018232:	43c9      	mvns	r1, r1
 8018234:	0008      	movs	r0, r1
 8018236:	b407      	push	{r0, r1, r2}
 8018238:	4802      	ldr	r0, [pc, #8]	; (8018244 <__aeabi_uldivmod+0x24>)
 801823a:	a102      	add	r1, pc, #8	; (adr r1, 8018244 <__aeabi_uldivmod+0x24>)
 801823c:	1840      	adds	r0, r0, r1
 801823e:	9002      	str	r0, [sp, #8]
 8018240:	bd03      	pop	{r0, r1, pc}
 8018242:	46c0      	nop			; (mov r8, r8)
 8018244:	ffffffd9 	.word	0xffffffd9
 8018248:	b403      	push	{r0, r1}
 801824a:	4668      	mov	r0, sp
 801824c:	b501      	push	{r0, lr}
 801824e:	9802      	ldr	r0, [sp, #8]
 8018250:	f000 f834 	bl	80182bc <__udivmoddi4>
 8018254:	9b01      	ldr	r3, [sp, #4]
 8018256:	469e      	mov	lr, r3
 8018258:	b002      	add	sp, #8
 801825a:	bc0c      	pop	{r2, r3}
 801825c:	4770      	bx	lr
 801825e:	46c0      	nop			; (mov r8, r8)

08018260 <__aeabi_lmul>:
 8018260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018262:	46ce      	mov	lr, r9
 8018264:	4647      	mov	r7, r8
 8018266:	b580      	push	{r7, lr}
 8018268:	0007      	movs	r7, r0
 801826a:	4699      	mov	r9, r3
 801826c:	0c3b      	lsrs	r3, r7, #16
 801826e:	469c      	mov	ip, r3
 8018270:	0413      	lsls	r3, r2, #16
 8018272:	0c1b      	lsrs	r3, r3, #16
 8018274:	001d      	movs	r5, r3
 8018276:	000e      	movs	r6, r1
 8018278:	4661      	mov	r1, ip
 801827a:	0400      	lsls	r0, r0, #16
 801827c:	0c14      	lsrs	r4, r2, #16
 801827e:	0c00      	lsrs	r0, r0, #16
 8018280:	4345      	muls	r5, r0
 8018282:	434b      	muls	r3, r1
 8018284:	4360      	muls	r0, r4
 8018286:	4361      	muls	r1, r4
 8018288:	18c0      	adds	r0, r0, r3
 801828a:	0c2c      	lsrs	r4, r5, #16
 801828c:	1820      	adds	r0, r4, r0
 801828e:	468c      	mov	ip, r1
 8018290:	4283      	cmp	r3, r0
 8018292:	d903      	bls.n	801829c <__aeabi_lmul+0x3c>
 8018294:	2380      	movs	r3, #128	; 0x80
 8018296:	025b      	lsls	r3, r3, #9
 8018298:	4698      	mov	r8, r3
 801829a:	44c4      	add	ip, r8
 801829c:	4649      	mov	r1, r9
 801829e:	4379      	muls	r1, r7
 80182a0:	4372      	muls	r2, r6
 80182a2:	0c03      	lsrs	r3, r0, #16
 80182a4:	4463      	add	r3, ip
 80182a6:	042d      	lsls	r5, r5, #16
 80182a8:	0c2d      	lsrs	r5, r5, #16
 80182aa:	18c9      	adds	r1, r1, r3
 80182ac:	0400      	lsls	r0, r0, #16
 80182ae:	1940      	adds	r0, r0, r5
 80182b0:	1889      	adds	r1, r1, r2
 80182b2:	bcc0      	pop	{r6, r7}
 80182b4:	46b9      	mov	r9, r7
 80182b6:	46b0      	mov	r8, r6
 80182b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182ba:	46c0      	nop			; (mov r8, r8)

080182bc <__udivmoddi4>:
 80182bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182be:	4657      	mov	r7, sl
 80182c0:	464e      	mov	r6, r9
 80182c2:	4645      	mov	r5, r8
 80182c4:	46de      	mov	lr, fp
 80182c6:	b5e0      	push	{r5, r6, r7, lr}
 80182c8:	0004      	movs	r4, r0
 80182ca:	000d      	movs	r5, r1
 80182cc:	4692      	mov	sl, r2
 80182ce:	4699      	mov	r9, r3
 80182d0:	b083      	sub	sp, #12
 80182d2:	428b      	cmp	r3, r1
 80182d4:	d830      	bhi.n	8018338 <__udivmoddi4+0x7c>
 80182d6:	d02d      	beq.n	8018334 <__udivmoddi4+0x78>
 80182d8:	4649      	mov	r1, r9
 80182da:	4650      	mov	r0, sl
 80182dc:	f000 f8ba 	bl	8018454 <__clzdi2>
 80182e0:	0029      	movs	r1, r5
 80182e2:	0006      	movs	r6, r0
 80182e4:	0020      	movs	r0, r4
 80182e6:	f000 f8b5 	bl	8018454 <__clzdi2>
 80182ea:	1a33      	subs	r3, r6, r0
 80182ec:	4698      	mov	r8, r3
 80182ee:	3b20      	subs	r3, #32
 80182f0:	469b      	mov	fp, r3
 80182f2:	d433      	bmi.n	801835c <__udivmoddi4+0xa0>
 80182f4:	465a      	mov	r2, fp
 80182f6:	4653      	mov	r3, sl
 80182f8:	4093      	lsls	r3, r2
 80182fa:	4642      	mov	r2, r8
 80182fc:	001f      	movs	r7, r3
 80182fe:	4653      	mov	r3, sl
 8018300:	4093      	lsls	r3, r2
 8018302:	001e      	movs	r6, r3
 8018304:	42af      	cmp	r7, r5
 8018306:	d83a      	bhi.n	801837e <__udivmoddi4+0xc2>
 8018308:	42af      	cmp	r7, r5
 801830a:	d100      	bne.n	801830e <__udivmoddi4+0x52>
 801830c:	e078      	b.n	8018400 <__udivmoddi4+0x144>
 801830e:	465b      	mov	r3, fp
 8018310:	1ba4      	subs	r4, r4, r6
 8018312:	41bd      	sbcs	r5, r7
 8018314:	2b00      	cmp	r3, #0
 8018316:	da00      	bge.n	801831a <__udivmoddi4+0x5e>
 8018318:	e075      	b.n	8018406 <__udivmoddi4+0x14a>
 801831a:	2200      	movs	r2, #0
 801831c:	2300      	movs	r3, #0
 801831e:	9200      	str	r2, [sp, #0]
 8018320:	9301      	str	r3, [sp, #4]
 8018322:	2301      	movs	r3, #1
 8018324:	465a      	mov	r2, fp
 8018326:	4093      	lsls	r3, r2
 8018328:	9301      	str	r3, [sp, #4]
 801832a:	2301      	movs	r3, #1
 801832c:	4642      	mov	r2, r8
 801832e:	4093      	lsls	r3, r2
 8018330:	9300      	str	r3, [sp, #0]
 8018332:	e028      	b.n	8018386 <__udivmoddi4+0xca>
 8018334:	4282      	cmp	r2, r0
 8018336:	d9cf      	bls.n	80182d8 <__udivmoddi4+0x1c>
 8018338:	2200      	movs	r2, #0
 801833a:	2300      	movs	r3, #0
 801833c:	9200      	str	r2, [sp, #0]
 801833e:	9301      	str	r3, [sp, #4]
 8018340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018342:	2b00      	cmp	r3, #0
 8018344:	d001      	beq.n	801834a <__udivmoddi4+0x8e>
 8018346:	601c      	str	r4, [r3, #0]
 8018348:	605d      	str	r5, [r3, #4]
 801834a:	9800      	ldr	r0, [sp, #0]
 801834c:	9901      	ldr	r1, [sp, #4]
 801834e:	b003      	add	sp, #12
 8018350:	bcf0      	pop	{r4, r5, r6, r7}
 8018352:	46bb      	mov	fp, r7
 8018354:	46b2      	mov	sl, r6
 8018356:	46a9      	mov	r9, r5
 8018358:	46a0      	mov	r8, r4
 801835a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801835c:	4642      	mov	r2, r8
 801835e:	2320      	movs	r3, #32
 8018360:	1a9b      	subs	r3, r3, r2
 8018362:	4652      	mov	r2, sl
 8018364:	40da      	lsrs	r2, r3
 8018366:	4641      	mov	r1, r8
 8018368:	0013      	movs	r3, r2
 801836a:	464a      	mov	r2, r9
 801836c:	408a      	lsls	r2, r1
 801836e:	0017      	movs	r7, r2
 8018370:	4642      	mov	r2, r8
 8018372:	431f      	orrs	r7, r3
 8018374:	4653      	mov	r3, sl
 8018376:	4093      	lsls	r3, r2
 8018378:	001e      	movs	r6, r3
 801837a:	42af      	cmp	r7, r5
 801837c:	d9c4      	bls.n	8018308 <__udivmoddi4+0x4c>
 801837e:	2200      	movs	r2, #0
 8018380:	2300      	movs	r3, #0
 8018382:	9200      	str	r2, [sp, #0]
 8018384:	9301      	str	r3, [sp, #4]
 8018386:	4643      	mov	r3, r8
 8018388:	2b00      	cmp	r3, #0
 801838a:	d0d9      	beq.n	8018340 <__udivmoddi4+0x84>
 801838c:	07fb      	lsls	r3, r7, #31
 801838e:	0872      	lsrs	r2, r6, #1
 8018390:	431a      	orrs	r2, r3
 8018392:	4646      	mov	r6, r8
 8018394:	087b      	lsrs	r3, r7, #1
 8018396:	e00e      	b.n	80183b6 <__udivmoddi4+0xfa>
 8018398:	42ab      	cmp	r3, r5
 801839a:	d101      	bne.n	80183a0 <__udivmoddi4+0xe4>
 801839c:	42a2      	cmp	r2, r4
 801839e:	d80c      	bhi.n	80183ba <__udivmoddi4+0xfe>
 80183a0:	1aa4      	subs	r4, r4, r2
 80183a2:	419d      	sbcs	r5, r3
 80183a4:	2001      	movs	r0, #1
 80183a6:	1924      	adds	r4, r4, r4
 80183a8:	416d      	adcs	r5, r5
 80183aa:	2100      	movs	r1, #0
 80183ac:	3e01      	subs	r6, #1
 80183ae:	1824      	adds	r4, r4, r0
 80183b0:	414d      	adcs	r5, r1
 80183b2:	2e00      	cmp	r6, #0
 80183b4:	d006      	beq.n	80183c4 <__udivmoddi4+0x108>
 80183b6:	42ab      	cmp	r3, r5
 80183b8:	d9ee      	bls.n	8018398 <__udivmoddi4+0xdc>
 80183ba:	3e01      	subs	r6, #1
 80183bc:	1924      	adds	r4, r4, r4
 80183be:	416d      	adcs	r5, r5
 80183c0:	2e00      	cmp	r6, #0
 80183c2:	d1f8      	bne.n	80183b6 <__udivmoddi4+0xfa>
 80183c4:	9800      	ldr	r0, [sp, #0]
 80183c6:	9901      	ldr	r1, [sp, #4]
 80183c8:	465b      	mov	r3, fp
 80183ca:	1900      	adds	r0, r0, r4
 80183cc:	4169      	adcs	r1, r5
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	db24      	blt.n	801841c <__udivmoddi4+0x160>
 80183d2:	002b      	movs	r3, r5
 80183d4:	465a      	mov	r2, fp
 80183d6:	4644      	mov	r4, r8
 80183d8:	40d3      	lsrs	r3, r2
 80183da:	002a      	movs	r2, r5
 80183dc:	40e2      	lsrs	r2, r4
 80183de:	001c      	movs	r4, r3
 80183e0:	465b      	mov	r3, fp
 80183e2:	0015      	movs	r5, r2
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	db2a      	blt.n	801843e <__udivmoddi4+0x182>
 80183e8:	0026      	movs	r6, r4
 80183ea:	409e      	lsls	r6, r3
 80183ec:	0033      	movs	r3, r6
 80183ee:	0026      	movs	r6, r4
 80183f0:	4647      	mov	r7, r8
 80183f2:	40be      	lsls	r6, r7
 80183f4:	0032      	movs	r2, r6
 80183f6:	1a80      	subs	r0, r0, r2
 80183f8:	4199      	sbcs	r1, r3
 80183fa:	9000      	str	r0, [sp, #0]
 80183fc:	9101      	str	r1, [sp, #4]
 80183fe:	e79f      	b.n	8018340 <__udivmoddi4+0x84>
 8018400:	42a3      	cmp	r3, r4
 8018402:	d8bc      	bhi.n	801837e <__udivmoddi4+0xc2>
 8018404:	e783      	b.n	801830e <__udivmoddi4+0x52>
 8018406:	4642      	mov	r2, r8
 8018408:	2320      	movs	r3, #32
 801840a:	2100      	movs	r1, #0
 801840c:	1a9b      	subs	r3, r3, r2
 801840e:	2200      	movs	r2, #0
 8018410:	9100      	str	r1, [sp, #0]
 8018412:	9201      	str	r2, [sp, #4]
 8018414:	2201      	movs	r2, #1
 8018416:	40da      	lsrs	r2, r3
 8018418:	9201      	str	r2, [sp, #4]
 801841a:	e786      	b.n	801832a <__udivmoddi4+0x6e>
 801841c:	4642      	mov	r2, r8
 801841e:	2320      	movs	r3, #32
 8018420:	1a9b      	subs	r3, r3, r2
 8018422:	002a      	movs	r2, r5
 8018424:	4646      	mov	r6, r8
 8018426:	409a      	lsls	r2, r3
 8018428:	0023      	movs	r3, r4
 801842a:	40f3      	lsrs	r3, r6
 801842c:	4644      	mov	r4, r8
 801842e:	4313      	orrs	r3, r2
 8018430:	002a      	movs	r2, r5
 8018432:	40e2      	lsrs	r2, r4
 8018434:	001c      	movs	r4, r3
 8018436:	465b      	mov	r3, fp
 8018438:	0015      	movs	r5, r2
 801843a:	2b00      	cmp	r3, #0
 801843c:	dad4      	bge.n	80183e8 <__udivmoddi4+0x12c>
 801843e:	4642      	mov	r2, r8
 8018440:	002f      	movs	r7, r5
 8018442:	2320      	movs	r3, #32
 8018444:	0026      	movs	r6, r4
 8018446:	4097      	lsls	r7, r2
 8018448:	1a9b      	subs	r3, r3, r2
 801844a:	40de      	lsrs	r6, r3
 801844c:	003b      	movs	r3, r7
 801844e:	4333      	orrs	r3, r6
 8018450:	e7cd      	b.n	80183ee <__udivmoddi4+0x132>
 8018452:	46c0      	nop			; (mov r8, r8)

08018454 <__clzdi2>:
 8018454:	b510      	push	{r4, lr}
 8018456:	2900      	cmp	r1, #0
 8018458:	d103      	bne.n	8018462 <__clzdi2+0xe>
 801845a:	f000 f807 	bl	801846c <__clzsi2>
 801845e:	3020      	adds	r0, #32
 8018460:	e002      	b.n	8018468 <__clzdi2+0x14>
 8018462:	0008      	movs	r0, r1
 8018464:	f000 f802 	bl	801846c <__clzsi2>
 8018468:	bd10      	pop	{r4, pc}
 801846a:	46c0      	nop			; (mov r8, r8)

0801846c <__clzsi2>:
 801846c:	211c      	movs	r1, #28
 801846e:	2301      	movs	r3, #1
 8018470:	041b      	lsls	r3, r3, #16
 8018472:	4298      	cmp	r0, r3
 8018474:	d301      	bcc.n	801847a <__clzsi2+0xe>
 8018476:	0c00      	lsrs	r0, r0, #16
 8018478:	3910      	subs	r1, #16
 801847a:	0a1b      	lsrs	r3, r3, #8
 801847c:	4298      	cmp	r0, r3
 801847e:	d301      	bcc.n	8018484 <__clzsi2+0x18>
 8018480:	0a00      	lsrs	r0, r0, #8
 8018482:	3908      	subs	r1, #8
 8018484:	091b      	lsrs	r3, r3, #4
 8018486:	4298      	cmp	r0, r3
 8018488:	d301      	bcc.n	801848e <__clzsi2+0x22>
 801848a:	0900      	lsrs	r0, r0, #4
 801848c:	3904      	subs	r1, #4
 801848e:	a202      	add	r2, pc, #8	; (adr r2, 8018498 <__clzsi2+0x2c>)
 8018490:	5c10      	ldrb	r0, [r2, r0]
 8018492:	1840      	adds	r0, r0, r1
 8018494:	4770      	bx	lr
 8018496:	46c0      	nop			; (mov r8, r8)
 8018498:	02020304 	.word	0x02020304
 801849c:	01010101 	.word	0x01010101
	...

080184a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80184ac:	f000 fb10 	bl	8018ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80184b0:	f000 f82c 	bl	801850c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80184b4:	f000 f922 	bl	80186fc <MX_GPIO_Init>
  MX_CRC_Init();
 80184b8:	f000 f89c 	bl	80185f4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80184bc:	f000 f8be 	bl	801863c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80184c0:	f000 f8ec 	bl	801869c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80184c4:	f002 fcdc 	bl	801ae80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80184c8:	4a0a      	ldr	r2, [pc, #40]	; (80184f4 <main+0x4c>)
 80184ca:	4b0b      	ldr	r3, [pc, #44]	; (80184f8 <main+0x50>)
 80184cc:	2100      	movs	r1, #0
 80184ce:	0018      	movs	r0, r3
 80184d0:	f002 fd32 	bl	801af38 <osThreadNew>
 80184d4:	0002      	movs	r2, r0
 80184d6:	4b09      	ldr	r3, [pc, #36]	; (80184fc <main+0x54>)
 80184d8:	601a      	str	r2, [r3, #0]

  /* creation of High_Priority_T */
  High_Priority_THandle = osThreadNew(High_Priority_Task_Handler, NULL, &High_Priority_T_attributes);
 80184da:	4a09      	ldr	r2, [pc, #36]	; (8018500 <main+0x58>)
 80184dc:	4b09      	ldr	r3, [pc, #36]	; (8018504 <main+0x5c>)
 80184de:	2100      	movs	r1, #0
 80184e0:	0018      	movs	r0, r3
 80184e2:	f002 fd29 	bl	801af38 <osThreadNew>
 80184e6:	0002      	movs	r2, r0
 80184e8:	4b07      	ldr	r3, [pc, #28]	; (8018508 <main+0x60>)
 80184ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80184ec:	f002 fcf4 	bl	801aed8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80184f0:	e7fe      	b.n	80184f0 <main+0x48>
 80184f2:	46c0      	nop			; (mov r8, r8)
 80184f4:	0801d5f0 	.word	0x0801d5f0
 80184f8:	080187d5 	.word	0x080187d5
 80184fc:	200001bc 	.word	0x200001bc
 8018500:	0801d614 	.word	0x0801d614
 8018504:	080187e5 	.word	0x080187e5
 8018508:	200001c0 	.word	0x200001c0

0801850c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801850c:	b590      	push	{r4, r7, lr}
 801850e:	b09f      	sub	sp, #124	; 0x7c
 8018510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8018512:	2440      	movs	r4, #64	; 0x40
 8018514:	193b      	adds	r3, r7, r4
 8018516:	0018      	movs	r0, r3
 8018518:	2338      	movs	r3, #56	; 0x38
 801851a:	001a      	movs	r2, r3
 801851c:	2100      	movs	r1, #0
 801851e:	f004 ff6c 	bl	801d3fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8018522:	232c      	movs	r3, #44	; 0x2c
 8018524:	18fb      	adds	r3, r7, r3
 8018526:	0018      	movs	r0, r3
 8018528:	2314      	movs	r3, #20
 801852a:	001a      	movs	r2, r3
 801852c:	2100      	movs	r1, #0
 801852e:	f004 ff64 	bl	801d3fa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018532:	1d3b      	adds	r3, r7, #4
 8018534:	0018      	movs	r0, r3
 8018536:	2328      	movs	r3, #40	; 0x28
 8018538:	001a      	movs	r2, r3
 801853a:	2100      	movs	r1, #0
 801853c:	f004 ff5d 	bl	801d3fa <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8018540:	4b2a      	ldr	r3, [pc, #168]	; (80185ec <SystemClock_Config+0xe0>)
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	4a2a      	ldr	r2, [pc, #168]	; (80185f0 <SystemClock_Config+0xe4>)
 8018546:	401a      	ands	r2, r3
 8018548:	4b28      	ldr	r3, [pc, #160]	; (80185ec <SystemClock_Config+0xe0>)
 801854a:	2180      	movs	r1, #128	; 0x80
 801854c:	0109      	lsls	r1, r1, #4
 801854e:	430a      	orrs	r2, r1
 8018550:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8018552:	0021      	movs	r1, r4
 8018554:	187b      	adds	r3, r7, r1
 8018556:	2202      	movs	r2, #2
 8018558:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801855a:	187b      	adds	r3, r7, r1
 801855c:	2201      	movs	r2, #1
 801855e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8018560:	187b      	adds	r3, r7, r1
 8018562:	2210      	movs	r2, #16
 8018564:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8018566:	187b      	adds	r3, r7, r1
 8018568:	2202      	movs	r2, #2
 801856a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801856c:	187b      	adds	r3, r7, r1
 801856e:	2200      	movs	r2, #0
 8018570:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8018572:	187b      	adds	r3, r7, r1
 8018574:	2200      	movs	r2, #0
 8018576:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8018578:	187b      	adds	r3, r7, r1
 801857a:	2280      	movs	r2, #128	; 0x80
 801857c:	03d2      	lsls	r2, r2, #15
 801857e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8018580:	187b      	adds	r3, r7, r1
 8018582:	0018      	movs	r0, r3
 8018584:	f000 fe24 	bl	80191d0 <HAL_RCC_OscConfig>
 8018588:	1e03      	subs	r3, r0, #0
 801858a:	d001      	beq.n	8018590 <SystemClock_Config+0x84>
  {
    Error_Handler();
 801858c:	f000 f942 	bl	8018814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8018590:	212c      	movs	r1, #44	; 0x2c
 8018592:	187b      	adds	r3, r7, r1
 8018594:	220f      	movs	r2, #15
 8018596:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8018598:	187b      	adds	r3, r7, r1
 801859a:	2203      	movs	r2, #3
 801859c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801859e:	187b      	adds	r3, r7, r1
 80185a0:	2200      	movs	r2, #0
 80185a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80185a4:	187b      	adds	r3, r7, r1
 80185a6:	2200      	movs	r2, #0
 80185a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80185aa:	187b      	adds	r3, r7, r1
 80185ac:	2200      	movs	r2, #0
 80185ae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80185b0:	187b      	adds	r3, r7, r1
 80185b2:	2101      	movs	r1, #1
 80185b4:	0018      	movs	r0, r3
 80185b6:	f001 f9df 	bl	8019978 <HAL_RCC_ClockConfig>
 80185ba:	1e03      	subs	r3, r0, #0
 80185bc:	d001      	beq.n	80185c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80185be:	f000 f929 	bl	8018814 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80185c2:	1d3b      	adds	r3, r7, #4
 80185c4:	2203      	movs	r2, #3
 80185c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80185c8:	1d3b      	adds	r3, r7, #4
 80185ca:	2200      	movs	r2, #0
 80185cc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80185ce:	1d3b      	adds	r3, r7, #4
 80185d0:	2200      	movs	r2, #0
 80185d2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80185d4:	1d3b      	adds	r3, r7, #4
 80185d6:	0018      	movs	r0, r3
 80185d8:	f001 fc24 	bl	8019e24 <HAL_RCCEx_PeriphCLKConfig>
 80185dc:	1e03      	subs	r3, r0, #0
 80185de:	d001      	beq.n	80185e4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80185e0:	f000 f918 	bl	8018814 <Error_Handler>
  }
}
 80185e4:	46c0      	nop			; (mov r8, r8)
 80185e6:	46bd      	mov	sp, r7
 80185e8:	b01f      	add	sp, #124	; 0x7c
 80185ea:	bd90      	pop	{r4, r7, pc}
 80185ec:	40007000 	.word	0x40007000
 80185f0:	ffffe7ff 	.word	0xffffe7ff

080185f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80185f8:	4b0e      	ldr	r3, [pc, #56]	; (8018634 <MX_CRC_Init+0x40>)
 80185fa:	4a0f      	ldr	r2, [pc, #60]	; (8018638 <MX_CRC_Init+0x44>)
 80185fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80185fe:	4b0d      	ldr	r3, [pc, #52]	; (8018634 <MX_CRC_Init+0x40>)
 8018600:	2200      	movs	r2, #0
 8018602:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8018604:	4b0b      	ldr	r3, [pc, #44]	; (8018634 <MX_CRC_Init+0x40>)
 8018606:	2200      	movs	r2, #0
 8018608:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 801860a:	4b0a      	ldr	r3, [pc, #40]	; (8018634 <MX_CRC_Init+0x40>)
 801860c:	2200      	movs	r2, #0
 801860e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8018610:	4b08      	ldr	r3, [pc, #32]	; (8018634 <MX_CRC_Init+0x40>)
 8018612:	2200      	movs	r2, #0
 8018614:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8018616:	4b07      	ldr	r3, [pc, #28]	; (8018634 <MX_CRC_Init+0x40>)
 8018618:	2201      	movs	r2, #1
 801861a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 801861c:	4b05      	ldr	r3, [pc, #20]	; (8018634 <MX_CRC_Init+0x40>)
 801861e:	0018      	movs	r0, r3
 8018620:	f000 fb40 	bl	8018ca4 <HAL_CRC_Init>
 8018624:	1e03      	subs	r3, r0, #0
 8018626:	d001      	beq.n	801862c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8018628:	f000 f8f4 	bl	8018814 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 801862c:	46c0      	nop			; (mov r8, r8)
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}
 8018632:	46c0      	nop			; (mov r8, r8)
 8018634:	20000090 	.word	0x20000090
 8018638:	40023000 	.word	0x40023000

0801863c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 801863c:	b580      	push	{r7, lr}
 801863e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8018640:	4b14      	ldr	r3, [pc, #80]	; (8018694 <MX_USART1_UART_Init+0x58>)
 8018642:	4a15      	ldr	r2, [pc, #84]	; (8018698 <MX_USART1_UART_Init+0x5c>)
 8018644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8018646:	4b13      	ldr	r3, [pc, #76]	; (8018694 <MX_USART1_UART_Init+0x58>)
 8018648:	22e1      	movs	r2, #225	; 0xe1
 801864a:	0252      	lsls	r2, r2, #9
 801864c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801864e:	4b11      	ldr	r3, [pc, #68]	; (8018694 <MX_USART1_UART_Init+0x58>)
 8018650:	2200      	movs	r2, #0
 8018652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8018654:	4b0f      	ldr	r3, [pc, #60]	; (8018694 <MX_USART1_UART_Init+0x58>)
 8018656:	2200      	movs	r2, #0
 8018658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801865a:	4b0e      	ldr	r3, [pc, #56]	; (8018694 <MX_USART1_UART_Init+0x58>)
 801865c:	2200      	movs	r2, #0
 801865e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8018660:	4b0c      	ldr	r3, [pc, #48]	; (8018694 <MX_USART1_UART_Init+0x58>)
 8018662:	220c      	movs	r2, #12
 8018664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018666:	4b0b      	ldr	r3, [pc, #44]	; (8018694 <MX_USART1_UART_Init+0x58>)
 8018668:	2200      	movs	r2, #0
 801866a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801866c:	4b09      	ldr	r3, [pc, #36]	; (8018694 <MX_USART1_UART_Init+0x58>)
 801866e:	2200      	movs	r2, #0
 8018670:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018672:	4b08      	ldr	r3, [pc, #32]	; (8018694 <MX_USART1_UART_Init+0x58>)
 8018674:	2200      	movs	r2, #0
 8018676:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018678:	4b06      	ldr	r3, [pc, #24]	; (8018694 <MX_USART1_UART_Init+0x58>)
 801867a:	2200      	movs	r2, #0
 801867c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801867e:	4b05      	ldr	r3, [pc, #20]	; (8018694 <MX_USART1_UART_Init+0x58>)
 8018680:	0018      	movs	r0, r3
 8018682:	f001 ff43 	bl	801a50c <HAL_UART_Init>
 8018686:	1e03      	subs	r3, r0, #0
 8018688:	d001      	beq.n	801868e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801868a:	f000 f8c3 	bl	8018814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801868e:	46c0      	nop			; (mov r8, r8)
 8018690:	46bd      	mov	sp, r7
 8018692:	bd80      	pop	{r7, pc}
 8018694:	200000b4 	.word	0x200000b4
 8018698:	40013800 	.word	0x40013800

0801869c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 801869c:	b580      	push	{r7, lr}
 801869e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80186a0:	4b14      	ldr	r3, [pc, #80]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186a2:	4a15      	ldr	r2, [pc, #84]	; (80186f8 <MX_USART2_UART_Init+0x5c>)
 80186a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80186a6:	4b13      	ldr	r3, [pc, #76]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186a8:	22e1      	movs	r2, #225	; 0xe1
 80186aa:	0252      	lsls	r2, r2, #9
 80186ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80186ae:	4b11      	ldr	r3, [pc, #68]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186b0:	2200      	movs	r2, #0
 80186b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80186b4:	4b0f      	ldr	r3, [pc, #60]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186b6:	2200      	movs	r2, #0
 80186b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80186ba:	4b0e      	ldr	r3, [pc, #56]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186bc:	2200      	movs	r2, #0
 80186be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80186c0:	4b0c      	ldr	r3, [pc, #48]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186c2:	220c      	movs	r2, #12
 80186c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80186c6:	4b0b      	ldr	r3, [pc, #44]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186c8:	2200      	movs	r2, #0
 80186ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80186cc:	4b09      	ldr	r3, [pc, #36]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186ce:	2200      	movs	r2, #0
 80186d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80186d2:	4b08      	ldr	r3, [pc, #32]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186d4:	2200      	movs	r2, #0
 80186d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80186d8:	4b06      	ldr	r3, [pc, #24]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186da:	2200      	movs	r2, #0
 80186dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80186de:	4b05      	ldr	r3, [pc, #20]	; (80186f4 <MX_USART2_UART_Init+0x58>)
 80186e0:	0018      	movs	r0, r3
 80186e2:	f001 ff13 	bl	801a50c <HAL_UART_Init>
 80186e6:	1e03      	subs	r3, r0, #0
 80186e8:	d001      	beq.n	80186ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80186ea:	f000 f893 	bl	8018814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80186ee:	46c0      	nop			; (mov r8, r8)
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}
 80186f4:	20000138 	.word	0x20000138
 80186f8:	40004400 	.word	0x40004400

080186fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80186fc:	b590      	push	{r4, r7, lr}
 80186fe:	b089      	sub	sp, #36	; 0x24
 8018700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018702:	240c      	movs	r4, #12
 8018704:	193b      	adds	r3, r7, r4
 8018706:	0018      	movs	r0, r3
 8018708:	2314      	movs	r3, #20
 801870a:	001a      	movs	r2, r3
 801870c:	2100      	movs	r1, #0
 801870e:	f004 fe74 	bl	801d3fa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8018712:	4b2e      	ldr	r3, [pc, #184]	; (80187cc <MX_GPIO_Init+0xd0>)
 8018714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018716:	4b2d      	ldr	r3, [pc, #180]	; (80187cc <MX_GPIO_Init+0xd0>)
 8018718:	2104      	movs	r1, #4
 801871a:	430a      	orrs	r2, r1
 801871c:	62da      	str	r2, [r3, #44]	; 0x2c
 801871e:	4b2b      	ldr	r3, [pc, #172]	; (80187cc <MX_GPIO_Init+0xd0>)
 8018720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018722:	2204      	movs	r2, #4
 8018724:	4013      	ands	r3, r2
 8018726:	60bb      	str	r3, [r7, #8]
 8018728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801872a:	4b28      	ldr	r3, [pc, #160]	; (80187cc <MX_GPIO_Init+0xd0>)
 801872c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801872e:	4b27      	ldr	r3, [pc, #156]	; (80187cc <MX_GPIO_Init+0xd0>)
 8018730:	2180      	movs	r1, #128	; 0x80
 8018732:	430a      	orrs	r2, r1
 8018734:	62da      	str	r2, [r3, #44]	; 0x2c
 8018736:	4b25      	ldr	r3, [pc, #148]	; (80187cc <MX_GPIO_Init+0xd0>)
 8018738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801873a:	2280      	movs	r2, #128	; 0x80
 801873c:	4013      	ands	r3, r2
 801873e:	607b      	str	r3, [r7, #4]
 8018740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8018742:	4b22      	ldr	r3, [pc, #136]	; (80187cc <MX_GPIO_Init+0xd0>)
 8018744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018746:	4b21      	ldr	r3, [pc, #132]	; (80187cc <MX_GPIO_Init+0xd0>)
 8018748:	2101      	movs	r1, #1
 801874a:	430a      	orrs	r2, r1
 801874c:	62da      	str	r2, [r3, #44]	; 0x2c
 801874e:	4b1f      	ldr	r3, [pc, #124]	; (80187cc <MX_GPIO_Init+0xd0>)
 8018750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018752:	2201      	movs	r2, #1
 8018754:	4013      	ands	r3, r2
 8018756:	603b      	str	r3, [r7, #0]
 8018758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 801875a:	23a0      	movs	r3, #160	; 0xa0
 801875c:	05db      	lsls	r3, r3, #23
 801875e:	2200      	movs	r2, #0
 8018760:	2120      	movs	r1, #32
 8018762:	0018      	movs	r0, r3
 8018764:	f000 fcf0 	bl	8019148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8018768:	193b      	adds	r3, r7, r4
 801876a:	2280      	movs	r2, #128	; 0x80
 801876c:	0192      	lsls	r2, r2, #6
 801876e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8018770:	193b      	adds	r3, r7, r4
 8018772:	2284      	movs	r2, #132	; 0x84
 8018774:	0392      	lsls	r2, r2, #14
 8018776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018778:	193b      	adds	r3, r7, r4
 801877a:	2200      	movs	r2, #0
 801877c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801877e:	193b      	adds	r3, r7, r4
 8018780:	4a13      	ldr	r2, [pc, #76]	; (80187d0 <MX_GPIO_Init+0xd4>)
 8018782:	0019      	movs	r1, r3
 8018784:	0010      	movs	r0, r2
 8018786:	f000 fb61 	bl	8018e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 801878a:	0021      	movs	r1, r4
 801878c:	187b      	adds	r3, r7, r1
 801878e:	2220      	movs	r2, #32
 8018790:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018792:	187b      	adds	r3, r7, r1
 8018794:	2201      	movs	r2, #1
 8018796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018798:	187b      	adds	r3, r7, r1
 801879a:	2200      	movs	r2, #0
 801879c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801879e:	187b      	adds	r3, r7, r1
 80187a0:	2200      	movs	r2, #0
 80187a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80187a4:	187a      	adds	r2, r7, r1
 80187a6:	23a0      	movs	r3, #160	; 0xa0
 80187a8:	05db      	lsls	r3, r3, #23
 80187aa:	0011      	movs	r1, r2
 80187ac:	0018      	movs	r0, r3
 80187ae:	f000 fb4d 	bl	8018e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80187b2:	2200      	movs	r2, #0
 80187b4:	2103      	movs	r1, #3
 80187b6:	2007      	movs	r0, #7
 80187b8:	f000 fa4e 	bl	8018c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80187bc:	2007      	movs	r0, #7
 80187be:	f000 fa60 	bl	8018c82 <HAL_NVIC_EnableIRQ>

}
 80187c2:	46c0      	nop			; (mov r8, r8)
 80187c4:	46bd      	mov	sp, r7
 80187c6:	b009      	add	sp, #36	; 0x24
 80187c8:	bd90      	pop	{r4, r7, pc}
 80187ca:	46c0      	nop			; (mov r8, r8)
 80187cc:	40021000 	.word	0x40021000
 80187d0:	50000800 	.word	0x50000800

080187d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b082      	sub	sp, #8
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80187dc:	2001      	movs	r0, #1
 80187de:	f002 fc4f 	bl	801b080 <osDelay>
 80187e2:	e7fb      	b.n	80187dc <StartDefaultTask+0x8>

080187e4 <High_Priority_Task_Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_High_Priority_Task_Handler */
void High_Priority_Task_Handler(void *argument)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b082      	sub	sp, #8
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN High_Priority_Task_Handler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80187ec:	2001      	movs	r0, #1
 80187ee:	f002 fc47 	bl	801b080 <osDelay>
 80187f2:	e7fb      	b.n	80187ec <High_Priority_Task_Handler+0x8>

080187f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b082      	sub	sp, #8
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	681a      	ldr	r2, [r3, #0]
 8018800:	2380      	movs	r3, #128	; 0x80
 8018802:	05db      	lsls	r3, r3, #23
 8018804:	429a      	cmp	r2, r3
 8018806:	d101      	bne.n	801880c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8018808:	f000 f982 	bl	8018b10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801880c:	46c0      	nop			; (mov r8, r8)
 801880e:	46bd      	mov	sp, r7
 8018810:	b002      	add	sp, #8
 8018812:	bd80      	pop	{r7, pc}

08018814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8018814:	b580      	push	{r7, lr}
 8018816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8018818:	b672      	cpsid	i
}
 801881a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801881c:	e7fe      	b.n	801881c <Error_Handler+0x8>
	...

08018820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8018820:	b580      	push	{r7, lr}
 8018822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018824:	4b0b      	ldr	r3, [pc, #44]	; (8018854 <HAL_MspInit+0x34>)
 8018826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018828:	4b0a      	ldr	r3, [pc, #40]	; (8018854 <HAL_MspInit+0x34>)
 801882a:	2101      	movs	r1, #1
 801882c:	430a      	orrs	r2, r1
 801882e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8018830:	4b08      	ldr	r3, [pc, #32]	; (8018854 <HAL_MspInit+0x34>)
 8018832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018834:	4b07      	ldr	r3, [pc, #28]	; (8018854 <HAL_MspInit+0x34>)
 8018836:	2180      	movs	r1, #128	; 0x80
 8018838:	0549      	lsls	r1, r1, #21
 801883a:	430a      	orrs	r2, r1
 801883c:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 801883e:	2302      	movs	r3, #2
 8018840:	425b      	negs	r3, r3
 8018842:	2200      	movs	r2, #0
 8018844:	2103      	movs	r1, #3
 8018846:	0018      	movs	r0, r3
 8018848:	f000 fa06 	bl	8018c58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801884c:	46c0      	nop			; (mov r8, r8)
 801884e:	46bd      	mov	sp, r7
 8018850:	bd80      	pop	{r7, pc}
 8018852:	46c0      	nop			; (mov r8, r8)
 8018854:	40021000 	.word	0x40021000

08018858 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b084      	sub	sp, #16
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	4a0a      	ldr	r2, [pc, #40]	; (8018890 <HAL_CRC_MspInit+0x38>)
 8018866:	4293      	cmp	r3, r2
 8018868:	d10d      	bne.n	8018886 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 801886a:	4b0a      	ldr	r3, [pc, #40]	; (8018894 <HAL_CRC_MspInit+0x3c>)
 801886c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801886e:	4b09      	ldr	r3, [pc, #36]	; (8018894 <HAL_CRC_MspInit+0x3c>)
 8018870:	2180      	movs	r1, #128	; 0x80
 8018872:	0149      	lsls	r1, r1, #5
 8018874:	430a      	orrs	r2, r1
 8018876:	631a      	str	r2, [r3, #48]	; 0x30
 8018878:	4b06      	ldr	r3, [pc, #24]	; (8018894 <HAL_CRC_MspInit+0x3c>)
 801887a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801887c:	2380      	movs	r3, #128	; 0x80
 801887e:	015b      	lsls	r3, r3, #5
 8018880:	4013      	ands	r3, r2
 8018882:	60fb      	str	r3, [r7, #12]
 8018884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8018886:	46c0      	nop			; (mov r8, r8)
 8018888:	46bd      	mov	sp, r7
 801888a:	b004      	add	sp, #16
 801888c:	bd80      	pop	{r7, pc}
 801888e:	46c0      	nop			; (mov r8, r8)
 8018890:	40023000 	.word	0x40023000
 8018894:	40021000 	.word	0x40021000

08018898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8018898:	b590      	push	{r4, r7, lr}
 801889a:	b08b      	sub	sp, #44	; 0x2c
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80188a0:	2414      	movs	r4, #20
 80188a2:	193b      	adds	r3, r7, r4
 80188a4:	0018      	movs	r0, r3
 80188a6:	2314      	movs	r3, #20
 80188a8:	001a      	movs	r2, r3
 80188aa:	2100      	movs	r1, #0
 80188ac:	f004 fda5 	bl	801d3fa <memset>
  if(huart->Instance==USART1)
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	4a30      	ldr	r2, [pc, #192]	; (8018978 <HAL_UART_MspInit+0xe0>)
 80188b6:	4293      	cmp	r3, r2
 80188b8:	d12b      	bne.n	8018912 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80188ba:	4b30      	ldr	r3, [pc, #192]	; (801897c <HAL_UART_MspInit+0xe4>)
 80188bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80188be:	4b2f      	ldr	r3, [pc, #188]	; (801897c <HAL_UART_MspInit+0xe4>)
 80188c0:	2180      	movs	r1, #128	; 0x80
 80188c2:	01c9      	lsls	r1, r1, #7
 80188c4:	430a      	orrs	r2, r1
 80188c6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80188c8:	4b2c      	ldr	r3, [pc, #176]	; (801897c <HAL_UART_MspInit+0xe4>)
 80188ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188cc:	4b2b      	ldr	r3, [pc, #172]	; (801897c <HAL_UART_MspInit+0xe4>)
 80188ce:	2101      	movs	r1, #1
 80188d0:	430a      	orrs	r2, r1
 80188d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80188d4:	4b29      	ldr	r3, [pc, #164]	; (801897c <HAL_UART_MspInit+0xe4>)
 80188d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188d8:	2201      	movs	r2, #1
 80188da:	4013      	ands	r3, r2
 80188dc:	613b      	str	r3, [r7, #16]
 80188de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80188e0:	193b      	adds	r3, r7, r4
 80188e2:	22c0      	movs	r2, #192	; 0xc0
 80188e4:	00d2      	lsls	r2, r2, #3
 80188e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80188e8:	0021      	movs	r1, r4
 80188ea:	187b      	adds	r3, r7, r1
 80188ec:	2202      	movs	r2, #2
 80188ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80188f0:	187b      	adds	r3, r7, r1
 80188f2:	2200      	movs	r2, #0
 80188f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80188f6:	187b      	adds	r3, r7, r1
 80188f8:	2203      	movs	r2, #3
 80188fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80188fc:	187b      	adds	r3, r7, r1
 80188fe:	2204      	movs	r2, #4
 8018900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018902:	187a      	adds	r2, r7, r1
 8018904:	23a0      	movs	r3, #160	; 0xa0
 8018906:	05db      	lsls	r3, r3, #23
 8018908:	0011      	movs	r1, r2
 801890a:	0018      	movs	r0, r3
 801890c:	f000 fa9e 	bl	8018e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8018910:	e02e      	b.n	8018970 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	4a1a      	ldr	r2, [pc, #104]	; (8018980 <HAL_UART_MspInit+0xe8>)
 8018918:	4293      	cmp	r3, r2
 801891a:	d129      	bne.n	8018970 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 801891c:	4b17      	ldr	r3, [pc, #92]	; (801897c <HAL_UART_MspInit+0xe4>)
 801891e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018920:	4b16      	ldr	r3, [pc, #88]	; (801897c <HAL_UART_MspInit+0xe4>)
 8018922:	2180      	movs	r1, #128	; 0x80
 8018924:	0289      	lsls	r1, r1, #10
 8018926:	430a      	orrs	r2, r1
 8018928:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801892a:	4b14      	ldr	r3, [pc, #80]	; (801897c <HAL_UART_MspInit+0xe4>)
 801892c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801892e:	4b13      	ldr	r3, [pc, #76]	; (801897c <HAL_UART_MspInit+0xe4>)
 8018930:	2101      	movs	r1, #1
 8018932:	430a      	orrs	r2, r1
 8018934:	62da      	str	r2, [r3, #44]	; 0x2c
 8018936:	4b11      	ldr	r3, [pc, #68]	; (801897c <HAL_UART_MspInit+0xe4>)
 8018938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801893a:	2201      	movs	r2, #1
 801893c:	4013      	ands	r3, r2
 801893e:	60fb      	str	r3, [r7, #12]
 8018940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8018942:	2114      	movs	r1, #20
 8018944:	187b      	adds	r3, r7, r1
 8018946:	220c      	movs	r2, #12
 8018948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801894a:	187b      	adds	r3, r7, r1
 801894c:	2202      	movs	r2, #2
 801894e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018950:	187b      	adds	r3, r7, r1
 8018952:	2200      	movs	r2, #0
 8018954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018956:	187b      	adds	r3, r7, r1
 8018958:	2203      	movs	r2, #3
 801895a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 801895c:	187b      	adds	r3, r7, r1
 801895e:	2204      	movs	r2, #4
 8018960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018962:	187a      	adds	r2, r7, r1
 8018964:	23a0      	movs	r3, #160	; 0xa0
 8018966:	05db      	lsls	r3, r3, #23
 8018968:	0011      	movs	r1, r2
 801896a:	0018      	movs	r0, r3
 801896c:	f000 fa6e 	bl	8018e4c <HAL_GPIO_Init>
}
 8018970:	46c0      	nop			; (mov r8, r8)
 8018972:	46bd      	mov	sp, r7
 8018974:	b00b      	add	sp, #44	; 0x2c
 8018976:	bd90      	pop	{r4, r7, pc}
 8018978:	40013800 	.word	0x40013800
 801897c:	40021000 	.word	0x40021000
 8018980:	40004400 	.word	0x40004400

08018984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b08a      	sub	sp, #40	; 0x28
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801898c:	2300      	movs	r3, #0
 801898e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8018990:	2300      	movs	r3, #0
 8018992:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	2200      	movs	r2, #0
 8018998:	0019      	movs	r1, r3
 801899a:	200f      	movs	r0, #15
 801899c:	f000 f95c 	bl	8018c58 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80189a0:	200f      	movs	r0, #15
 80189a2:	f000 f96e 	bl	8018c82 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80189a6:	4b1d      	ldr	r3, [pc, #116]	; (8018a1c <HAL_InitTick+0x98>)
 80189a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80189aa:	4b1c      	ldr	r3, [pc, #112]	; (8018a1c <HAL_InitTick+0x98>)
 80189ac:	2101      	movs	r1, #1
 80189ae:	430a      	orrs	r2, r1
 80189b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80189b2:	2308      	movs	r3, #8
 80189b4:	18fa      	adds	r2, r7, r3
 80189b6:	230c      	movs	r3, #12
 80189b8:	18fb      	adds	r3, r7, r3
 80189ba:	0011      	movs	r1, r2
 80189bc:	0018      	movs	r0, r3
 80189be:	f001 f9ff 	bl	8019dc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80189c2:	f001 f9d1 	bl	8019d68 <HAL_RCC_GetPCLK1Freq>
 80189c6:	0003      	movs	r3, r0
 80189c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80189ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189cc:	4914      	ldr	r1, [pc, #80]	; (8018a20 <HAL_InitTick+0x9c>)
 80189ce:	0018      	movs	r0, r3
 80189d0:	f7ff fb9a 	bl	8018108 <__udivsi3>
 80189d4:	0003      	movs	r3, r0
 80189d6:	3b01      	subs	r3, #1
 80189d8:	623b      	str	r3, [r7, #32]

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80189da:	4b12      	ldr	r3, [pc, #72]	; (8018a24 <HAL_InitTick+0xa0>)
 80189dc:	2280      	movs	r2, #128	; 0x80
 80189de:	05d2      	lsls	r2, r2, #23
 80189e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80189e2:	4b10      	ldr	r3, [pc, #64]	; (8018a24 <HAL_InitTick+0xa0>)
 80189e4:	4a10      	ldr	r2, [pc, #64]	; (8018a28 <HAL_InitTick+0xa4>)
 80189e6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80189e8:	4b0e      	ldr	r3, [pc, #56]	; (8018a24 <HAL_InitTick+0xa0>)
 80189ea:	6a3a      	ldr	r2, [r7, #32]
 80189ec:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 80189ee:	4b0d      	ldr	r3, [pc, #52]	; (8018a24 <HAL_InitTick+0xa0>)
 80189f0:	2200      	movs	r2, #0
 80189f2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80189f4:	4b0b      	ldr	r3, [pc, #44]	; (8018a24 <HAL_InitTick+0xa0>)
 80189f6:	2200      	movs	r2, #0
 80189f8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80189fa:	4b0a      	ldr	r3, [pc, #40]	; (8018a24 <HAL_InitTick+0xa0>)
 80189fc:	0018      	movs	r0, r3
 80189fe:	f001 fb85 	bl	801a10c <HAL_TIM_Base_Init>
 8018a02:	1e03      	subs	r3, r0, #0
 8018a04:	d105      	bne.n	8018a12 <HAL_InitTick+0x8e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8018a06:	4b07      	ldr	r3, [pc, #28]	; (8018a24 <HAL_InitTick+0xa0>)
 8018a08:	0018      	movs	r0, r3
 8018a0a:	f001 fbc7 	bl	801a19c <HAL_TIM_Base_Start_IT>
 8018a0e:	0003      	movs	r3, r0
 8018a10:	e000      	b.n	8018a14 <HAL_InitTick+0x90>
  }

  /* Return function status */
  return HAL_ERROR;
 8018a12:	2301      	movs	r3, #1
}
 8018a14:	0018      	movs	r0, r3
 8018a16:	46bd      	mov	sp, r7
 8018a18:	b00a      	add	sp, #40	; 0x28
 8018a1a:	bd80      	pop	{r7, pc}
 8018a1c:	40021000 	.word	0x40021000
 8018a20:	000f4240 	.word	0x000f4240
 8018a24:	20000480 	.word	0x20000480
 8018a28:	000003e7 	.word	0x000003e7

08018a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8018a30:	e7fe      	b.n	8018a30 <NMI_Handler+0x4>

08018a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8018a32:	b580      	push	{r7, lr}
 8018a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8018a36:	e7fe      	b.n	8018a36 <HardFault_Handler+0x4>

08018a38 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8018a3c:	2380      	movs	r3, #128	; 0x80
 8018a3e:	019b      	lsls	r3, r3, #6
 8018a40:	0018      	movs	r0, r3
 8018a42:	f000 fb9f 	bl	8019184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8018a46:	46c0      	nop			; (mov r8, r8)
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	bd80      	pop	{r7, pc}

08018a4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8018a50:	4b03      	ldr	r3, [pc, #12]	; (8018a60 <TIM2_IRQHandler+0x14>)
 8018a52:	0018      	movs	r0, r3
 8018a54:	f001 fbf4 	bl	801a240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8018a58:	46c0      	nop			; (mov r8, r8)
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd80      	pop	{r7, pc}
 8018a5e:	46c0      	nop			; (mov r8, r8)
 8018a60:	20000480 	.word	0x20000480

08018a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8018a68:	4b02      	ldr	r3, [pc, #8]	; (8018a74 <SystemInit+0x10>)
 8018a6a:	4a03      	ldr	r2, [pc, #12]	; (8018a78 <SystemInit+0x14>)
 8018a6c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018a6e:	46c0      	nop			; (mov r8, r8)
 8018a70:	46bd      	mov	sp, r7
 8018a72:	bd80      	pop	{r7, pc}
 8018a74:	e000ed00 	.word	0xe000ed00
 8018a78:	08018000 	.word	0x08018000

08018a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8018a7c:	480d      	ldr	r0, [pc, #52]	; (8018ab4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8018a7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8018a80:	480d      	ldr	r0, [pc, #52]	; (8018ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8018a82:	490e      	ldr	r1, [pc, #56]	; (8018abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8018a84:	4a0e      	ldr	r2, [pc, #56]	; (8018ac0 <LoopForever+0xe>)
  movs r3, #0
 8018a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8018a88:	e002      	b.n	8018a90 <LoopCopyDataInit>

08018a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8018a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8018a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8018a8e:	3304      	adds	r3, #4

08018a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8018a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8018a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018a94:	d3f9      	bcc.n	8018a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018a96:	4a0b      	ldr	r2, [pc, #44]	; (8018ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8018a98:	4c0b      	ldr	r4, [pc, #44]	; (8018ac8 <LoopForever+0x16>)
  movs r3, #0
 8018a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8018a9c:	e001      	b.n	8018aa2 <LoopFillZerobss>

08018a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8018a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018aa0:	3204      	adds	r2, #4

08018aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8018aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018aa4:	d3fb      	bcc.n	8018a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8018aa6:	f7ff ffdd 	bl	8018a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018aaa:	f004 fc77 	bl	801d39c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8018aae:	f7ff fcfb 	bl	80184a8 <main>

08018ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8018ab2:	e7fe      	b.n	8018ab2 <LoopForever>
   ldr   r0, =_estack
 8018ab4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8018ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8018abc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8018ac0:	0801d73c 	.word	0x0801d73c
  ldr r2, =_sbss
 8018ac4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8018ac8:	20001ecc 	.word	0x20001ecc

08018acc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018acc:	e7fe      	b.n	8018acc <ADC1_COMP_IRQHandler>
	...

08018ad0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b082      	sub	sp, #8
 8018ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8018ad6:	1dfb      	adds	r3, r7, #7
 8018ad8:	2200      	movs	r2, #0
 8018ada:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8018adc:	4b0b      	ldr	r3, [pc, #44]	; (8018b0c <HAL_Init+0x3c>)
 8018ade:	681a      	ldr	r2, [r3, #0]
 8018ae0:	4b0a      	ldr	r3, [pc, #40]	; (8018b0c <HAL_Init+0x3c>)
 8018ae2:	2140      	movs	r1, #64	; 0x40
 8018ae4:	430a      	orrs	r2, r1
 8018ae6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8018ae8:	2003      	movs	r0, #3
 8018aea:	f7ff ff4b 	bl	8018984 <HAL_InitTick>
 8018aee:	1e03      	subs	r3, r0, #0
 8018af0:	d003      	beq.n	8018afa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8018af2:	1dfb      	adds	r3, r7, #7
 8018af4:	2201      	movs	r2, #1
 8018af6:	701a      	strb	r2, [r3, #0]
 8018af8:	e001      	b.n	8018afe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8018afa:	f7ff fe91 	bl	8018820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8018afe:	1dfb      	adds	r3, r7, #7
 8018b00:	781b      	ldrb	r3, [r3, #0]
}
 8018b02:	0018      	movs	r0, r3
 8018b04:	46bd      	mov	sp, r7
 8018b06:	b002      	add	sp, #8
 8018b08:	bd80      	pop	{r7, pc}
 8018b0a:	46c0      	nop			; (mov r8, r8)
 8018b0c:	40022000 	.word	0x40022000

08018b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018b14:	4b05      	ldr	r3, [pc, #20]	; (8018b2c <HAL_IncTick+0x1c>)
 8018b16:	781b      	ldrb	r3, [r3, #0]
 8018b18:	001a      	movs	r2, r3
 8018b1a:	4b05      	ldr	r3, [pc, #20]	; (8018b30 <HAL_IncTick+0x20>)
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	18d2      	adds	r2, r2, r3
 8018b20:	4b03      	ldr	r3, [pc, #12]	; (8018b30 <HAL_IncTick+0x20>)
 8018b22:	601a      	str	r2, [r3, #0]
}
 8018b24:	46c0      	nop			; (mov r8, r8)
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bd80      	pop	{r7, pc}
 8018b2a:	46c0      	nop			; (mov r8, r8)
 8018b2c:	20000008 	.word	0x20000008
 8018b30:	200004c0 	.word	0x200004c0

08018b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	af00      	add	r7, sp, #0
  return uwTick;
 8018b38:	4b02      	ldr	r3, [pc, #8]	; (8018b44 <HAL_GetTick+0x10>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
}
 8018b3c:	0018      	movs	r0, r3
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}
 8018b42:	46c0      	nop			; (mov r8, r8)
 8018b44:	200004c0 	.word	0x200004c0

08018b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b082      	sub	sp, #8
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	0002      	movs	r2, r0
 8018b50:	1dfb      	adds	r3, r7, #7
 8018b52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8018b54:	1dfb      	adds	r3, r7, #7
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	2b7f      	cmp	r3, #127	; 0x7f
 8018b5a:	d809      	bhi.n	8018b70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018b5c:	1dfb      	adds	r3, r7, #7
 8018b5e:	781b      	ldrb	r3, [r3, #0]
 8018b60:	001a      	movs	r2, r3
 8018b62:	231f      	movs	r3, #31
 8018b64:	401a      	ands	r2, r3
 8018b66:	4b04      	ldr	r3, [pc, #16]	; (8018b78 <__NVIC_EnableIRQ+0x30>)
 8018b68:	2101      	movs	r1, #1
 8018b6a:	4091      	lsls	r1, r2
 8018b6c:	000a      	movs	r2, r1
 8018b6e:	601a      	str	r2, [r3, #0]
  }
}
 8018b70:	46c0      	nop			; (mov r8, r8)
 8018b72:	46bd      	mov	sp, r7
 8018b74:	b002      	add	sp, #8
 8018b76:	bd80      	pop	{r7, pc}
 8018b78:	e000e100 	.word	0xe000e100

08018b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018b7c:	b590      	push	{r4, r7, lr}
 8018b7e:	b083      	sub	sp, #12
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	0002      	movs	r2, r0
 8018b84:	6039      	str	r1, [r7, #0]
 8018b86:	1dfb      	adds	r3, r7, #7
 8018b88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8018b8a:	1dfb      	adds	r3, r7, #7
 8018b8c:	781b      	ldrb	r3, [r3, #0]
 8018b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8018b90:	d828      	bhi.n	8018be4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018b92:	4a2f      	ldr	r2, [pc, #188]	; (8018c50 <__NVIC_SetPriority+0xd4>)
 8018b94:	1dfb      	adds	r3, r7, #7
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	b25b      	sxtb	r3, r3
 8018b9a:	089b      	lsrs	r3, r3, #2
 8018b9c:	33c0      	adds	r3, #192	; 0xc0
 8018b9e:	009b      	lsls	r3, r3, #2
 8018ba0:	589b      	ldr	r3, [r3, r2]
 8018ba2:	1dfa      	adds	r2, r7, #7
 8018ba4:	7812      	ldrb	r2, [r2, #0]
 8018ba6:	0011      	movs	r1, r2
 8018ba8:	2203      	movs	r2, #3
 8018baa:	400a      	ands	r2, r1
 8018bac:	00d2      	lsls	r2, r2, #3
 8018bae:	21ff      	movs	r1, #255	; 0xff
 8018bb0:	4091      	lsls	r1, r2
 8018bb2:	000a      	movs	r2, r1
 8018bb4:	43d2      	mvns	r2, r2
 8018bb6:	401a      	ands	r2, r3
 8018bb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8018bba:	683b      	ldr	r3, [r7, #0]
 8018bbc:	019b      	lsls	r3, r3, #6
 8018bbe:	22ff      	movs	r2, #255	; 0xff
 8018bc0:	401a      	ands	r2, r3
 8018bc2:	1dfb      	adds	r3, r7, #7
 8018bc4:	781b      	ldrb	r3, [r3, #0]
 8018bc6:	0018      	movs	r0, r3
 8018bc8:	2303      	movs	r3, #3
 8018bca:	4003      	ands	r3, r0
 8018bcc:	00db      	lsls	r3, r3, #3
 8018bce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018bd0:	481f      	ldr	r0, [pc, #124]	; (8018c50 <__NVIC_SetPriority+0xd4>)
 8018bd2:	1dfb      	adds	r3, r7, #7
 8018bd4:	781b      	ldrb	r3, [r3, #0]
 8018bd6:	b25b      	sxtb	r3, r3
 8018bd8:	089b      	lsrs	r3, r3, #2
 8018bda:	430a      	orrs	r2, r1
 8018bdc:	33c0      	adds	r3, #192	; 0xc0
 8018bde:	009b      	lsls	r3, r3, #2
 8018be0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8018be2:	e031      	b.n	8018c48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018be4:	4a1b      	ldr	r2, [pc, #108]	; (8018c54 <__NVIC_SetPriority+0xd8>)
 8018be6:	1dfb      	adds	r3, r7, #7
 8018be8:	781b      	ldrb	r3, [r3, #0]
 8018bea:	0019      	movs	r1, r3
 8018bec:	230f      	movs	r3, #15
 8018bee:	400b      	ands	r3, r1
 8018bf0:	3b08      	subs	r3, #8
 8018bf2:	089b      	lsrs	r3, r3, #2
 8018bf4:	3306      	adds	r3, #6
 8018bf6:	009b      	lsls	r3, r3, #2
 8018bf8:	18d3      	adds	r3, r2, r3
 8018bfa:	3304      	adds	r3, #4
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	1dfa      	adds	r2, r7, #7
 8018c00:	7812      	ldrb	r2, [r2, #0]
 8018c02:	0011      	movs	r1, r2
 8018c04:	2203      	movs	r2, #3
 8018c06:	400a      	ands	r2, r1
 8018c08:	00d2      	lsls	r2, r2, #3
 8018c0a:	21ff      	movs	r1, #255	; 0xff
 8018c0c:	4091      	lsls	r1, r2
 8018c0e:	000a      	movs	r2, r1
 8018c10:	43d2      	mvns	r2, r2
 8018c12:	401a      	ands	r2, r3
 8018c14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	019b      	lsls	r3, r3, #6
 8018c1a:	22ff      	movs	r2, #255	; 0xff
 8018c1c:	401a      	ands	r2, r3
 8018c1e:	1dfb      	adds	r3, r7, #7
 8018c20:	781b      	ldrb	r3, [r3, #0]
 8018c22:	0018      	movs	r0, r3
 8018c24:	2303      	movs	r3, #3
 8018c26:	4003      	ands	r3, r0
 8018c28:	00db      	lsls	r3, r3, #3
 8018c2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018c2c:	4809      	ldr	r0, [pc, #36]	; (8018c54 <__NVIC_SetPriority+0xd8>)
 8018c2e:	1dfb      	adds	r3, r7, #7
 8018c30:	781b      	ldrb	r3, [r3, #0]
 8018c32:	001c      	movs	r4, r3
 8018c34:	230f      	movs	r3, #15
 8018c36:	4023      	ands	r3, r4
 8018c38:	3b08      	subs	r3, #8
 8018c3a:	089b      	lsrs	r3, r3, #2
 8018c3c:	430a      	orrs	r2, r1
 8018c3e:	3306      	adds	r3, #6
 8018c40:	009b      	lsls	r3, r3, #2
 8018c42:	18c3      	adds	r3, r0, r3
 8018c44:	3304      	adds	r3, #4
 8018c46:	601a      	str	r2, [r3, #0]
}
 8018c48:	46c0      	nop			; (mov r8, r8)
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	b003      	add	sp, #12
 8018c4e:	bd90      	pop	{r4, r7, pc}
 8018c50:	e000e100 	.word	0xe000e100
 8018c54:	e000ed00 	.word	0xe000ed00

08018c58 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b084      	sub	sp, #16
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	60b9      	str	r1, [r7, #8]
 8018c60:	607a      	str	r2, [r7, #4]
 8018c62:	210f      	movs	r1, #15
 8018c64:	187b      	adds	r3, r7, r1
 8018c66:	1c02      	adds	r2, r0, #0
 8018c68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8018c6a:	68ba      	ldr	r2, [r7, #8]
 8018c6c:	187b      	adds	r3, r7, r1
 8018c6e:	781b      	ldrb	r3, [r3, #0]
 8018c70:	b25b      	sxtb	r3, r3
 8018c72:	0011      	movs	r1, r2
 8018c74:	0018      	movs	r0, r3
 8018c76:	f7ff ff81 	bl	8018b7c <__NVIC_SetPriority>
}
 8018c7a:	46c0      	nop			; (mov r8, r8)
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	b004      	add	sp, #16
 8018c80:	bd80      	pop	{r7, pc}

08018c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018c82:	b580      	push	{r7, lr}
 8018c84:	b082      	sub	sp, #8
 8018c86:	af00      	add	r7, sp, #0
 8018c88:	0002      	movs	r2, r0
 8018c8a:	1dfb      	adds	r3, r7, #7
 8018c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018c8e:	1dfb      	adds	r3, r7, #7
 8018c90:	781b      	ldrb	r3, [r3, #0]
 8018c92:	b25b      	sxtb	r3, r3
 8018c94:	0018      	movs	r0, r3
 8018c96:	f7ff ff57 	bl	8018b48 <__NVIC_EnableIRQ>
}
 8018c9a:	46c0      	nop			; (mov r8, r8)
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	b002      	add	sp, #8
 8018ca0:	bd80      	pop	{r7, pc}
	...

08018ca4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b082      	sub	sp, #8
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d101      	bne.n	8018cb6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8018cb2:	2301      	movs	r3, #1
 8018cb4:	e056      	b.n	8018d64 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	7f5b      	ldrb	r3, [r3, #29]
 8018cba:	b2db      	uxtb	r3, r3
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d106      	bne.n	8018cce <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	0018      	movs	r0, r3
 8018cca:	f7ff fdc5 	bl	8018858 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	2202      	movs	r2, #2
 8018cd2:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	791b      	ldrb	r3, [r3, #4]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d10c      	bne.n	8018cf6 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	4a22      	ldr	r2, [pc, #136]	; (8018d6c <HAL_CRC_Init+0xc8>)
 8018ce2:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	689a      	ldr	r2, [r3, #8]
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	2118      	movs	r1, #24
 8018cf0:	438a      	bics	r2, r1
 8018cf2:	609a      	str	r2, [r3, #8]
 8018cf4:	e00b      	b.n	8018d0e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	6899      	ldr	r1, [r3, #8]
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	68da      	ldr	r2, [r3, #12]
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	0018      	movs	r0, r3
 8018d02:	f000 f835 	bl	8018d70 <HAL_CRCEx_Polynomial_Set>
 8018d06:	1e03      	subs	r3, r0, #0
 8018d08:	d001      	beq.n	8018d0e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8018d0a:	2301      	movs	r3, #1
 8018d0c:	e02a      	b.n	8018d64 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	795b      	ldrb	r3, [r3, #5]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d105      	bne.n	8018d22 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	2201      	movs	r2, #1
 8018d1c:	4252      	negs	r2, r2
 8018d1e:	611a      	str	r2, [r3, #16]
 8018d20:	e004      	b.n	8018d2c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	687a      	ldr	r2, [r7, #4]
 8018d28:	6912      	ldr	r2, [r2, #16]
 8018d2a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	689b      	ldr	r3, [r3, #8]
 8018d32:	2260      	movs	r2, #96	; 0x60
 8018d34:	4393      	bics	r3, r2
 8018d36:	0019      	movs	r1, r3
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	695a      	ldr	r2, [r3, #20]
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	430a      	orrs	r2, r1
 8018d42:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	689b      	ldr	r3, [r3, #8]
 8018d4a:	2280      	movs	r2, #128	; 0x80
 8018d4c:	4393      	bics	r3, r2
 8018d4e:	0019      	movs	r1, r3
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	699a      	ldr	r2, [r3, #24]
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	430a      	orrs	r2, r1
 8018d5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	2201      	movs	r2, #1
 8018d60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8018d62:	2300      	movs	r3, #0
}
 8018d64:	0018      	movs	r0, r3
 8018d66:	46bd      	mov	sp, r7
 8018d68:	b002      	add	sp, #8
 8018d6a:	bd80      	pop	{r7, pc}
 8018d6c:	04c11db7 	.word	0x04c11db7

08018d70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b086      	sub	sp, #24
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	60f8      	str	r0, [r7, #12]
 8018d78:	60b9      	str	r1, [r7, #8]
 8018d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018d7c:	2317      	movs	r3, #23
 8018d7e:	18fb      	adds	r3, r7, r3
 8018d80:	2200      	movs	r2, #0
 8018d82:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8018d84:	231f      	movs	r3, #31
 8018d86:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8018d88:	46c0      	nop			; (mov r8, r8)
 8018d8a:	693b      	ldr	r3, [r7, #16]
 8018d8c:	1e5a      	subs	r2, r3, #1
 8018d8e:	613a      	str	r2, [r7, #16]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d008      	beq.n	8018da6 <HAL_CRCEx_Polynomial_Set+0x36>
 8018d94:	693b      	ldr	r3, [r7, #16]
 8018d96:	221f      	movs	r2, #31
 8018d98:	4013      	ands	r3, r2
 8018d9a:	68ba      	ldr	r2, [r7, #8]
 8018d9c:	40da      	lsrs	r2, r3
 8018d9e:	0013      	movs	r3, r2
 8018da0:	2201      	movs	r2, #1
 8018da2:	4013      	ands	r3, r2
 8018da4:	d0f1      	beq.n	8018d8a <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	2b18      	cmp	r3, #24
 8018daa:	d00f      	beq.n	8018dcc <HAL_CRCEx_Polynomial_Set+0x5c>
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	2b18      	cmp	r3, #24
 8018db0:	d824      	bhi.n	8018dfc <HAL_CRCEx_Polynomial_Set+0x8c>
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	2b10      	cmp	r3, #16
 8018db6:	d011      	beq.n	8018ddc <HAL_CRCEx_Polynomial_Set+0x6c>
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2b10      	cmp	r3, #16
 8018dbc:	d81e      	bhi.n	8018dfc <HAL_CRCEx_Polynomial_Set+0x8c>
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d020      	beq.n	8018e06 <HAL_CRCEx_Polynomial_Set+0x96>
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	2b08      	cmp	r3, #8
 8018dc8:	d010      	beq.n	8018dec <HAL_CRCEx_Polynomial_Set+0x7c>
 8018dca:	e017      	b.n	8018dfc <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8018dcc:	693b      	ldr	r3, [r7, #16]
 8018dce:	2b06      	cmp	r3, #6
 8018dd0:	d91b      	bls.n	8018e0a <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8018dd2:	2317      	movs	r3, #23
 8018dd4:	18fb      	adds	r3, r7, r3
 8018dd6:	2201      	movs	r2, #1
 8018dd8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018dda:	e016      	b.n	8018e0a <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8018ddc:	693b      	ldr	r3, [r7, #16]
 8018dde:	2b07      	cmp	r3, #7
 8018de0:	d915      	bls.n	8018e0e <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8018de2:	2317      	movs	r3, #23
 8018de4:	18fb      	adds	r3, r7, r3
 8018de6:	2201      	movs	r2, #1
 8018de8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018dea:	e010      	b.n	8018e0e <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8018dec:	693b      	ldr	r3, [r7, #16]
 8018dee:	2b0f      	cmp	r3, #15
 8018df0:	d90f      	bls.n	8018e12 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8018df2:	2317      	movs	r3, #23
 8018df4:	18fb      	adds	r3, r7, r3
 8018df6:	2201      	movs	r2, #1
 8018df8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018dfa:	e00a      	b.n	8018e12 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8018dfc:	2317      	movs	r3, #23
 8018dfe:	18fb      	adds	r3, r7, r3
 8018e00:	2201      	movs	r2, #1
 8018e02:	701a      	strb	r2, [r3, #0]
      break;
 8018e04:	e006      	b.n	8018e14 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8018e06:	46c0      	nop			; (mov r8, r8)
 8018e08:	e004      	b.n	8018e14 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8018e0a:	46c0      	nop			; (mov r8, r8)
 8018e0c:	e002      	b.n	8018e14 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8018e0e:	46c0      	nop			; (mov r8, r8)
 8018e10:	e000      	b.n	8018e14 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8018e12:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8018e14:	2317      	movs	r3, #23
 8018e16:	18fb      	adds	r3, r7, r3
 8018e18:	781b      	ldrb	r3, [r3, #0]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d10e      	bne.n	8018e3c <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	68ba      	ldr	r2, [r7, #8]
 8018e24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	689b      	ldr	r3, [r3, #8]
 8018e2c:	2218      	movs	r2, #24
 8018e2e:	4393      	bics	r3, r2
 8018e30:	0019      	movs	r1, r3
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	687a      	ldr	r2, [r7, #4]
 8018e38:	430a      	orrs	r2, r1
 8018e3a:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8018e3c:	2317      	movs	r3, #23
 8018e3e:	18fb      	adds	r3, r7, r3
 8018e40:	781b      	ldrb	r3, [r3, #0]
}
 8018e42:	0018      	movs	r0, r3
 8018e44:	46bd      	mov	sp, r7
 8018e46:	b006      	add	sp, #24
 8018e48:	bd80      	pop	{r7, pc}
	...

08018e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b086      	sub	sp, #24
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
 8018e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8018e56:	2300      	movs	r3, #0
 8018e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8018e5e:	2300      	movs	r3, #0
 8018e60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8018e62:	e155      	b.n	8019110 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8018e64:	683b      	ldr	r3, [r7, #0]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	2101      	movs	r1, #1
 8018e6a:	697a      	ldr	r2, [r7, #20]
 8018e6c:	4091      	lsls	r1, r2
 8018e6e:	000a      	movs	r2, r1
 8018e70:	4013      	ands	r3, r2
 8018e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d100      	bne.n	8018e7c <HAL_GPIO_Init+0x30>
 8018e7a:	e146      	b.n	801910a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8018e7c:	683b      	ldr	r3, [r7, #0]
 8018e7e:	685b      	ldr	r3, [r3, #4]
 8018e80:	2203      	movs	r2, #3
 8018e82:	4013      	ands	r3, r2
 8018e84:	2b01      	cmp	r3, #1
 8018e86:	d005      	beq.n	8018e94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8018e88:	683b      	ldr	r3, [r7, #0]
 8018e8a:	685b      	ldr	r3, [r3, #4]
 8018e8c:	2203      	movs	r2, #3
 8018e8e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8018e90:	2b02      	cmp	r3, #2
 8018e92:	d130      	bne.n	8018ef6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	689b      	ldr	r3, [r3, #8]
 8018e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	005b      	lsls	r3, r3, #1
 8018e9e:	2203      	movs	r2, #3
 8018ea0:	409a      	lsls	r2, r3
 8018ea2:	0013      	movs	r3, r2
 8018ea4:	43da      	mvns	r2, r3
 8018ea6:	693b      	ldr	r3, [r7, #16]
 8018ea8:	4013      	ands	r3, r2
 8018eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8018eac:	683b      	ldr	r3, [r7, #0]
 8018eae:	68da      	ldr	r2, [r3, #12]
 8018eb0:	697b      	ldr	r3, [r7, #20]
 8018eb2:	005b      	lsls	r3, r3, #1
 8018eb4:	409a      	lsls	r2, r3
 8018eb6:	0013      	movs	r3, r2
 8018eb8:	693a      	ldr	r2, [r7, #16]
 8018eba:	4313      	orrs	r3, r2
 8018ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	693a      	ldr	r2, [r7, #16]
 8018ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	685b      	ldr	r3, [r3, #4]
 8018ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8018eca:	2201      	movs	r2, #1
 8018ecc:	697b      	ldr	r3, [r7, #20]
 8018ece:	409a      	lsls	r2, r3
 8018ed0:	0013      	movs	r3, r2
 8018ed2:	43da      	mvns	r2, r3
 8018ed4:	693b      	ldr	r3, [r7, #16]
 8018ed6:	4013      	ands	r3, r2
 8018ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8018eda:	683b      	ldr	r3, [r7, #0]
 8018edc:	685b      	ldr	r3, [r3, #4]
 8018ede:	091b      	lsrs	r3, r3, #4
 8018ee0:	2201      	movs	r2, #1
 8018ee2:	401a      	ands	r2, r3
 8018ee4:	697b      	ldr	r3, [r7, #20]
 8018ee6:	409a      	lsls	r2, r3
 8018ee8:	0013      	movs	r3, r2
 8018eea:	693a      	ldr	r2, [r7, #16]
 8018eec:	4313      	orrs	r3, r2
 8018eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	693a      	ldr	r2, [r7, #16]
 8018ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	685b      	ldr	r3, [r3, #4]
 8018efa:	2203      	movs	r2, #3
 8018efc:	4013      	ands	r3, r2
 8018efe:	2b03      	cmp	r3, #3
 8018f00:	d017      	beq.n	8018f32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	68db      	ldr	r3, [r3, #12]
 8018f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8018f08:	697b      	ldr	r3, [r7, #20]
 8018f0a:	005b      	lsls	r3, r3, #1
 8018f0c:	2203      	movs	r2, #3
 8018f0e:	409a      	lsls	r2, r3
 8018f10:	0013      	movs	r3, r2
 8018f12:	43da      	mvns	r2, r3
 8018f14:	693b      	ldr	r3, [r7, #16]
 8018f16:	4013      	ands	r3, r2
 8018f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8018f1a:	683b      	ldr	r3, [r7, #0]
 8018f1c:	689a      	ldr	r2, [r3, #8]
 8018f1e:	697b      	ldr	r3, [r7, #20]
 8018f20:	005b      	lsls	r3, r3, #1
 8018f22:	409a      	lsls	r2, r3
 8018f24:	0013      	movs	r3, r2
 8018f26:	693a      	ldr	r2, [r7, #16]
 8018f28:	4313      	orrs	r3, r2
 8018f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	693a      	ldr	r2, [r7, #16]
 8018f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	685b      	ldr	r3, [r3, #4]
 8018f36:	2203      	movs	r2, #3
 8018f38:	4013      	ands	r3, r2
 8018f3a:	2b02      	cmp	r3, #2
 8018f3c:	d123      	bne.n	8018f86 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8018f3e:	697b      	ldr	r3, [r7, #20]
 8018f40:	08da      	lsrs	r2, r3, #3
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	3208      	adds	r2, #8
 8018f46:	0092      	lsls	r2, r2, #2
 8018f48:	58d3      	ldr	r3, [r2, r3]
 8018f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8018f4c:	697b      	ldr	r3, [r7, #20]
 8018f4e:	2207      	movs	r2, #7
 8018f50:	4013      	ands	r3, r2
 8018f52:	009b      	lsls	r3, r3, #2
 8018f54:	220f      	movs	r2, #15
 8018f56:	409a      	lsls	r2, r3
 8018f58:	0013      	movs	r3, r2
 8018f5a:	43da      	mvns	r2, r3
 8018f5c:	693b      	ldr	r3, [r7, #16]
 8018f5e:	4013      	ands	r3, r2
 8018f60:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	691a      	ldr	r2, [r3, #16]
 8018f66:	697b      	ldr	r3, [r7, #20]
 8018f68:	2107      	movs	r1, #7
 8018f6a:	400b      	ands	r3, r1
 8018f6c:	009b      	lsls	r3, r3, #2
 8018f6e:	409a      	lsls	r2, r3
 8018f70:	0013      	movs	r3, r2
 8018f72:	693a      	ldr	r2, [r7, #16]
 8018f74:	4313      	orrs	r3, r2
 8018f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8018f78:	697b      	ldr	r3, [r7, #20]
 8018f7a:	08da      	lsrs	r2, r3, #3
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	3208      	adds	r2, #8
 8018f80:	0092      	lsls	r2, r2, #2
 8018f82:	6939      	ldr	r1, [r7, #16]
 8018f84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8018f8c:	697b      	ldr	r3, [r7, #20]
 8018f8e:	005b      	lsls	r3, r3, #1
 8018f90:	2203      	movs	r2, #3
 8018f92:	409a      	lsls	r2, r3
 8018f94:	0013      	movs	r3, r2
 8018f96:	43da      	mvns	r2, r3
 8018f98:	693b      	ldr	r3, [r7, #16]
 8018f9a:	4013      	ands	r3, r2
 8018f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8018f9e:	683b      	ldr	r3, [r7, #0]
 8018fa0:	685b      	ldr	r3, [r3, #4]
 8018fa2:	2203      	movs	r2, #3
 8018fa4:	401a      	ands	r2, r3
 8018fa6:	697b      	ldr	r3, [r7, #20]
 8018fa8:	005b      	lsls	r3, r3, #1
 8018faa:	409a      	lsls	r2, r3
 8018fac:	0013      	movs	r3, r2
 8018fae:	693a      	ldr	r2, [r7, #16]
 8018fb0:	4313      	orrs	r3, r2
 8018fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	693a      	ldr	r2, [r7, #16]
 8018fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8018fba:	683b      	ldr	r3, [r7, #0]
 8018fbc:	685a      	ldr	r2, [r3, #4]
 8018fbe:	23c0      	movs	r3, #192	; 0xc0
 8018fc0:	029b      	lsls	r3, r3, #10
 8018fc2:	4013      	ands	r3, r2
 8018fc4:	d100      	bne.n	8018fc8 <HAL_GPIO_Init+0x17c>
 8018fc6:	e0a0      	b.n	801910a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018fc8:	4b57      	ldr	r3, [pc, #348]	; (8019128 <HAL_GPIO_Init+0x2dc>)
 8018fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018fcc:	4b56      	ldr	r3, [pc, #344]	; (8019128 <HAL_GPIO_Init+0x2dc>)
 8018fce:	2101      	movs	r1, #1
 8018fd0:	430a      	orrs	r2, r1
 8018fd2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8018fd4:	4a55      	ldr	r2, [pc, #340]	; (801912c <HAL_GPIO_Init+0x2e0>)
 8018fd6:	697b      	ldr	r3, [r7, #20]
 8018fd8:	089b      	lsrs	r3, r3, #2
 8018fda:	3302      	adds	r3, #2
 8018fdc:	009b      	lsls	r3, r3, #2
 8018fde:	589b      	ldr	r3, [r3, r2]
 8018fe0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8018fe2:	697b      	ldr	r3, [r7, #20]
 8018fe4:	2203      	movs	r2, #3
 8018fe6:	4013      	ands	r3, r2
 8018fe8:	009b      	lsls	r3, r3, #2
 8018fea:	220f      	movs	r2, #15
 8018fec:	409a      	lsls	r2, r3
 8018fee:	0013      	movs	r3, r2
 8018ff0:	43da      	mvns	r2, r3
 8018ff2:	693b      	ldr	r3, [r7, #16]
 8018ff4:	4013      	ands	r3, r2
 8018ff6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8018ff8:	687a      	ldr	r2, [r7, #4]
 8018ffa:	23a0      	movs	r3, #160	; 0xa0
 8018ffc:	05db      	lsls	r3, r3, #23
 8018ffe:	429a      	cmp	r2, r3
 8019000:	d01f      	beq.n	8019042 <HAL_GPIO_Init+0x1f6>
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	4a4a      	ldr	r2, [pc, #296]	; (8019130 <HAL_GPIO_Init+0x2e4>)
 8019006:	4293      	cmp	r3, r2
 8019008:	d019      	beq.n	801903e <HAL_GPIO_Init+0x1f2>
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	4a49      	ldr	r2, [pc, #292]	; (8019134 <HAL_GPIO_Init+0x2e8>)
 801900e:	4293      	cmp	r3, r2
 8019010:	d013      	beq.n	801903a <HAL_GPIO_Init+0x1ee>
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	4a48      	ldr	r2, [pc, #288]	; (8019138 <HAL_GPIO_Init+0x2ec>)
 8019016:	4293      	cmp	r3, r2
 8019018:	d00d      	beq.n	8019036 <HAL_GPIO_Init+0x1ea>
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	4a47      	ldr	r2, [pc, #284]	; (801913c <HAL_GPIO_Init+0x2f0>)
 801901e:	4293      	cmp	r3, r2
 8019020:	d007      	beq.n	8019032 <HAL_GPIO_Init+0x1e6>
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	4a46      	ldr	r2, [pc, #280]	; (8019140 <HAL_GPIO_Init+0x2f4>)
 8019026:	4293      	cmp	r3, r2
 8019028:	d101      	bne.n	801902e <HAL_GPIO_Init+0x1e2>
 801902a:	2305      	movs	r3, #5
 801902c:	e00a      	b.n	8019044 <HAL_GPIO_Init+0x1f8>
 801902e:	2306      	movs	r3, #6
 8019030:	e008      	b.n	8019044 <HAL_GPIO_Init+0x1f8>
 8019032:	2304      	movs	r3, #4
 8019034:	e006      	b.n	8019044 <HAL_GPIO_Init+0x1f8>
 8019036:	2303      	movs	r3, #3
 8019038:	e004      	b.n	8019044 <HAL_GPIO_Init+0x1f8>
 801903a:	2302      	movs	r3, #2
 801903c:	e002      	b.n	8019044 <HAL_GPIO_Init+0x1f8>
 801903e:	2301      	movs	r3, #1
 8019040:	e000      	b.n	8019044 <HAL_GPIO_Init+0x1f8>
 8019042:	2300      	movs	r3, #0
 8019044:	697a      	ldr	r2, [r7, #20]
 8019046:	2103      	movs	r1, #3
 8019048:	400a      	ands	r2, r1
 801904a:	0092      	lsls	r2, r2, #2
 801904c:	4093      	lsls	r3, r2
 801904e:	693a      	ldr	r2, [r7, #16]
 8019050:	4313      	orrs	r3, r2
 8019052:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019054:	4935      	ldr	r1, [pc, #212]	; (801912c <HAL_GPIO_Init+0x2e0>)
 8019056:	697b      	ldr	r3, [r7, #20]
 8019058:	089b      	lsrs	r3, r3, #2
 801905a:	3302      	adds	r3, #2
 801905c:	009b      	lsls	r3, r3, #2
 801905e:	693a      	ldr	r2, [r7, #16]
 8019060:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019062:	4b38      	ldr	r3, [pc, #224]	; (8019144 <HAL_GPIO_Init+0x2f8>)
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	43da      	mvns	r2, r3
 801906c:	693b      	ldr	r3, [r7, #16]
 801906e:	4013      	ands	r3, r2
 8019070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019072:	683b      	ldr	r3, [r7, #0]
 8019074:	685a      	ldr	r2, [r3, #4]
 8019076:	2380      	movs	r3, #128	; 0x80
 8019078:	025b      	lsls	r3, r3, #9
 801907a:	4013      	ands	r3, r2
 801907c:	d003      	beq.n	8019086 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 801907e:	693a      	ldr	r2, [r7, #16]
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	4313      	orrs	r3, r2
 8019084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8019086:	4b2f      	ldr	r3, [pc, #188]	; (8019144 <HAL_GPIO_Init+0x2f8>)
 8019088:	693a      	ldr	r2, [r7, #16]
 801908a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 801908c:	4b2d      	ldr	r3, [pc, #180]	; (8019144 <HAL_GPIO_Init+0x2f8>)
 801908e:	685b      	ldr	r3, [r3, #4]
 8019090:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	43da      	mvns	r2, r3
 8019096:	693b      	ldr	r3, [r7, #16]
 8019098:	4013      	ands	r3, r2
 801909a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801909c:	683b      	ldr	r3, [r7, #0]
 801909e:	685a      	ldr	r2, [r3, #4]
 80190a0:	2380      	movs	r3, #128	; 0x80
 80190a2:	029b      	lsls	r3, r3, #10
 80190a4:	4013      	ands	r3, r2
 80190a6:	d003      	beq.n	80190b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80190a8:	693a      	ldr	r2, [r7, #16]
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	4313      	orrs	r3, r2
 80190ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80190b0:	4b24      	ldr	r3, [pc, #144]	; (8019144 <HAL_GPIO_Init+0x2f8>)
 80190b2:	693a      	ldr	r2, [r7, #16]
 80190b4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80190b6:	4b23      	ldr	r3, [pc, #140]	; (8019144 <HAL_GPIO_Init+0x2f8>)
 80190b8:	689b      	ldr	r3, [r3, #8]
 80190ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	43da      	mvns	r2, r3
 80190c0:	693b      	ldr	r3, [r7, #16]
 80190c2:	4013      	ands	r3, r2
 80190c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80190c6:	683b      	ldr	r3, [r7, #0]
 80190c8:	685a      	ldr	r2, [r3, #4]
 80190ca:	2380      	movs	r3, #128	; 0x80
 80190cc:	035b      	lsls	r3, r3, #13
 80190ce:	4013      	ands	r3, r2
 80190d0:	d003      	beq.n	80190da <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80190d2:	693a      	ldr	r2, [r7, #16]
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	4313      	orrs	r3, r2
 80190d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80190da:	4b1a      	ldr	r3, [pc, #104]	; (8019144 <HAL_GPIO_Init+0x2f8>)
 80190dc:	693a      	ldr	r2, [r7, #16]
 80190de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80190e0:	4b18      	ldr	r3, [pc, #96]	; (8019144 <HAL_GPIO_Init+0x2f8>)
 80190e2:	68db      	ldr	r3, [r3, #12]
 80190e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	43da      	mvns	r2, r3
 80190ea:	693b      	ldr	r3, [r7, #16]
 80190ec:	4013      	ands	r3, r2
 80190ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80190f0:	683b      	ldr	r3, [r7, #0]
 80190f2:	685a      	ldr	r2, [r3, #4]
 80190f4:	2380      	movs	r3, #128	; 0x80
 80190f6:	039b      	lsls	r3, r3, #14
 80190f8:	4013      	ands	r3, r2
 80190fa:	d003      	beq.n	8019104 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80190fc:	693a      	ldr	r2, [r7, #16]
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	4313      	orrs	r3, r2
 8019102:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8019104:	4b0f      	ldr	r3, [pc, #60]	; (8019144 <HAL_GPIO_Init+0x2f8>)
 8019106:	693a      	ldr	r2, [r7, #16]
 8019108:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 801910a:	697b      	ldr	r3, [r7, #20]
 801910c:	3301      	adds	r3, #1
 801910e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8019110:	683b      	ldr	r3, [r7, #0]
 8019112:	681a      	ldr	r2, [r3, #0]
 8019114:	697b      	ldr	r3, [r7, #20]
 8019116:	40da      	lsrs	r2, r3
 8019118:	1e13      	subs	r3, r2, #0
 801911a:	d000      	beq.n	801911e <HAL_GPIO_Init+0x2d2>
 801911c:	e6a2      	b.n	8018e64 <HAL_GPIO_Init+0x18>
  }
}
 801911e:	46c0      	nop			; (mov r8, r8)
 8019120:	46c0      	nop			; (mov r8, r8)
 8019122:	46bd      	mov	sp, r7
 8019124:	b006      	add	sp, #24
 8019126:	bd80      	pop	{r7, pc}
 8019128:	40021000 	.word	0x40021000
 801912c:	40010000 	.word	0x40010000
 8019130:	50000400 	.word	0x50000400
 8019134:	50000800 	.word	0x50000800
 8019138:	50000c00 	.word	0x50000c00
 801913c:	50001000 	.word	0x50001000
 8019140:	50001c00 	.word	0x50001c00
 8019144:	40010400 	.word	0x40010400

08019148 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b082      	sub	sp, #8
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]
 8019150:	0008      	movs	r0, r1
 8019152:	0011      	movs	r1, r2
 8019154:	1cbb      	adds	r3, r7, #2
 8019156:	1c02      	adds	r2, r0, #0
 8019158:	801a      	strh	r2, [r3, #0]
 801915a:	1c7b      	adds	r3, r7, #1
 801915c:	1c0a      	adds	r2, r1, #0
 801915e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8019160:	1c7b      	adds	r3, r7, #1
 8019162:	781b      	ldrb	r3, [r3, #0]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d004      	beq.n	8019172 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019168:	1cbb      	adds	r3, r7, #2
 801916a:	881a      	ldrh	r2, [r3, #0]
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8019170:	e003      	b.n	801917a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8019172:	1cbb      	adds	r3, r7, #2
 8019174:	881a      	ldrh	r2, [r3, #0]
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	629a      	str	r2, [r3, #40]	; 0x28
}
 801917a:	46c0      	nop			; (mov r8, r8)
 801917c:	46bd      	mov	sp, r7
 801917e:	b002      	add	sp, #8
 8019180:	bd80      	pop	{r7, pc}
	...

08019184 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b082      	sub	sp, #8
 8019188:	af00      	add	r7, sp, #0
 801918a:	0002      	movs	r2, r0
 801918c:	1dbb      	adds	r3, r7, #6
 801918e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8019190:	4b09      	ldr	r3, [pc, #36]	; (80191b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8019192:	695b      	ldr	r3, [r3, #20]
 8019194:	1dba      	adds	r2, r7, #6
 8019196:	8812      	ldrh	r2, [r2, #0]
 8019198:	4013      	ands	r3, r2
 801919a:	d008      	beq.n	80191ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801919c:	4b06      	ldr	r3, [pc, #24]	; (80191b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801919e:	1dba      	adds	r2, r7, #6
 80191a0:	8812      	ldrh	r2, [r2, #0]
 80191a2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80191a4:	1dbb      	adds	r3, r7, #6
 80191a6:	881b      	ldrh	r3, [r3, #0]
 80191a8:	0018      	movs	r0, r3
 80191aa:	f000 f807 	bl	80191bc <HAL_GPIO_EXTI_Callback>
  }
}
 80191ae:	46c0      	nop			; (mov r8, r8)
 80191b0:	46bd      	mov	sp, r7
 80191b2:	b002      	add	sp, #8
 80191b4:	bd80      	pop	{r7, pc}
 80191b6:	46c0      	nop			; (mov r8, r8)
 80191b8:	40010400 	.word	0x40010400

080191bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b082      	sub	sp, #8
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	0002      	movs	r2, r0
 80191c4:	1dbb      	adds	r3, r7, #6
 80191c6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80191c8:	46c0      	nop			; (mov r8, r8)
 80191ca:	46bd      	mov	sp, r7
 80191cc:	b002      	add	sp, #8
 80191ce:	bd80      	pop	{r7, pc}

080191d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80191d0:	b5b0      	push	{r4, r5, r7, lr}
 80191d2:	b08a      	sub	sp, #40	; 0x28
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d102      	bne.n	80191e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80191de:	2301      	movs	r3, #1
 80191e0:	f000 fbbf 	bl	8019962 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80191e4:	4bc9      	ldr	r3, [pc, #804]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80191e6:	68db      	ldr	r3, [r3, #12]
 80191e8:	220c      	movs	r2, #12
 80191ea:	4013      	ands	r3, r2
 80191ec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80191ee:	4bc7      	ldr	r3, [pc, #796]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80191f0:	68da      	ldr	r2, [r3, #12]
 80191f2:	2380      	movs	r3, #128	; 0x80
 80191f4:	025b      	lsls	r3, r3, #9
 80191f6:	4013      	ands	r3, r2
 80191f8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	2201      	movs	r2, #1
 8019200:	4013      	ands	r3, r2
 8019202:	d100      	bne.n	8019206 <HAL_RCC_OscConfig+0x36>
 8019204:	e07e      	b.n	8019304 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8019206:	69fb      	ldr	r3, [r7, #28]
 8019208:	2b08      	cmp	r3, #8
 801920a:	d007      	beq.n	801921c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801920c:	69fb      	ldr	r3, [r7, #28]
 801920e:	2b0c      	cmp	r3, #12
 8019210:	d112      	bne.n	8019238 <HAL_RCC_OscConfig+0x68>
 8019212:	69ba      	ldr	r2, [r7, #24]
 8019214:	2380      	movs	r3, #128	; 0x80
 8019216:	025b      	lsls	r3, r3, #9
 8019218:	429a      	cmp	r2, r3
 801921a:	d10d      	bne.n	8019238 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801921c:	4bbb      	ldr	r3, [pc, #748]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801921e:	681a      	ldr	r2, [r3, #0]
 8019220:	2380      	movs	r3, #128	; 0x80
 8019222:	029b      	lsls	r3, r3, #10
 8019224:	4013      	ands	r3, r2
 8019226:	d100      	bne.n	801922a <HAL_RCC_OscConfig+0x5a>
 8019228:	e06b      	b.n	8019302 <HAL_RCC_OscConfig+0x132>
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	685b      	ldr	r3, [r3, #4]
 801922e:	2b00      	cmp	r3, #0
 8019230:	d167      	bne.n	8019302 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8019232:	2301      	movs	r3, #1
 8019234:	f000 fb95 	bl	8019962 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	685a      	ldr	r2, [r3, #4]
 801923c:	2380      	movs	r3, #128	; 0x80
 801923e:	025b      	lsls	r3, r3, #9
 8019240:	429a      	cmp	r2, r3
 8019242:	d107      	bne.n	8019254 <HAL_RCC_OscConfig+0x84>
 8019244:	4bb1      	ldr	r3, [pc, #708]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019246:	681a      	ldr	r2, [r3, #0]
 8019248:	4bb0      	ldr	r3, [pc, #704]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801924a:	2180      	movs	r1, #128	; 0x80
 801924c:	0249      	lsls	r1, r1, #9
 801924e:	430a      	orrs	r2, r1
 8019250:	601a      	str	r2, [r3, #0]
 8019252:	e027      	b.n	80192a4 <HAL_RCC_OscConfig+0xd4>
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	685a      	ldr	r2, [r3, #4]
 8019258:	23a0      	movs	r3, #160	; 0xa0
 801925a:	02db      	lsls	r3, r3, #11
 801925c:	429a      	cmp	r2, r3
 801925e:	d10e      	bne.n	801927e <HAL_RCC_OscConfig+0xae>
 8019260:	4baa      	ldr	r3, [pc, #680]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019262:	681a      	ldr	r2, [r3, #0]
 8019264:	4ba9      	ldr	r3, [pc, #676]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019266:	2180      	movs	r1, #128	; 0x80
 8019268:	02c9      	lsls	r1, r1, #11
 801926a:	430a      	orrs	r2, r1
 801926c:	601a      	str	r2, [r3, #0]
 801926e:	4ba7      	ldr	r3, [pc, #668]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019270:	681a      	ldr	r2, [r3, #0]
 8019272:	4ba6      	ldr	r3, [pc, #664]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019274:	2180      	movs	r1, #128	; 0x80
 8019276:	0249      	lsls	r1, r1, #9
 8019278:	430a      	orrs	r2, r1
 801927a:	601a      	str	r2, [r3, #0]
 801927c:	e012      	b.n	80192a4 <HAL_RCC_OscConfig+0xd4>
 801927e:	4ba3      	ldr	r3, [pc, #652]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019280:	681a      	ldr	r2, [r3, #0]
 8019282:	4ba2      	ldr	r3, [pc, #648]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019284:	49a2      	ldr	r1, [pc, #648]	; (8019510 <HAL_RCC_OscConfig+0x340>)
 8019286:	400a      	ands	r2, r1
 8019288:	601a      	str	r2, [r3, #0]
 801928a:	4ba0      	ldr	r3, [pc, #640]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801928c:	681a      	ldr	r2, [r3, #0]
 801928e:	2380      	movs	r3, #128	; 0x80
 8019290:	025b      	lsls	r3, r3, #9
 8019292:	4013      	ands	r3, r2
 8019294:	60fb      	str	r3, [r7, #12]
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	4b9c      	ldr	r3, [pc, #624]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801929a:	681a      	ldr	r2, [r3, #0]
 801929c:	4b9b      	ldr	r3, [pc, #620]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801929e:	499d      	ldr	r1, [pc, #628]	; (8019514 <HAL_RCC_OscConfig+0x344>)
 80192a0:	400a      	ands	r2, r1
 80192a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	685b      	ldr	r3, [r3, #4]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d015      	beq.n	80192d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80192ac:	f7ff fc42 	bl	8018b34 <HAL_GetTick>
 80192b0:	0003      	movs	r3, r0
 80192b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80192b4:	e009      	b.n	80192ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80192b6:	f7ff fc3d 	bl	8018b34 <HAL_GetTick>
 80192ba:	0002      	movs	r2, r0
 80192bc:	697b      	ldr	r3, [r7, #20]
 80192be:	1ad3      	subs	r3, r2, r3
 80192c0:	2b64      	cmp	r3, #100	; 0x64
 80192c2:	d902      	bls.n	80192ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80192c4:	2303      	movs	r3, #3
 80192c6:	f000 fb4c 	bl	8019962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80192ca:	4b90      	ldr	r3, [pc, #576]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80192cc:	681a      	ldr	r2, [r3, #0]
 80192ce:	2380      	movs	r3, #128	; 0x80
 80192d0:	029b      	lsls	r3, r3, #10
 80192d2:	4013      	ands	r3, r2
 80192d4:	d0ef      	beq.n	80192b6 <HAL_RCC_OscConfig+0xe6>
 80192d6:	e015      	b.n	8019304 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80192d8:	f7ff fc2c 	bl	8018b34 <HAL_GetTick>
 80192dc:	0003      	movs	r3, r0
 80192de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80192e0:	e008      	b.n	80192f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80192e2:	f7ff fc27 	bl	8018b34 <HAL_GetTick>
 80192e6:	0002      	movs	r2, r0
 80192e8:	697b      	ldr	r3, [r7, #20]
 80192ea:	1ad3      	subs	r3, r2, r3
 80192ec:	2b64      	cmp	r3, #100	; 0x64
 80192ee:	d901      	bls.n	80192f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80192f0:	2303      	movs	r3, #3
 80192f2:	e336      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80192f4:	4b85      	ldr	r3, [pc, #532]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80192f6:	681a      	ldr	r2, [r3, #0]
 80192f8:	2380      	movs	r3, #128	; 0x80
 80192fa:	029b      	lsls	r3, r3, #10
 80192fc:	4013      	ands	r3, r2
 80192fe:	d1f0      	bne.n	80192e2 <HAL_RCC_OscConfig+0x112>
 8019300:	e000      	b.n	8019304 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019302:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	2202      	movs	r2, #2
 801930a:	4013      	ands	r3, r2
 801930c:	d100      	bne.n	8019310 <HAL_RCC_OscConfig+0x140>
 801930e:	e099      	b.n	8019444 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	68db      	ldr	r3, [r3, #12]
 8019314:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8019316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019318:	2220      	movs	r2, #32
 801931a:	4013      	ands	r3, r2
 801931c:	d009      	beq.n	8019332 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801931e:	4b7b      	ldr	r3, [pc, #492]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019320:	681a      	ldr	r2, [r3, #0]
 8019322:	4b7a      	ldr	r3, [pc, #488]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019324:	2120      	movs	r1, #32
 8019326:	430a      	orrs	r2, r1
 8019328:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801932c:	2220      	movs	r2, #32
 801932e:	4393      	bics	r3, r2
 8019330:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8019332:	69fb      	ldr	r3, [r7, #28]
 8019334:	2b04      	cmp	r3, #4
 8019336:	d005      	beq.n	8019344 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8019338:	69fb      	ldr	r3, [r7, #28]
 801933a:	2b0c      	cmp	r3, #12
 801933c:	d13e      	bne.n	80193bc <HAL_RCC_OscConfig+0x1ec>
 801933e:	69bb      	ldr	r3, [r7, #24]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d13b      	bne.n	80193bc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8019344:	4b71      	ldr	r3, [pc, #452]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	2204      	movs	r2, #4
 801934a:	4013      	ands	r3, r2
 801934c:	d004      	beq.n	8019358 <HAL_RCC_OscConfig+0x188>
 801934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019350:	2b00      	cmp	r3, #0
 8019352:	d101      	bne.n	8019358 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8019354:	2301      	movs	r3, #1
 8019356:	e304      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019358:	4b6c      	ldr	r3, [pc, #432]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801935a:	685b      	ldr	r3, [r3, #4]
 801935c:	4a6e      	ldr	r2, [pc, #440]	; (8019518 <HAL_RCC_OscConfig+0x348>)
 801935e:	4013      	ands	r3, r2
 8019360:	0019      	movs	r1, r3
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	691b      	ldr	r3, [r3, #16]
 8019366:	021a      	lsls	r2, r3, #8
 8019368:	4b68      	ldr	r3, [pc, #416]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801936a:	430a      	orrs	r2, r1
 801936c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801936e:	4b67      	ldr	r3, [pc, #412]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	2209      	movs	r2, #9
 8019374:	4393      	bics	r3, r2
 8019376:	0019      	movs	r1, r3
 8019378:	4b64      	ldr	r3, [pc, #400]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801937a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801937c:	430a      	orrs	r2, r1
 801937e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8019380:	f000 fc42 	bl	8019c08 <HAL_RCC_GetSysClockFreq>
 8019384:	0001      	movs	r1, r0
 8019386:	4b61      	ldr	r3, [pc, #388]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019388:	68db      	ldr	r3, [r3, #12]
 801938a:	091b      	lsrs	r3, r3, #4
 801938c:	220f      	movs	r2, #15
 801938e:	4013      	ands	r3, r2
 8019390:	4a62      	ldr	r2, [pc, #392]	; (801951c <HAL_RCC_OscConfig+0x34c>)
 8019392:	5cd3      	ldrb	r3, [r2, r3]
 8019394:	000a      	movs	r2, r1
 8019396:	40da      	lsrs	r2, r3
 8019398:	4b61      	ldr	r3, [pc, #388]	; (8019520 <HAL_RCC_OscConfig+0x350>)
 801939a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801939c:	4b61      	ldr	r3, [pc, #388]	; (8019524 <HAL_RCC_OscConfig+0x354>)
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	2513      	movs	r5, #19
 80193a2:	197c      	adds	r4, r7, r5
 80193a4:	0018      	movs	r0, r3
 80193a6:	f7ff faed 	bl	8018984 <HAL_InitTick>
 80193aa:	0003      	movs	r3, r0
 80193ac:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80193ae:	197b      	adds	r3, r7, r5
 80193b0:	781b      	ldrb	r3, [r3, #0]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d046      	beq.n	8019444 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80193b6:	197b      	adds	r3, r7, r5
 80193b8:	781b      	ldrb	r3, [r3, #0]
 80193ba:	e2d2      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80193bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d027      	beq.n	8019412 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80193c2:	4b52      	ldr	r3, [pc, #328]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	2209      	movs	r2, #9
 80193c8:	4393      	bics	r3, r2
 80193ca:	0019      	movs	r1, r3
 80193cc:	4b4f      	ldr	r3, [pc, #316]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80193ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80193d0:	430a      	orrs	r2, r1
 80193d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80193d4:	f7ff fbae 	bl	8018b34 <HAL_GetTick>
 80193d8:	0003      	movs	r3, r0
 80193da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80193dc:	e008      	b.n	80193f0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80193de:	f7ff fba9 	bl	8018b34 <HAL_GetTick>
 80193e2:	0002      	movs	r2, r0
 80193e4:	697b      	ldr	r3, [r7, #20]
 80193e6:	1ad3      	subs	r3, r2, r3
 80193e8:	2b02      	cmp	r3, #2
 80193ea:	d901      	bls.n	80193f0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80193ec:	2303      	movs	r3, #3
 80193ee:	e2b8      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80193f0:	4b46      	ldr	r3, [pc, #280]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	2204      	movs	r2, #4
 80193f6:	4013      	ands	r3, r2
 80193f8:	d0f1      	beq.n	80193de <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80193fa:	4b44      	ldr	r3, [pc, #272]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80193fc:	685b      	ldr	r3, [r3, #4]
 80193fe:	4a46      	ldr	r2, [pc, #280]	; (8019518 <HAL_RCC_OscConfig+0x348>)
 8019400:	4013      	ands	r3, r2
 8019402:	0019      	movs	r1, r3
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	691b      	ldr	r3, [r3, #16]
 8019408:	021a      	lsls	r2, r3, #8
 801940a:	4b40      	ldr	r3, [pc, #256]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801940c:	430a      	orrs	r2, r1
 801940e:	605a      	str	r2, [r3, #4]
 8019410:	e018      	b.n	8019444 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019412:	4b3e      	ldr	r3, [pc, #248]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019414:	681a      	ldr	r2, [r3, #0]
 8019416:	4b3d      	ldr	r3, [pc, #244]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019418:	2101      	movs	r1, #1
 801941a:	438a      	bics	r2, r1
 801941c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801941e:	f7ff fb89 	bl	8018b34 <HAL_GetTick>
 8019422:	0003      	movs	r3, r0
 8019424:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8019426:	e008      	b.n	801943a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019428:	f7ff fb84 	bl	8018b34 <HAL_GetTick>
 801942c:	0002      	movs	r2, r0
 801942e:	697b      	ldr	r3, [r7, #20]
 8019430:	1ad3      	subs	r3, r2, r3
 8019432:	2b02      	cmp	r3, #2
 8019434:	d901      	bls.n	801943a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8019436:	2303      	movs	r3, #3
 8019438:	e293      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801943a:	4b34      	ldr	r3, [pc, #208]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	2204      	movs	r2, #4
 8019440:	4013      	ands	r3, r2
 8019442:	d1f1      	bne.n	8019428 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	2210      	movs	r2, #16
 801944a:	4013      	ands	r3, r2
 801944c:	d100      	bne.n	8019450 <HAL_RCC_OscConfig+0x280>
 801944e:	e0a2      	b.n	8019596 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8019450:	69fb      	ldr	r3, [r7, #28]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d140      	bne.n	80194d8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8019456:	4b2d      	ldr	r3, [pc, #180]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019458:	681a      	ldr	r2, [r3, #0]
 801945a:	2380      	movs	r3, #128	; 0x80
 801945c:	009b      	lsls	r3, r3, #2
 801945e:	4013      	ands	r3, r2
 8019460:	d005      	beq.n	801946e <HAL_RCC_OscConfig+0x29e>
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	69db      	ldr	r3, [r3, #28]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d101      	bne.n	801946e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801946a:	2301      	movs	r3, #1
 801946c:	e279      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801946e:	4b27      	ldr	r3, [pc, #156]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019470:	685b      	ldr	r3, [r3, #4]
 8019472:	4a2d      	ldr	r2, [pc, #180]	; (8019528 <HAL_RCC_OscConfig+0x358>)
 8019474:	4013      	ands	r3, r2
 8019476:	0019      	movs	r1, r3
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801947c:	4b23      	ldr	r3, [pc, #140]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 801947e:	430a      	orrs	r2, r1
 8019480:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8019482:	4b22      	ldr	r3, [pc, #136]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019484:	685b      	ldr	r3, [r3, #4]
 8019486:	021b      	lsls	r3, r3, #8
 8019488:	0a19      	lsrs	r1, r3, #8
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	6a1b      	ldr	r3, [r3, #32]
 801948e:	061a      	lsls	r2, r3, #24
 8019490:	4b1e      	ldr	r3, [pc, #120]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 8019492:	430a      	orrs	r2, r1
 8019494:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801949a:	0b5b      	lsrs	r3, r3, #13
 801949c:	3301      	adds	r3, #1
 801949e:	2280      	movs	r2, #128	; 0x80
 80194a0:	0212      	lsls	r2, r2, #8
 80194a2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80194a4:	4b19      	ldr	r3, [pc, #100]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	091b      	lsrs	r3, r3, #4
 80194aa:	210f      	movs	r1, #15
 80194ac:	400b      	ands	r3, r1
 80194ae:	491b      	ldr	r1, [pc, #108]	; (801951c <HAL_RCC_OscConfig+0x34c>)
 80194b0:	5ccb      	ldrb	r3, [r1, r3]
 80194b2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80194b4:	4b1a      	ldr	r3, [pc, #104]	; (8019520 <HAL_RCC_OscConfig+0x350>)
 80194b6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80194b8:	4b1a      	ldr	r3, [pc, #104]	; (8019524 <HAL_RCC_OscConfig+0x354>)
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	2513      	movs	r5, #19
 80194be:	197c      	adds	r4, r7, r5
 80194c0:	0018      	movs	r0, r3
 80194c2:	f7ff fa5f 	bl	8018984 <HAL_InitTick>
 80194c6:	0003      	movs	r3, r0
 80194c8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80194ca:	197b      	adds	r3, r7, r5
 80194cc:	781b      	ldrb	r3, [r3, #0]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d061      	beq.n	8019596 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80194d2:	197b      	adds	r3, r7, r5
 80194d4:	781b      	ldrb	r3, [r3, #0]
 80194d6:	e244      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	69db      	ldr	r3, [r3, #28]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d040      	beq.n	8019562 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80194e0:	4b0a      	ldr	r3, [pc, #40]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80194e2:	681a      	ldr	r2, [r3, #0]
 80194e4:	4b09      	ldr	r3, [pc, #36]	; (801950c <HAL_RCC_OscConfig+0x33c>)
 80194e6:	2180      	movs	r1, #128	; 0x80
 80194e8:	0049      	lsls	r1, r1, #1
 80194ea:	430a      	orrs	r2, r1
 80194ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80194ee:	f7ff fb21 	bl	8018b34 <HAL_GetTick>
 80194f2:	0003      	movs	r3, r0
 80194f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80194f6:	e019      	b.n	801952c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80194f8:	f7ff fb1c 	bl	8018b34 <HAL_GetTick>
 80194fc:	0002      	movs	r2, r0
 80194fe:	697b      	ldr	r3, [r7, #20]
 8019500:	1ad3      	subs	r3, r2, r3
 8019502:	2b02      	cmp	r3, #2
 8019504:	d912      	bls.n	801952c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8019506:	2303      	movs	r3, #3
 8019508:	e22b      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
 801950a:	46c0      	nop			; (mov r8, r8)
 801950c:	40021000 	.word	0x40021000
 8019510:	fffeffff 	.word	0xfffeffff
 8019514:	fffbffff 	.word	0xfffbffff
 8019518:	ffffe0ff 	.word	0xffffe0ff
 801951c:	0801d638 	.word	0x0801d638
 8019520:	20000000 	.word	0x20000000
 8019524:	20000004 	.word	0x20000004
 8019528:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801952c:	4bca      	ldr	r3, [pc, #808]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 801952e:	681a      	ldr	r2, [r3, #0]
 8019530:	2380      	movs	r3, #128	; 0x80
 8019532:	009b      	lsls	r3, r3, #2
 8019534:	4013      	ands	r3, r2
 8019536:	d0df      	beq.n	80194f8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8019538:	4bc7      	ldr	r3, [pc, #796]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 801953a:	685b      	ldr	r3, [r3, #4]
 801953c:	4ac7      	ldr	r2, [pc, #796]	; (801985c <HAL_RCC_OscConfig+0x68c>)
 801953e:	4013      	ands	r3, r2
 8019540:	0019      	movs	r1, r3
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019546:	4bc4      	ldr	r3, [pc, #784]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019548:	430a      	orrs	r2, r1
 801954a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801954c:	4bc2      	ldr	r3, [pc, #776]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 801954e:	685b      	ldr	r3, [r3, #4]
 8019550:	021b      	lsls	r3, r3, #8
 8019552:	0a19      	lsrs	r1, r3, #8
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	6a1b      	ldr	r3, [r3, #32]
 8019558:	061a      	lsls	r2, r3, #24
 801955a:	4bbf      	ldr	r3, [pc, #764]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 801955c:	430a      	orrs	r2, r1
 801955e:	605a      	str	r2, [r3, #4]
 8019560:	e019      	b.n	8019596 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8019562:	4bbd      	ldr	r3, [pc, #756]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019564:	681a      	ldr	r2, [r3, #0]
 8019566:	4bbc      	ldr	r3, [pc, #752]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019568:	49bd      	ldr	r1, [pc, #756]	; (8019860 <HAL_RCC_OscConfig+0x690>)
 801956a:	400a      	ands	r2, r1
 801956c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801956e:	f7ff fae1 	bl	8018b34 <HAL_GetTick>
 8019572:	0003      	movs	r3, r0
 8019574:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8019576:	e008      	b.n	801958a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8019578:	f7ff fadc 	bl	8018b34 <HAL_GetTick>
 801957c:	0002      	movs	r2, r0
 801957e:	697b      	ldr	r3, [r7, #20]
 8019580:	1ad3      	subs	r3, r2, r3
 8019582:	2b02      	cmp	r3, #2
 8019584:	d901      	bls.n	801958a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8019586:	2303      	movs	r3, #3
 8019588:	e1eb      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801958a:	4bb3      	ldr	r3, [pc, #716]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 801958c:	681a      	ldr	r2, [r3, #0]
 801958e:	2380      	movs	r3, #128	; 0x80
 8019590:	009b      	lsls	r3, r3, #2
 8019592:	4013      	ands	r3, r2
 8019594:	d1f0      	bne.n	8019578 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	2208      	movs	r2, #8
 801959c:	4013      	ands	r3, r2
 801959e:	d036      	beq.n	801960e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	695b      	ldr	r3, [r3, #20]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d019      	beq.n	80195dc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80195a8:	4bab      	ldr	r3, [pc, #684]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80195aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80195ac:	4baa      	ldr	r3, [pc, #680]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80195ae:	2101      	movs	r1, #1
 80195b0:	430a      	orrs	r2, r1
 80195b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80195b4:	f7ff fabe 	bl	8018b34 <HAL_GetTick>
 80195b8:	0003      	movs	r3, r0
 80195ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80195bc:	e008      	b.n	80195d0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80195be:	f7ff fab9 	bl	8018b34 <HAL_GetTick>
 80195c2:	0002      	movs	r2, r0
 80195c4:	697b      	ldr	r3, [r7, #20]
 80195c6:	1ad3      	subs	r3, r2, r3
 80195c8:	2b02      	cmp	r3, #2
 80195ca:	d901      	bls.n	80195d0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80195cc:	2303      	movs	r3, #3
 80195ce:	e1c8      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80195d0:	4ba1      	ldr	r3, [pc, #644]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80195d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195d4:	2202      	movs	r2, #2
 80195d6:	4013      	ands	r3, r2
 80195d8:	d0f1      	beq.n	80195be <HAL_RCC_OscConfig+0x3ee>
 80195da:	e018      	b.n	801960e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80195dc:	4b9e      	ldr	r3, [pc, #632]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80195de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80195e0:	4b9d      	ldr	r3, [pc, #628]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80195e2:	2101      	movs	r1, #1
 80195e4:	438a      	bics	r2, r1
 80195e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80195e8:	f7ff faa4 	bl	8018b34 <HAL_GetTick>
 80195ec:	0003      	movs	r3, r0
 80195ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80195f0:	e008      	b.n	8019604 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80195f2:	f7ff fa9f 	bl	8018b34 <HAL_GetTick>
 80195f6:	0002      	movs	r2, r0
 80195f8:	697b      	ldr	r3, [r7, #20]
 80195fa:	1ad3      	subs	r3, r2, r3
 80195fc:	2b02      	cmp	r3, #2
 80195fe:	d901      	bls.n	8019604 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8019600:	2303      	movs	r3, #3
 8019602:	e1ae      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8019604:	4b94      	ldr	r3, [pc, #592]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019608:	2202      	movs	r2, #2
 801960a:	4013      	ands	r3, r2
 801960c:	d1f1      	bne.n	80195f2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	2204      	movs	r2, #4
 8019614:	4013      	ands	r3, r2
 8019616:	d100      	bne.n	801961a <HAL_RCC_OscConfig+0x44a>
 8019618:	e0ae      	b.n	8019778 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801961a:	2023      	movs	r0, #35	; 0x23
 801961c:	183b      	adds	r3, r7, r0
 801961e:	2200      	movs	r2, #0
 8019620:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019622:	4b8d      	ldr	r3, [pc, #564]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019626:	2380      	movs	r3, #128	; 0x80
 8019628:	055b      	lsls	r3, r3, #21
 801962a:	4013      	ands	r3, r2
 801962c:	d109      	bne.n	8019642 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801962e:	4b8a      	ldr	r3, [pc, #552]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019632:	4b89      	ldr	r3, [pc, #548]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019634:	2180      	movs	r1, #128	; 0x80
 8019636:	0549      	lsls	r1, r1, #21
 8019638:	430a      	orrs	r2, r1
 801963a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 801963c:	183b      	adds	r3, r7, r0
 801963e:	2201      	movs	r2, #1
 8019640:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019642:	4b88      	ldr	r3, [pc, #544]	; (8019864 <HAL_RCC_OscConfig+0x694>)
 8019644:	681a      	ldr	r2, [r3, #0]
 8019646:	2380      	movs	r3, #128	; 0x80
 8019648:	005b      	lsls	r3, r3, #1
 801964a:	4013      	ands	r3, r2
 801964c:	d11a      	bne.n	8019684 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801964e:	4b85      	ldr	r3, [pc, #532]	; (8019864 <HAL_RCC_OscConfig+0x694>)
 8019650:	681a      	ldr	r2, [r3, #0]
 8019652:	4b84      	ldr	r3, [pc, #528]	; (8019864 <HAL_RCC_OscConfig+0x694>)
 8019654:	2180      	movs	r1, #128	; 0x80
 8019656:	0049      	lsls	r1, r1, #1
 8019658:	430a      	orrs	r2, r1
 801965a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801965c:	f7ff fa6a 	bl	8018b34 <HAL_GetTick>
 8019660:	0003      	movs	r3, r0
 8019662:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019664:	e008      	b.n	8019678 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019666:	f7ff fa65 	bl	8018b34 <HAL_GetTick>
 801966a:	0002      	movs	r2, r0
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	1ad3      	subs	r3, r2, r3
 8019670:	2b64      	cmp	r3, #100	; 0x64
 8019672:	d901      	bls.n	8019678 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8019674:	2303      	movs	r3, #3
 8019676:	e174      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019678:	4b7a      	ldr	r3, [pc, #488]	; (8019864 <HAL_RCC_OscConfig+0x694>)
 801967a:	681a      	ldr	r2, [r3, #0]
 801967c:	2380      	movs	r3, #128	; 0x80
 801967e:	005b      	lsls	r3, r3, #1
 8019680:	4013      	ands	r3, r2
 8019682:	d0f0      	beq.n	8019666 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	689a      	ldr	r2, [r3, #8]
 8019688:	2380      	movs	r3, #128	; 0x80
 801968a:	005b      	lsls	r3, r3, #1
 801968c:	429a      	cmp	r2, r3
 801968e:	d107      	bne.n	80196a0 <HAL_RCC_OscConfig+0x4d0>
 8019690:	4b71      	ldr	r3, [pc, #452]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019694:	4b70      	ldr	r3, [pc, #448]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019696:	2180      	movs	r1, #128	; 0x80
 8019698:	0049      	lsls	r1, r1, #1
 801969a:	430a      	orrs	r2, r1
 801969c:	651a      	str	r2, [r3, #80]	; 0x50
 801969e:	e031      	b.n	8019704 <HAL_RCC_OscConfig+0x534>
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	689b      	ldr	r3, [r3, #8]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d10c      	bne.n	80196c2 <HAL_RCC_OscConfig+0x4f2>
 80196a8:	4b6b      	ldr	r3, [pc, #428]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80196ac:	4b6a      	ldr	r3, [pc, #424]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196ae:	496c      	ldr	r1, [pc, #432]	; (8019860 <HAL_RCC_OscConfig+0x690>)
 80196b0:	400a      	ands	r2, r1
 80196b2:	651a      	str	r2, [r3, #80]	; 0x50
 80196b4:	4b68      	ldr	r3, [pc, #416]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80196b8:	4b67      	ldr	r3, [pc, #412]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196ba:	496b      	ldr	r1, [pc, #428]	; (8019868 <HAL_RCC_OscConfig+0x698>)
 80196bc:	400a      	ands	r2, r1
 80196be:	651a      	str	r2, [r3, #80]	; 0x50
 80196c0:	e020      	b.n	8019704 <HAL_RCC_OscConfig+0x534>
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	689a      	ldr	r2, [r3, #8]
 80196c6:	23a0      	movs	r3, #160	; 0xa0
 80196c8:	00db      	lsls	r3, r3, #3
 80196ca:	429a      	cmp	r2, r3
 80196cc:	d10e      	bne.n	80196ec <HAL_RCC_OscConfig+0x51c>
 80196ce:	4b62      	ldr	r3, [pc, #392]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80196d2:	4b61      	ldr	r3, [pc, #388]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196d4:	2180      	movs	r1, #128	; 0x80
 80196d6:	00c9      	lsls	r1, r1, #3
 80196d8:	430a      	orrs	r2, r1
 80196da:	651a      	str	r2, [r3, #80]	; 0x50
 80196dc:	4b5e      	ldr	r3, [pc, #376]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80196e0:	4b5d      	ldr	r3, [pc, #372]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196e2:	2180      	movs	r1, #128	; 0x80
 80196e4:	0049      	lsls	r1, r1, #1
 80196e6:	430a      	orrs	r2, r1
 80196e8:	651a      	str	r2, [r3, #80]	; 0x50
 80196ea:	e00b      	b.n	8019704 <HAL_RCC_OscConfig+0x534>
 80196ec:	4b5a      	ldr	r3, [pc, #360]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80196f0:	4b59      	ldr	r3, [pc, #356]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196f2:	495b      	ldr	r1, [pc, #364]	; (8019860 <HAL_RCC_OscConfig+0x690>)
 80196f4:	400a      	ands	r2, r1
 80196f6:	651a      	str	r2, [r3, #80]	; 0x50
 80196f8:	4b57      	ldr	r3, [pc, #348]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80196fc:	4b56      	ldr	r3, [pc, #344]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80196fe:	495a      	ldr	r1, [pc, #360]	; (8019868 <HAL_RCC_OscConfig+0x698>)
 8019700:	400a      	ands	r2, r1
 8019702:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	689b      	ldr	r3, [r3, #8]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d015      	beq.n	8019738 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801970c:	f7ff fa12 	bl	8018b34 <HAL_GetTick>
 8019710:	0003      	movs	r3, r0
 8019712:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8019714:	e009      	b.n	801972a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019716:	f7ff fa0d 	bl	8018b34 <HAL_GetTick>
 801971a:	0002      	movs	r2, r0
 801971c:	697b      	ldr	r3, [r7, #20]
 801971e:	1ad3      	subs	r3, r2, r3
 8019720:	4a52      	ldr	r2, [pc, #328]	; (801986c <HAL_RCC_OscConfig+0x69c>)
 8019722:	4293      	cmp	r3, r2
 8019724:	d901      	bls.n	801972a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8019726:	2303      	movs	r3, #3
 8019728:	e11b      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801972a:	4b4b      	ldr	r3, [pc, #300]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 801972c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801972e:	2380      	movs	r3, #128	; 0x80
 8019730:	009b      	lsls	r3, r3, #2
 8019732:	4013      	ands	r3, r2
 8019734:	d0ef      	beq.n	8019716 <HAL_RCC_OscConfig+0x546>
 8019736:	e014      	b.n	8019762 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019738:	f7ff f9fc 	bl	8018b34 <HAL_GetTick>
 801973c:	0003      	movs	r3, r0
 801973e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8019740:	e009      	b.n	8019756 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019742:	f7ff f9f7 	bl	8018b34 <HAL_GetTick>
 8019746:	0002      	movs	r2, r0
 8019748:	697b      	ldr	r3, [r7, #20]
 801974a:	1ad3      	subs	r3, r2, r3
 801974c:	4a47      	ldr	r2, [pc, #284]	; (801986c <HAL_RCC_OscConfig+0x69c>)
 801974e:	4293      	cmp	r3, r2
 8019750:	d901      	bls.n	8019756 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8019752:	2303      	movs	r3, #3
 8019754:	e105      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8019756:	4b40      	ldr	r3, [pc, #256]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801975a:	2380      	movs	r3, #128	; 0x80
 801975c:	009b      	lsls	r3, r3, #2
 801975e:	4013      	ands	r3, r2
 8019760:	d1ef      	bne.n	8019742 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8019762:	2323      	movs	r3, #35	; 0x23
 8019764:	18fb      	adds	r3, r7, r3
 8019766:	781b      	ldrb	r3, [r3, #0]
 8019768:	2b01      	cmp	r3, #1
 801976a:	d105      	bne.n	8019778 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801976c:	4b3a      	ldr	r3, [pc, #232]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 801976e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019770:	4b39      	ldr	r3, [pc, #228]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019772:	493f      	ldr	r1, [pc, #252]	; (8019870 <HAL_RCC_OscConfig+0x6a0>)
 8019774:	400a      	ands	r2, r1
 8019776:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	2220      	movs	r2, #32
 801977e:	4013      	ands	r3, r2
 8019780:	d049      	beq.n	8019816 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	699b      	ldr	r3, [r3, #24]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d026      	beq.n	80197d8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801978a:	4b33      	ldr	r3, [pc, #204]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 801978c:	689a      	ldr	r2, [r3, #8]
 801978e:	4b32      	ldr	r3, [pc, #200]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019790:	2101      	movs	r1, #1
 8019792:	430a      	orrs	r2, r1
 8019794:	609a      	str	r2, [r3, #8]
 8019796:	4b30      	ldr	r3, [pc, #192]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801979a:	4b2f      	ldr	r3, [pc, #188]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 801979c:	2101      	movs	r1, #1
 801979e:	430a      	orrs	r2, r1
 80197a0:	635a      	str	r2, [r3, #52]	; 0x34
 80197a2:	4b34      	ldr	r3, [pc, #208]	; (8019874 <HAL_RCC_OscConfig+0x6a4>)
 80197a4:	6a1a      	ldr	r2, [r3, #32]
 80197a6:	4b33      	ldr	r3, [pc, #204]	; (8019874 <HAL_RCC_OscConfig+0x6a4>)
 80197a8:	2180      	movs	r1, #128	; 0x80
 80197aa:	0189      	lsls	r1, r1, #6
 80197ac:	430a      	orrs	r2, r1
 80197ae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80197b0:	f7ff f9c0 	bl	8018b34 <HAL_GetTick>
 80197b4:	0003      	movs	r3, r0
 80197b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80197b8:	e008      	b.n	80197cc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80197ba:	f7ff f9bb 	bl	8018b34 <HAL_GetTick>
 80197be:	0002      	movs	r2, r0
 80197c0:	697b      	ldr	r3, [r7, #20]
 80197c2:	1ad3      	subs	r3, r2, r3
 80197c4:	2b02      	cmp	r3, #2
 80197c6:	d901      	bls.n	80197cc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80197c8:	2303      	movs	r3, #3
 80197ca:	e0ca      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80197cc:	4b22      	ldr	r3, [pc, #136]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80197ce:	689b      	ldr	r3, [r3, #8]
 80197d0:	2202      	movs	r2, #2
 80197d2:	4013      	ands	r3, r2
 80197d4:	d0f1      	beq.n	80197ba <HAL_RCC_OscConfig+0x5ea>
 80197d6:	e01e      	b.n	8019816 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80197d8:	4b1f      	ldr	r3, [pc, #124]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80197da:	689a      	ldr	r2, [r3, #8]
 80197dc:	4b1e      	ldr	r3, [pc, #120]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 80197de:	2101      	movs	r1, #1
 80197e0:	438a      	bics	r2, r1
 80197e2:	609a      	str	r2, [r3, #8]
 80197e4:	4b23      	ldr	r3, [pc, #140]	; (8019874 <HAL_RCC_OscConfig+0x6a4>)
 80197e6:	6a1a      	ldr	r2, [r3, #32]
 80197e8:	4b22      	ldr	r3, [pc, #136]	; (8019874 <HAL_RCC_OscConfig+0x6a4>)
 80197ea:	4923      	ldr	r1, [pc, #140]	; (8019878 <HAL_RCC_OscConfig+0x6a8>)
 80197ec:	400a      	ands	r2, r1
 80197ee:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80197f0:	f7ff f9a0 	bl	8018b34 <HAL_GetTick>
 80197f4:	0003      	movs	r3, r0
 80197f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80197f8:	e008      	b.n	801980c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80197fa:	f7ff f99b 	bl	8018b34 <HAL_GetTick>
 80197fe:	0002      	movs	r2, r0
 8019800:	697b      	ldr	r3, [r7, #20]
 8019802:	1ad3      	subs	r3, r2, r3
 8019804:	2b02      	cmp	r3, #2
 8019806:	d901      	bls.n	801980c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8019808:	2303      	movs	r3, #3
 801980a:	e0aa      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801980c:	4b12      	ldr	r3, [pc, #72]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 801980e:	689b      	ldr	r3, [r3, #8]
 8019810:	2202      	movs	r2, #2
 8019812:	4013      	ands	r3, r2
 8019814:	d1f1      	bne.n	80197fa <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801981a:	2b00      	cmp	r3, #0
 801981c:	d100      	bne.n	8019820 <HAL_RCC_OscConfig+0x650>
 801981e:	e09f      	b.n	8019960 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8019820:	69fb      	ldr	r3, [r7, #28]
 8019822:	2b0c      	cmp	r3, #12
 8019824:	d100      	bne.n	8019828 <HAL_RCC_OscConfig+0x658>
 8019826:	e078      	b.n	801991a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801982c:	2b02      	cmp	r3, #2
 801982e:	d159      	bne.n	80198e4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019830:	4b09      	ldr	r3, [pc, #36]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019832:	681a      	ldr	r2, [r3, #0]
 8019834:	4b08      	ldr	r3, [pc, #32]	; (8019858 <HAL_RCC_OscConfig+0x688>)
 8019836:	4911      	ldr	r1, [pc, #68]	; (801987c <HAL_RCC_OscConfig+0x6ac>)
 8019838:	400a      	ands	r2, r1
 801983a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801983c:	f7ff f97a 	bl	8018b34 <HAL_GetTick>
 8019840:	0003      	movs	r3, r0
 8019842:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8019844:	e01c      	b.n	8019880 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019846:	f7ff f975 	bl	8018b34 <HAL_GetTick>
 801984a:	0002      	movs	r2, r0
 801984c:	697b      	ldr	r3, [r7, #20]
 801984e:	1ad3      	subs	r3, r2, r3
 8019850:	2b02      	cmp	r3, #2
 8019852:	d915      	bls.n	8019880 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8019854:	2303      	movs	r3, #3
 8019856:	e084      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
 8019858:	40021000 	.word	0x40021000
 801985c:	ffff1fff 	.word	0xffff1fff
 8019860:	fffffeff 	.word	0xfffffeff
 8019864:	40007000 	.word	0x40007000
 8019868:	fffffbff 	.word	0xfffffbff
 801986c:	00001388 	.word	0x00001388
 8019870:	efffffff 	.word	0xefffffff
 8019874:	40010000 	.word	0x40010000
 8019878:	ffffdfff 	.word	0xffffdfff
 801987c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8019880:	4b3a      	ldr	r3, [pc, #232]	; (801996c <HAL_RCC_OscConfig+0x79c>)
 8019882:	681a      	ldr	r2, [r3, #0]
 8019884:	2380      	movs	r3, #128	; 0x80
 8019886:	049b      	lsls	r3, r3, #18
 8019888:	4013      	ands	r3, r2
 801988a:	d1dc      	bne.n	8019846 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801988c:	4b37      	ldr	r3, [pc, #220]	; (801996c <HAL_RCC_OscConfig+0x79c>)
 801988e:	68db      	ldr	r3, [r3, #12]
 8019890:	4a37      	ldr	r2, [pc, #220]	; (8019970 <HAL_RCC_OscConfig+0x7a0>)
 8019892:	4013      	ands	r3, r2
 8019894:	0019      	movs	r1, r3
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801989e:	431a      	orrs	r2, r3
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198a4:	431a      	orrs	r2, r3
 80198a6:	4b31      	ldr	r3, [pc, #196]	; (801996c <HAL_RCC_OscConfig+0x79c>)
 80198a8:	430a      	orrs	r2, r1
 80198aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80198ac:	4b2f      	ldr	r3, [pc, #188]	; (801996c <HAL_RCC_OscConfig+0x79c>)
 80198ae:	681a      	ldr	r2, [r3, #0]
 80198b0:	4b2e      	ldr	r3, [pc, #184]	; (801996c <HAL_RCC_OscConfig+0x79c>)
 80198b2:	2180      	movs	r1, #128	; 0x80
 80198b4:	0449      	lsls	r1, r1, #17
 80198b6:	430a      	orrs	r2, r1
 80198b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80198ba:	f7ff f93b 	bl	8018b34 <HAL_GetTick>
 80198be:	0003      	movs	r3, r0
 80198c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80198c2:	e008      	b.n	80198d6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80198c4:	f7ff f936 	bl	8018b34 <HAL_GetTick>
 80198c8:	0002      	movs	r2, r0
 80198ca:	697b      	ldr	r3, [r7, #20]
 80198cc:	1ad3      	subs	r3, r2, r3
 80198ce:	2b02      	cmp	r3, #2
 80198d0:	d901      	bls.n	80198d6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80198d2:	2303      	movs	r3, #3
 80198d4:	e045      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80198d6:	4b25      	ldr	r3, [pc, #148]	; (801996c <HAL_RCC_OscConfig+0x79c>)
 80198d8:	681a      	ldr	r2, [r3, #0]
 80198da:	2380      	movs	r3, #128	; 0x80
 80198dc:	049b      	lsls	r3, r3, #18
 80198de:	4013      	ands	r3, r2
 80198e0:	d0f0      	beq.n	80198c4 <HAL_RCC_OscConfig+0x6f4>
 80198e2:	e03d      	b.n	8019960 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80198e4:	4b21      	ldr	r3, [pc, #132]	; (801996c <HAL_RCC_OscConfig+0x79c>)
 80198e6:	681a      	ldr	r2, [r3, #0]
 80198e8:	4b20      	ldr	r3, [pc, #128]	; (801996c <HAL_RCC_OscConfig+0x79c>)
 80198ea:	4922      	ldr	r1, [pc, #136]	; (8019974 <HAL_RCC_OscConfig+0x7a4>)
 80198ec:	400a      	ands	r2, r1
 80198ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80198f0:	f7ff f920 	bl	8018b34 <HAL_GetTick>
 80198f4:	0003      	movs	r3, r0
 80198f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80198f8:	e008      	b.n	801990c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80198fa:	f7ff f91b 	bl	8018b34 <HAL_GetTick>
 80198fe:	0002      	movs	r2, r0
 8019900:	697b      	ldr	r3, [r7, #20]
 8019902:	1ad3      	subs	r3, r2, r3
 8019904:	2b02      	cmp	r3, #2
 8019906:	d901      	bls.n	801990c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8019908:	2303      	movs	r3, #3
 801990a:	e02a      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801990c:	4b17      	ldr	r3, [pc, #92]	; (801996c <HAL_RCC_OscConfig+0x79c>)
 801990e:	681a      	ldr	r2, [r3, #0]
 8019910:	2380      	movs	r3, #128	; 0x80
 8019912:	049b      	lsls	r3, r3, #18
 8019914:	4013      	ands	r3, r2
 8019916:	d1f0      	bne.n	80198fa <HAL_RCC_OscConfig+0x72a>
 8019918:	e022      	b.n	8019960 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801991e:	2b01      	cmp	r3, #1
 8019920:	d101      	bne.n	8019926 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8019922:	2301      	movs	r3, #1
 8019924:	e01d      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8019926:	4b11      	ldr	r3, [pc, #68]	; (801996c <HAL_RCC_OscConfig+0x79c>)
 8019928:	68db      	ldr	r3, [r3, #12]
 801992a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801992c:	69ba      	ldr	r2, [r7, #24]
 801992e:	2380      	movs	r3, #128	; 0x80
 8019930:	025b      	lsls	r3, r3, #9
 8019932:	401a      	ands	r2, r3
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019938:	429a      	cmp	r2, r3
 801993a:	d10f      	bne.n	801995c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801993c:	69ba      	ldr	r2, [r7, #24]
 801993e:	23f0      	movs	r3, #240	; 0xf0
 8019940:	039b      	lsls	r3, r3, #14
 8019942:	401a      	ands	r2, r3
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019948:	429a      	cmp	r2, r3
 801994a:	d107      	bne.n	801995c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801994c:	69ba      	ldr	r2, [r7, #24]
 801994e:	23c0      	movs	r3, #192	; 0xc0
 8019950:	041b      	lsls	r3, r3, #16
 8019952:	401a      	ands	r2, r3
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8019958:	429a      	cmp	r2, r3
 801995a:	d001      	beq.n	8019960 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801995c:	2301      	movs	r3, #1
 801995e:	e000      	b.n	8019962 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8019960:	2300      	movs	r3, #0
}
 8019962:	0018      	movs	r0, r3
 8019964:	46bd      	mov	sp, r7
 8019966:	b00a      	add	sp, #40	; 0x28
 8019968:	bdb0      	pop	{r4, r5, r7, pc}
 801996a:	46c0      	nop			; (mov r8, r8)
 801996c:	40021000 	.word	0x40021000
 8019970:	ff02ffff 	.word	0xff02ffff
 8019974:	feffffff 	.word	0xfeffffff

08019978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019978:	b5b0      	push	{r4, r5, r7, lr}
 801997a:	b084      	sub	sp, #16
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
 8019980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d101      	bne.n	801998c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8019988:	2301      	movs	r3, #1
 801998a:	e128      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801998c:	4b96      	ldr	r3, [pc, #600]	; (8019be8 <HAL_RCC_ClockConfig+0x270>)
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	2201      	movs	r2, #1
 8019992:	4013      	ands	r3, r2
 8019994:	683a      	ldr	r2, [r7, #0]
 8019996:	429a      	cmp	r2, r3
 8019998:	d91e      	bls.n	80199d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801999a:	4b93      	ldr	r3, [pc, #588]	; (8019be8 <HAL_RCC_ClockConfig+0x270>)
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	2201      	movs	r2, #1
 80199a0:	4393      	bics	r3, r2
 80199a2:	0019      	movs	r1, r3
 80199a4:	4b90      	ldr	r3, [pc, #576]	; (8019be8 <HAL_RCC_ClockConfig+0x270>)
 80199a6:	683a      	ldr	r2, [r7, #0]
 80199a8:	430a      	orrs	r2, r1
 80199aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80199ac:	f7ff f8c2 	bl	8018b34 <HAL_GetTick>
 80199b0:	0003      	movs	r3, r0
 80199b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80199b4:	e009      	b.n	80199ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80199b6:	f7ff f8bd 	bl	8018b34 <HAL_GetTick>
 80199ba:	0002      	movs	r2, r0
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	1ad3      	subs	r3, r2, r3
 80199c0:	4a8a      	ldr	r2, [pc, #552]	; (8019bec <HAL_RCC_ClockConfig+0x274>)
 80199c2:	4293      	cmp	r3, r2
 80199c4:	d901      	bls.n	80199ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80199c6:	2303      	movs	r3, #3
 80199c8:	e109      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80199ca:	4b87      	ldr	r3, [pc, #540]	; (8019be8 <HAL_RCC_ClockConfig+0x270>)
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	2201      	movs	r2, #1
 80199d0:	4013      	ands	r3, r2
 80199d2:	683a      	ldr	r2, [r7, #0]
 80199d4:	429a      	cmp	r2, r3
 80199d6:	d1ee      	bne.n	80199b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	2202      	movs	r2, #2
 80199de:	4013      	ands	r3, r2
 80199e0:	d009      	beq.n	80199f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80199e2:	4b83      	ldr	r3, [pc, #524]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 80199e4:	68db      	ldr	r3, [r3, #12]
 80199e6:	22f0      	movs	r2, #240	; 0xf0
 80199e8:	4393      	bics	r3, r2
 80199ea:	0019      	movs	r1, r3
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	689a      	ldr	r2, [r3, #8]
 80199f0:	4b7f      	ldr	r3, [pc, #508]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 80199f2:	430a      	orrs	r2, r1
 80199f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	2201      	movs	r2, #1
 80199fc:	4013      	ands	r3, r2
 80199fe:	d100      	bne.n	8019a02 <HAL_RCC_ClockConfig+0x8a>
 8019a00:	e089      	b.n	8019b16 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	685b      	ldr	r3, [r3, #4]
 8019a06:	2b02      	cmp	r3, #2
 8019a08:	d107      	bne.n	8019a1a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8019a0a:	4b79      	ldr	r3, [pc, #484]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019a0c:	681a      	ldr	r2, [r3, #0]
 8019a0e:	2380      	movs	r3, #128	; 0x80
 8019a10:	029b      	lsls	r3, r3, #10
 8019a12:	4013      	ands	r3, r2
 8019a14:	d120      	bne.n	8019a58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8019a16:	2301      	movs	r3, #1
 8019a18:	e0e1      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	685b      	ldr	r3, [r3, #4]
 8019a1e:	2b03      	cmp	r3, #3
 8019a20:	d107      	bne.n	8019a32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8019a22:	4b73      	ldr	r3, [pc, #460]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019a24:	681a      	ldr	r2, [r3, #0]
 8019a26:	2380      	movs	r3, #128	; 0x80
 8019a28:	049b      	lsls	r3, r3, #18
 8019a2a:	4013      	ands	r3, r2
 8019a2c:	d114      	bne.n	8019a58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8019a2e:	2301      	movs	r3, #1
 8019a30:	e0d5      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	685b      	ldr	r3, [r3, #4]
 8019a36:	2b01      	cmp	r3, #1
 8019a38:	d106      	bne.n	8019a48 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8019a3a:	4b6d      	ldr	r3, [pc, #436]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	2204      	movs	r2, #4
 8019a40:	4013      	ands	r3, r2
 8019a42:	d109      	bne.n	8019a58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8019a44:	2301      	movs	r3, #1
 8019a46:	e0ca      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8019a48:	4b69      	ldr	r3, [pc, #420]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019a4a:	681a      	ldr	r2, [r3, #0]
 8019a4c:	2380      	movs	r3, #128	; 0x80
 8019a4e:	009b      	lsls	r3, r3, #2
 8019a50:	4013      	ands	r3, r2
 8019a52:	d101      	bne.n	8019a58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8019a54:	2301      	movs	r3, #1
 8019a56:	e0c2      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8019a58:	4b65      	ldr	r3, [pc, #404]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019a5a:	68db      	ldr	r3, [r3, #12]
 8019a5c:	2203      	movs	r2, #3
 8019a5e:	4393      	bics	r3, r2
 8019a60:	0019      	movs	r1, r3
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	685a      	ldr	r2, [r3, #4]
 8019a66:	4b62      	ldr	r3, [pc, #392]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019a68:	430a      	orrs	r2, r1
 8019a6a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8019a6c:	f7ff f862 	bl	8018b34 <HAL_GetTick>
 8019a70:	0003      	movs	r3, r0
 8019a72:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	685b      	ldr	r3, [r3, #4]
 8019a78:	2b02      	cmp	r3, #2
 8019a7a:	d111      	bne.n	8019aa0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8019a7c:	e009      	b.n	8019a92 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019a7e:	f7ff f859 	bl	8018b34 <HAL_GetTick>
 8019a82:	0002      	movs	r2, r0
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	1ad3      	subs	r3, r2, r3
 8019a88:	4a58      	ldr	r2, [pc, #352]	; (8019bec <HAL_RCC_ClockConfig+0x274>)
 8019a8a:	4293      	cmp	r3, r2
 8019a8c:	d901      	bls.n	8019a92 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8019a8e:	2303      	movs	r3, #3
 8019a90:	e0a5      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8019a92:	4b57      	ldr	r3, [pc, #348]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019a94:	68db      	ldr	r3, [r3, #12]
 8019a96:	220c      	movs	r2, #12
 8019a98:	4013      	ands	r3, r2
 8019a9a:	2b08      	cmp	r3, #8
 8019a9c:	d1ef      	bne.n	8019a7e <HAL_RCC_ClockConfig+0x106>
 8019a9e:	e03a      	b.n	8019b16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	685b      	ldr	r3, [r3, #4]
 8019aa4:	2b03      	cmp	r3, #3
 8019aa6:	d111      	bne.n	8019acc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8019aa8:	e009      	b.n	8019abe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019aaa:	f7ff f843 	bl	8018b34 <HAL_GetTick>
 8019aae:	0002      	movs	r2, r0
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	1ad3      	subs	r3, r2, r3
 8019ab4:	4a4d      	ldr	r2, [pc, #308]	; (8019bec <HAL_RCC_ClockConfig+0x274>)
 8019ab6:	4293      	cmp	r3, r2
 8019ab8:	d901      	bls.n	8019abe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8019aba:	2303      	movs	r3, #3
 8019abc:	e08f      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8019abe:	4b4c      	ldr	r3, [pc, #304]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019ac0:	68db      	ldr	r3, [r3, #12]
 8019ac2:	220c      	movs	r2, #12
 8019ac4:	4013      	ands	r3, r2
 8019ac6:	2b0c      	cmp	r3, #12
 8019ac8:	d1ef      	bne.n	8019aaa <HAL_RCC_ClockConfig+0x132>
 8019aca:	e024      	b.n	8019b16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	685b      	ldr	r3, [r3, #4]
 8019ad0:	2b01      	cmp	r3, #1
 8019ad2:	d11b      	bne.n	8019b0c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8019ad4:	e009      	b.n	8019aea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019ad6:	f7ff f82d 	bl	8018b34 <HAL_GetTick>
 8019ada:	0002      	movs	r2, r0
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	1ad3      	subs	r3, r2, r3
 8019ae0:	4a42      	ldr	r2, [pc, #264]	; (8019bec <HAL_RCC_ClockConfig+0x274>)
 8019ae2:	4293      	cmp	r3, r2
 8019ae4:	d901      	bls.n	8019aea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8019ae6:	2303      	movs	r3, #3
 8019ae8:	e079      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8019aea:	4b41      	ldr	r3, [pc, #260]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019aec:	68db      	ldr	r3, [r3, #12]
 8019aee:	220c      	movs	r2, #12
 8019af0:	4013      	ands	r3, r2
 8019af2:	2b04      	cmp	r3, #4
 8019af4:	d1ef      	bne.n	8019ad6 <HAL_RCC_ClockConfig+0x15e>
 8019af6:	e00e      	b.n	8019b16 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019af8:	f7ff f81c 	bl	8018b34 <HAL_GetTick>
 8019afc:	0002      	movs	r2, r0
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	1ad3      	subs	r3, r2, r3
 8019b02:	4a3a      	ldr	r2, [pc, #232]	; (8019bec <HAL_RCC_ClockConfig+0x274>)
 8019b04:	4293      	cmp	r3, r2
 8019b06:	d901      	bls.n	8019b0c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8019b08:	2303      	movs	r3, #3
 8019b0a:	e068      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8019b0c:	4b38      	ldr	r3, [pc, #224]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019b0e:	68db      	ldr	r3, [r3, #12]
 8019b10:	220c      	movs	r2, #12
 8019b12:	4013      	ands	r3, r2
 8019b14:	d1f0      	bne.n	8019af8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8019b16:	4b34      	ldr	r3, [pc, #208]	; (8019be8 <HAL_RCC_ClockConfig+0x270>)
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	2201      	movs	r2, #1
 8019b1c:	4013      	ands	r3, r2
 8019b1e:	683a      	ldr	r2, [r7, #0]
 8019b20:	429a      	cmp	r2, r3
 8019b22:	d21e      	bcs.n	8019b62 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019b24:	4b30      	ldr	r3, [pc, #192]	; (8019be8 <HAL_RCC_ClockConfig+0x270>)
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	2201      	movs	r2, #1
 8019b2a:	4393      	bics	r3, r2
 8019b2c:	0019      	movs	r1, r3
 8019b2e:	4b2e      	ldr	r3, [pc, #184]	; (8019be8 <HAL_RCC_ClockConfig+0x270>)
 8019b30:	683a      	ldr	r2, [r7, #0]
 8019b32:	430a      	orrs	r2, r1
 8019b34:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8019b36:	f7fe fffd 	bl	8018b34 <HAL_GetTick>
 8019b3a:	0003      	movs	r3, r0
 8019b3c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019b3e:	e009      	b.n	8019b54 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019b40:	f7fe fff8 	bl	8018b34 <HAL_GetTick>
 8019b44:	0002      	movs	r2, r0
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	1ad3      	subs	r3, r2, r3
 8019b4a:	4a28      	ldr	r2, [pc, #160]	; (8019bec <HAL_RCC_ClockConfig+0x274>)
 8019b4c:	4293      	cmp	r3, r2
 8019b4e:	d901      	bls.n	8019b54 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8019b50:	2303      	movs	r3, #3
 8019b52:	e044      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019b54:	4b24      	ldr	r3, [pc, #144]	; (8019be8 <HAL_RCC_ClockConfig+0x270>)
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	2201      	movs	r2, #1
 8019b5a:	4013      	ands	r3, r2
 8019b5c:	683a      	ldr	r2, [r7, #0]
 8019b5e:	429a      	cmp	r2, r3
 8019b60:	d1ee      	bne.n	8019b40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	2204      	movs	r2, #4
 8019b68:	4013      	ands	r3, r2
 8019b6a:	d009      	beq.n	8019b80 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8019b6c:	4b20      	ldr	r3, [pc, #128]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019b6e:	68db      	ldr	r3, [r3, #12]
 8019b70:	4a20      	ldr	r2, [pc, #128]	; (8019bf4 <HAL_RCC_ClockConfig+0x27c>)
 8019b72:	4013      	ands	r3, r2
 8019b74:	0019      	movs	r1, r3
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	68da      	ldr	r2, [r3, #12]
 8019b7a:	4b1d      	ldr	r3, [pc, #116]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019b7c:	430a      	orrs	r2, r1
 8019b7e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	2208      	movs	r2, #8
 8019b86:	4013      	ands	r3, r2
 8019b88:	d00a      	beq.n	8019ba0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8019b8a:	4b19      	ldr	r3, [pc, #100]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019b8c:	68db      	ldr	r3, [r3, #12]
 8019b8e:	4a1a      	ldr	r2, [pc, #104]	; (8019bf8 <HAL_RCC_ClockConfig+0x280>)
 8019b90:	4013      	ands	r3, r2
 8019b92:	0019      	movs	r1, r3
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	691b      	ldr	r3, [r3, #16]
 8019b98:	00da      	lsls	r2, r3, #3
 8019b9a:	4b15      	ldr	r3, [pc, #84]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019b9c:	430a      	orrs	r2, r1
 8019b9e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8019ba0:	f000 f832 	bl	8019c08 <HAL_RCC_GetSysClockFreq>
 8019ba4:	0001      	movs	r1, r0
 8019ba6:	4b12      	ldr	r3, [pc, #72]	; (8019bf0 <HAL_RCC_ClockConfig+0x278>)
 8019ba8:	68db      	ldr	r3, [r3, #12]
 8019baa:	091b      	lsrs	r3, r3, #4
 8019bac:	220f      	movs	r2, #15
 8019bae:	4013      	ands	r3, r2
 8019bb0:	4a12      	ldr	r2, [pc, #72]	; (8019bfc <HAL_RCC_ClockConfig+0x284>)
 8019bb2:	5cd3      	ldrb	r3, [r2, r3]
 8019bb4:	000a      	movs	r2, r1
 8019bb6:	40da      	lsrs	r2, r3
 8019bb8:	4b11      	ldr	r3, [pc, #68]	; (8019c00 <HAL_RCC_ClockConfig+0x288>)
 8019bba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8019bbc:	4b11      	ldr	r3, [pc, #68]	; (8019c04 <HAL_RCC_ClockConfig+0x28c>)
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	250b      	movs	r5, #11
 8019bc2:	197c      	adds	r4, r7, r5
 8019bc4:	0018      	movs	r0, r3
 8019bc6:	f7fe fedd 	bl	8018984 <HAL_InitTick>
 8019bca:	0003      	movs	r3, r0
 8019bcc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8019bce:	197b      	adds	r3, r7, r5
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d002      	beq.n	8019bdc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8019bd6:	197b      	adds	r3, r7, r5
 8019bd8:	781b      	ldrb	r3, [r3, #0]
 8019bda:	e000      	b.n	8019bde <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8019bdc:	2300      	movs	r3, #0
}
 8019bde:	0018      	movs	r0, r3
 8019be0:	46bd      	mov	sp, r7
 8019be2:	b004      	add	sp, #16
 8019be4:	bdb0      	pop	{r4, r5, r7, pc}
 8019be6:	46c0      	nop			; (mov r8, r8)
 8019be8:	40022000 	.word	0x40022000
 8019bec:	00001388 	.word	0x00001388
 8019bf0:	40021000 	.word	0x40021000
 8019bf4:	fffff8ff 	.word	0xfffff8ff
 8019bf8:	ffffc7ff 	.word	0xffffc7ff
 8019bfc:	0801d638 	.word	0x0801d638
 8019c00:	20000000 	.word	0x20000000
 8019c04:	20000004 	.word	0x20000004

08019c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019c08:	b5b0      	push	{r4, r5, r7, lr}
 8019c0a:	b08e      	sub	sp, #56	; 0x38
 8019c0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8019c0e:	4b4c      	ldr	r3, [pc, #304]	; (8019d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8019c10:	68db      	ldr	r3, [r3, #12]
 8019c12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8019c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019c16:	230c      	movs	r3, #12
 8019c18:	4013      	ands	r3, r2
 8019c1a:	2b0c      	cmp	r3, #12
 8019c1c:	d014      	beq.n	8019c48 <HAL_RCC_GetSysClockFreq+0x40>
 8019c1e:	d900      	bls.n	8019c22 <HAL_RCC_GetSysClockFreq+0x1a>
 8019c20:	e07b      	b.n	8019d1a <HAL_RCC_GetSysClockFreq+0x112>
 8019c22:	2b04      	cmp	r3, #4
 8019c24:	d002      	beq.n	8019c2c <HAL_RCC_GetSysClockFreq+0x24>
 8019c26:	2b08      	cmp	r3, #8
 8019c28:	d00b      	beq.n	8019c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8019c2a:	e076      	b.n	8019d1a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8019c2c:	4b44      	ldr	r3, [pc, #272]	; (8019d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	2210      	movs	r2, #16
 8019c32:	4013      	ands	r3, r2
 8019c34:	d002      	beq.n	8019c3c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8019c36:	4b43      	ldr	r3, [pc, #268]	; (8019d44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8019c38:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8019c3a:	e07c      	b.n	8019d36 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8019c3c:	4b42      	ldr	r3, [pc, #264]	; (8019d48 <HAL_RCC_GetSysClockFreq+0x140>)
 8019c3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8019c40:	e079      	b.n	8019d36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8019c42:	4b42      	ldr	r3, [pc, #264]	; (8019d4c <HAL_RCC_GetSysClockFreq+0x144>)
 8019c44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8019c46:	e076      	b.n	8019d36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8019c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c4a:	0c9a      	lsrs	r2, r3, #18
 8019c4c:	230f      	movs	r3, #15
 8019c4e:	401a      	ands	r2, r3
 8019c50:	4b3f      	ldr	r3, [pc, #252]	; (8019d50 <HAL_RCC_GetSysClockFreq+0x148>)
 8019c52:	5c9b      	ldrb	r3, [r3, r2]
 8019c54:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8019c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c58:	0d9a      	lsrs	r2, r3, #22
 8019c5a:	2303      	movs	r3, #3
 8019c5c:	4013      	ands	r3, r2
 8019c5e:	3301      	adds	r3, #1
 8019c60:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8019c62:	4b37      	ldr	r3, [pc, #220]	; (8019d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8019c64:	68da      	ldr	r2, [r3, #12]
 8019c66:	2380      	movs	r3, #128	; 0x80
 8019c68:	025b      	lsls	r3, r3, #9
 8019c6a:	4013      	ands	r3, r2
 8019c6c:	d01a      	beq.n	8019ca4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8019c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c70:	61bb      	str	r3, [r7, #24]
 8019c72:	2300      	movs	r3, #0
 8019c74:	61fb      	str	r3, [r7, #28]
 8019c76:	4a35      	ldr	r2, [pc, #212]	; (8019d4c <HAL_RCC_GetSysClockFreq+0x144>)
 8019c78:	2300      	movs	r3, #0
 8019c7a:	69b8      	ldr	r0, [r7, #24]
 8019c7c:	69f9      	ldr	r1, [r7, #28]
 8019c7e:	f7fe faef 	bl	8018260 <__aeabi_lmul>
 8019c82:	0002      	movs	r2, r0
 8019c84:	000b      	movs	r3, r1
 8019c86:	0010      	movs	r0, r2
 8019c88:	0019      	movs	r1, r3
 8019c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8c:	613b      	str	r3, [r7, #16]
 8019c8e:	2300      	movs	r3, #0
 8019c90:	617b      	str	r3, [r7, #20]
 8019c92:	693a      	ldr	r2, [r7, #16]
 8019c94:	697b      	ldr	r3, [r7, #20]
 8019c96:	f7fe fac3 	bl	8018220 <__aeabi_uldivmod>
 8019c9a:	0002      	movs	r2, r0
 8019c9c:	000b      	movs	r3, r1
 8019c9e:	0013      	movs	r3, r2
 8019ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8019ca2:	e037      	b.n	8019d14 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8019ca4:	4b26      	ldr	r3, [pc, #152]	; (8019d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	2210      	movs	r2, #16
 8019caa:	4013      	ands	r3, r2
 8019cac:	d01a      	beq.n	8019ce4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8019cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb0:	60bb      	str	r3, [r7, #8]
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	60fb      	str	r3, [r7, #12]
 8019cb6:	4a23      	ldr	r2, [pc, #140]	; (8019d44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8019cb8:	2300      	movs	r3, #0
 8019cba:	68b8      	ldr	r0, [r7, #8]
 8019cbc:	68f9      	ldr	r1, [r7, #12]
 8019cbe:	f7fe facf 	bl	8018260 <__aeabi_lmul>
 8019cc2:	0002      	movs	r2, r0
 8019cc4:	000b      	movs	r3, r1
 8019cc6:	0010      	movs	r0, r2
 8019cc8:	0019      	movs	r1, r3
 8019cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ccc:	603b      	str	r3, [r7, #0]
 8019cce:	2300      	movs	r3, #0
 8019cd0:	607b      	str	r3, [r7, #4]
 8019cd2:	683a      	ldr	r2, [r7, #0]
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	f7fe faa3 	bl	8018220 <__aeabi_uldivmod>
 8019cda:	0002      	movs	r2, r0
 8019cdc:	000b      	movs	r3, r1
 8019cde:	0013      	movs	r3, r2
 8019ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8019ce2:	e017      	b.n	8019d14 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8019ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ce6:	0018      	movs	r0, r3
 8019ce8:	2300      	movs	r3, #0
 8019cea:	0019      	movs	r1, r3
 8019cec:	4a16      	ldr	r2, [pc, #88]	; (8019d48 <HAL_RCC_GetSysClockFreq+0x140>)
 8019cee:	2300      	movs	r3, #0
 8019cf0:	f7fe fab6 	bl	8018260 <__aeabi_lmul>
 8019cf4:	0002      	movs	r2, r0
 8019cf6:	000b      	movs	r3, r1
 8019cf8:	0010      	movs	r0, r2
 8019cfa:	0019      	movs	r1, r3
 8019cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cfe:	001c      	movs	r4, r3
 8019d00:	2300      	movs	r3, #0
 8019d02:	001d      	movs	r5, r3
 8019d04:	0022      	movs	r2, r4
 8019d06:	002b      	movs	r3, r5
 8019d08:	f7fe fa8a 	bl	8018220 <__aeabi_uldivmod>
 8019d0c:	0002      	movs	r2, r0
 8019d0e:	000b      	movs	r3, r1
 8019d10:	0013      	movs	r3, r2
 8019d12:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8019d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8019d18:	e00d      	b.n	8019d36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8019d1a:	4b09      	ldr	r3, [pc, #36]	; (8019d40 <HAL_RCC_GetSysClockFreq+0x138>)
 8019d1c:	685b      	ldr	r3, [r3, #4]
 8019d1e:	0b5b      	lsrs	r3, r3, #13
 8019d20:	2207      	movs	r2, #7
 8019d22:	4013      	ands	r3, r2
 8019d24:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8019d26:	6a3b      	ldr	r3, [r7, #32]
 8019d28:	3301      	adds	r3, #1
 8019d2a:	2280      	movs	r2, #128	; 0x80
 8019d2c:	0212      	lsls	r2, r2, #8
 8019d2e:	409a      	lsls	r2, r3
 8019d30:	0013      	movs	r3, r2
 8019d32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8019d34:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8019d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8019d38:	0018      	movs	r0, r3
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	b00e      	add	sp, #56	; 0x38
 8019d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8019d40:	40021000 	.word	0x40021000
 8019d44:	003d0900 	.word	0x003d0900
 8019d48:	00f42400 	.word	0x00f42400
 8019d4c:	007a1200 	.word	0x007a1200
 8019d50:	0801d650 	.word	0x0801d650

08019d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019d58:	4b02      	ldr	r3, [pc, #8]	; (8019d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8019d5a:	681b      	ldr	r3, [r3, #0]
}
 8019d5c:	0018      	movs	r0, r3
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}
 8019d62:	46c0      	nop			; (mov r8, r8)
 8019d64:	20000000 	.word	0x20000000

08019d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8019d6c:	f7ff fff2 	bl	8019d54 <HAL_RCC_GetHCLKFreq>
 8019d70:	0001      	movs	r1, r0
 8019d72:	4b06      	ldr	r3, [pc, #24]	; (8019d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8019d74:	68db      	ldr	r3, [r3, #12]
 8019d76:	0a1b      	lsrs	r3, r3, #8
 8019d78:	2207      	movs	r2, #7
 8019d7a:	4013      	ands	r3, r2
 8019d7c:	4a04      	ldr	r2, [pc, #16]	; (8019d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8019d7e:	5cd3      	ldrb	r3, [r2, r3]
 8019d80:	40d9      	lsrs	r1, r3
 8019d82:	000b      	movs	r3, r1
}
 8019d84:	0018      	movs	r0, r3
 8019d86:	46bd      	mov	sp, r7
 8019d88:	bd80      	pop	{r7, pc}
 8019d8a:	46c0      	nop			; (mov r8, r8)
 8019d8c:	40021000 	.word	0x40021000
 8019d90:	0801d648 	.word	0x0801d648

08019d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019d98:	f7ff ffdc 	bl	8019d54 <HAL_RCC_GetHCLKFreq>
 8019d9c:	0001      	movs	r1, r0
 8019d9e:	4b06      	ldr	r3, [pc, #24]	; (8019db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019da0:	68db      	ldr	r3, [r3, #12]
 8019da2:	0adb      	lsrs	r3, r3, #11
 8019da4:	2207      	movs	r2, #7
 8019da6:	4013      	ands	r3, r2
 8019da8:	4a04      	ldr	r2, [pc, #16]	; (8019dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8019daa:	5cd3      	ldrb	r3, [r2, r3]
 8019dac:	40d9      	lsrs	r1, r3
 8019dae:	000b      	movs	r3, r1
}
 8019db0:	0018      	movs	r0, r3
 8019db2:	46bd      	mov	sp, r7
 8019db4:	bd80      	pop	{r7, pc}
 8019db6:	46c0      	nop			; (mov r8, r8)
 8019db8:	40021000 	.word	0x40021000
 8019dbc:	0801d648 	.word	0x0801d648

08019dc0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b082      	sub	sp, #8
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
 8019dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	220f      	movs	r2, #15
 8019dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8019dd0:	4b12      	ldr	r3, [pc, #72]	; (8019e1c <HAL_RCC_GetClockConfig+0x5c>)
 8019dd2:	68db      	ldr	r3, [r3, #12]
 8019dd4:	2203      	movs	r2, #3
 8019dd6:	401a      	ands	r2, r3
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8019ddc:	4b0f      	ldr	r3, [pc, #60]	; (8019e1c <HAL_RCC_GetClockConfig+0x5c>)
 8019dde:	68db      	ldr	r3, [r3, #12]
 8019de0:	22f0      	movs	r2, #240	; 0xf0
 8019de2:	401a      	ands	r2, r3
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8019de8:	4b0c      	ldr	r3, [pc, #48]	; (8019e1c <HAL_RCC_GetClockConfig+0x5c>)
 8019dea:	68da      	ldr	r2, [r3, #12]
 8019dec:	23e0      	movs	r3, #224	; 0xe0
 8019dee:	00db      	lsls	r3, r3, #3
 8019df0:	401a      	ands	r2, r3
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8019df6:	4b09      	ldr	r3, [pc, #36]	; (8019e1c <HAL_RCC_GetClockConfig+0x5c>)
 8019df8:	68db      	ldr	r3, [r3, #12]
 8019dfa:	08da      	lsrs	r2, r3, #3
 8019dfc:	23e0      	movs	r3, #224	; 0xe0
 8019dfe:	00db      	lsls	r3, r3, #3
 8019e00:	401a      	ands	r2, r3
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8019e06:	4b06      	ldr	r3, [pc, #24]	; (8019e20 <HAL_RCC_GetClockConfig+0x60>)
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	2201      	movs	r2, #1
 8019e0c:	401a      	ands	r2, r3
 8019e0e:	683b      	ldr	r3, [r7, #0]
 8019e10:	601a      	str	r2, [r3, #0]
}
 8019e12:	46c0      	nop			; (mov r8, r8)
 8019e14:	46bd      	mov	sp, r7
 8019e16:	b002      	add	sp, #8
 8019e18:	bd80      	pop	{r7, pc}
 8019e1a:	46c0      	nop			; (mov r8, r8)
 8019e1c:	40021000 	.word	0x40021000
 8019e20:	40022000 	.word	0x40022000

08019e24 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b086      	sub	sp, #24
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8019e2c:	2317      	movs	r3, #23
 8019e2e:	18fb      	adds	r3, r7, r3
 8019e30:	2200      	movs	r2, #0
 8019e32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	2220      	movs	r2, #32
 8019e3a:	4013      	ands	r3, r2
 8019e3c:	d106      	bne.n	8019e4c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681a      	ldr	r2, [r3, #0]
 8019e42:	2380      	movs	r3, #128	; 0x80
 8019e44:	011b      	lsls	r3, r3, #4
 8019e46:	4013      	ands	r3, r2
 8019e48:	d100      	bne.n	8019e4c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8019e4a:	e0d9      	b.n	801a000 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019e4c:	4ba4      	ldr	r3, [pc, #656]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019e50:	2380      	movs	r3, #128	; 0x80
 8019e52:	055b      	lsls	r3, r3, #21
 8019e54:	4013      	ands	r3, r2
 8019e56:	d10a      	bne.n	8019e6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019e58:	4ba1      	ldr	r3, [pc, #644]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019e5c:	4ba0      	ldr	r3, [pc, #640]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019e5e:	2180      	movs	r1, #128	; 0x80
 8019e60:	0549      	lsls	r1, r1, #21
 8019e62:	430a      	orrs	r2, r1
 8019e64:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8019e66:	2317      	movs	r3, #23
 8019e68:	18fb      	adds	r3, r7, r3
 8019e6a:	2201      	movs	r2, #1
 8019e6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019e6e:	4b9d      	ldr	r3, [pc, #628]	; (801a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8019e70:	681a      	ldr	r2, [r3, #0]
 8019e72:	2380      	movs	r3, #128	; 0x80
 8019e74:	005b      	lsls	r3, r3, #1
 8019e76:	4013      	ands	r3, r2
 8019e78:	d11a      	bne.n	8019eb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8019e7a:	4b9a      	ldr	r3, [pc, #616]	; (801a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8019e7c:	681a      	ldr	r2, [r3, #0]
 8019e7e:	4b99      	ldr	r3, [pc, #612]	; (801a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8019e80:	2180      	movs	r1, #128	; 0x80
 8019e82:	0049      	lsls	r1, r1, #1
 8019e84:	430a      	orrs	r2, r1
 8019e86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8019e88:	f7fe fe54 	bl	8018b34 <HAL_GetTick>
 8019e8c:	0003      	movs	r3, r0
 8019e8e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019e90:	e008      	b.n	8019ea4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019e92:	f7fe fe4f 	bl	8018b34 <HAL_GetTick>
 8019e96:	0002      	movs	r2, r0
 8019e98:	693b      	ldr	r3, [r7, #16]
 8019e9a:	1ad3      	subs	r3, r2, r3
 8019e9c:	2b64      	cmp	r3, #100	; 0x64
 8019e9e:	d901      	bls.n	8019ea4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8019ea0:	2303      	movs	r3, #3
 8019ea2:	e118      	b.n	801a0d6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019ea4:	4b8f      	ldr	r3, [pc, #572]	; (801a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8019ea6:	681a      	ldr	r2, [r3, #0]
 8019ea8:	2380      	movs	r3, #128	; 0x80
 8019eaa:	005b      	lsls	r3, r3, #1
 8019eac:	4013      	ands	r3, r2
 8019eae:	d0f0      	beq.n	8019e92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8019eb0:	4b8b      	ldr	r3, [pc, #556]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019eb2:	681a      	ldr	r2, [r3, #0]
 8019eb4:	23c0      	movs	r3, #192	; 0xc0
 8019eb6:	039b      	lsls	r3, r3, #14
 8019eb8:	4013      	ands	r3, r2
 8019eba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	685a      	ldr	r2, [r3, #4]
 8019ec0:	23c0      	movs	r3, #192	; 0xc0
 8019ec2:	039b      	lsls	r3, r3, #14
 8019ec4:	4013      	ands	r3, r2
 8019ec6:	68fa      	ldr	r2, [r7, #12]
 8019ec8:	429a      	cmp	r2, r3
 8019eca:	d107      	bne.n	8019edc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	689a      	ldr	r2, [r3, #8]
 8019ed0:	23c0      	movs	r3, #192	; 0xc0
 8019ed2:	039b      	lsls	r3, r3, #14
 8019ed4:	4013      	ands	r3, r2
 8019ed6:	68fa      	ldr	r2, [r7, #12]
 8019ed8:	429a      	cmp	r2, r3
 8019eda:	d013      	beq.n	8019f04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	685a      	ldr	r2, [r3, #4]
 8019ee0:	23c0      	movs	r3, #192	; 0xc0
 8019ee2:	029b      	lsls	r3, r3, #10
 8019ee4:	401a      	ands	r2, r3
 8019ee6:	23c0      	movs	r3, #192	; 0xc0
 8019ee8:	029b      	lsls	r3, r3, #10
 8019eea:	429a      	cmp	r2, r3
 8019eec:	d10a      	bne.n	8019f04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8019eee:	4b7c      	ldr	r3, [pc, #496]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019ef0:	681a      	ldr	r2, [r3, #0]
 8019ef2:	2380      	movs	r3, #128	; 0x80
 8019ef4:	029b      	lsls	r3, r3, #10
 8019ef6:	401a      	ands	r2, r3
 8019ef8:	2380      	movs	r3, #128	; 0x80
 8019efa:	029b      	lsls	r3, r3, #10
 8019efc:	429a      	cmp	r2, r3
 8019efe:	d101      	bne.n	8019f04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8019f00:	2301      	movs	r3, #1
 8019f02:	e0e8      	b.n	801a0d6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8019f04:	4b76      	ldr	r3, [pc, #472]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019f06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019f08:	23c0      	movs	r3, #192	; 0xc0
 8019f0a:	029b      	lsls	r3, r3, #10
 8019f0c:	4013      	ands	r3, r2
 8019f0e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d049      	beq.n	8019faa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	685a      	ldr	r2, [r3, #4]
 8019f1a:	23c0      	movs	r3, #192	; 0xc0
 8019f1c:	029b      	lsls	r3, r3, #10
 8019f1e:	4013      	ands	r3, r2
 8019f20:	68fa      	ldr	r2, [r7, #12]
 8019f22:	429a      	cmp	r2, r3
 8019f24:	d004      	beq.n	8019f30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2220      	movs	r2, #32
 8019f2c:	4013      	ands	r3, r2
 8019f2e:	d10d      	bne.n	8019f4c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	689a      	ldr	r2, [r3, #8]
 8019f34:	23c0      	movs	r3, #192	; 0xc0
 8019f36:	029b      	lsls	r3, r3, #10
 8019f38:	4013      	ands	r3, r2
 8019f3a:	68fa      	ldr	r2, [r7, #12]
 8019f3c:	429a      	cmp	r2, r3
 8019f3e:	d034      	beq.n	8019faa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	681a      	ldr	r2, [r3, #0]
 8019f44:	2380      	movs	r3, #128	; 0x80
 8019f46:	011b      	lsls	r3, r3, #4
 8019f48:	4013      	ands	r3, r2
 8019f4a:	d02e      	beq.n	8019faa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8019f4c:	4b64      	ldr	r3, [pc, #400]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f50:	4a65      	ldr	r2, [pc, #404]	; (801a0e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8019f52:	4013      	ands	r3, r2
 8019f54:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8019f56:	4b62      	ldr	r3, [pc, #392]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019f5a:	4b61      	ldr	r3, [pc, #388]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019f5c:	2180      	movs	r1, #128	; 0x80
 8019f5e:	0309      	lsls	r1, r1, #12
 8019f60:	430a      	orrs	r2, r1
 8019f62:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8019f64:	4b5e      	ldr	r3, [pc, #376]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019f68:	4b5d      	ldr	r3, [pc, #372]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019f6a:	4960      	ldr	r1, [pc, #384]	; (801a0ec <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8019f6c:	400a      	ands	r2, r1
 8019f6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8019f70:	4b5b      	ldr	r3, [pc, #364]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019f72:	68fa      	ldr	r2, [r7, #12]
 8019f74:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8019f76:	68fa      	ldr	r2, [r7, #12]
 8019f78:	2380      	movs	r3, #128	; 0x80
 8019f7a:	005b      	lsls	r3, r3, #1
 8019f7c:	4013      	ands	r3, r2
 8019f7e:	d014      	beq.n	8019faa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f80:	f7fe fdd8 	bl	8018b34 <HAL_GetTick>
 8019f84:	0003      	movs	r3, r0
 8019f86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8019f88:	e009      	b.n	8019f9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019f8a:	f7fe fdd3 	bl	8018b34 <HAL_GetTick>
 8019f8e:	0002      	movs	r2, r0
 8019f90:	693b      	ldr	r3, [r7, #16]
 8019f92:	1ad3      	subs	r3, r2, r3
 8019f94:	4a56      	ldr	r2, [pc, #344]	; (801a0f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8019f96:	4293      	cmp	r3, r2
 8019f98:	d901      	bls.n	8019f9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8019f9a:	2303      	movs	r3, #3
 8019f9c:	e09b      	b.n	801a0d6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8019f9e:	4b50      	ldr	r3, [pc, #320]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019fa2:	2380      	movs	r3, #128	; 0x80
 8019fa4:	009b      	lsls	r3, r3, #2
 8019fa6:	4013      	ands	r3, r2
 8019fa8:	d0ef      	beq.n	8019f8a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	685a      	ldr	r2, [r3, #4]
 8019fae:	23c0      	movs	r3, #192	; 0xc0
 8019fb0:	029b      	lsls	r3, r3, #10
 8019fb2:	401a      	ands	r2, r3
 8019fb4:	23c0      	movs	r3, #192	; 0xc0
 8019fb6:	029b      	lsls	r3, r3, #10
 8019fb8:	429a      	cmp	r2, r3
 8019fba:	d10c      	bne.n	8019fd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8019fbc:	4b48      	ldr	r3, [pc, #288]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	4a4c      	ldr	r2, [pc, #304]	; (801a0f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8019fc2:	4013      	ands	r3, r2
 8019fc4:	0019      	movs	r1, r3
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	685a      	ldr	r2, [r3, #4]
 8019fca:	23c0      	movs	r3, #192	; 0xc0
 8019fcc:	039b      	lsls	r3, r3, #14
 8019fce:	401a      	ands	r2, r3
 8019fd0:	4b43      	ldr	r3, [pc, #268]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019fd2:	430a      	orrs	r2, r1
 8019fd4:	601a      	str	r2, [r3, #0]
 8019fd6:	4b42      	ldr	r3, [pc, #264]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019fd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	685a      	ldr	r2, [r3, #4]
 8019fde:	23c0      	movs	r3, #192	; 0xc0
 8019fe0:	029b      	lsls	r3, r3, #10
 8019fe2:	401a      	ands	r2, r3
 8019fe4:	4b3e      	ldr	r3, [pc, #248]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019fe6:	430a      	orrs	r2, r1
 8019fe8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8019fea:	2317      	movs	r3, #23
 8019fec:	18fb      	adds	r3, r7, r3
 8019fee:	781b      	ldrb	r3, [r3, #0]
 8019ff0:	2b01      	cmp	r3, #1
 8019ff2:	d105      	bne.n	801a000 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019ff4:	4b3a      	ldr	r3, [pc, #232]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019ff8:	4b39      	ldr	r3, [pc, #228]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8019ffa:	493f      	ldr	r1, [pc, #252]	; (801a0f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8019ffc:	400a      	ands	r2, r1
 8019ffe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	2201      	movs	r2, #1
 801a006:	4013      	ands	r3, r2
 801a008:	d009      	beq.n	801a01e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801a00a:	4b35      	ldr	r3, [pc, #212]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a00e:	2203      	movs	r2, #3
 801a010:	4393      	bics	r3, r2
 801a012:	0019      	movs	r1, r3
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	68da      	ldr	r2, [r3, #12]
 801a018:	4b31      	ldr	r3, [pc, #196]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a01a:	430a      	orrs	r2, r1
 801a01c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	2202      	movs	r2, #2
 801a024:	4013      	ands	r3, r2
 801a026:	d009      	beq.n	801a03c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801a028:	4b2d      	ldr	r3, [pc, #180]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a02a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a02c:	220c      	movs	r2, #12
 801a02e:	4393      	bics	r3, r2
 801a030:	0019      	movs	r1, r3
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	691a      	ldr	r2, [r3, #16]
 801a036:	4b2a      	ldr	r3, [pc, #168]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a038:	430a      	orrs	r2, r1
 801a03a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	2204      	movs	r2, #4
 801a042:	4013      	ands	r3, r2
 801a044:	d009      	beq.n	801a05a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801a046:	4b26      	ldr	r3, [pc, #152]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a04a:	4a2c      	ldr	r2, [pc, #176]	; (801a0fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 801a04c:	4013      	ands	r3, r2
 801a04e:	0019      	movs	r1, r3
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	695a      	ldr	r2, [r3, #20]
 801a054:	4b22      	ldr	r3, [pc, #136]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a056:	430a      	orrs	r2, r1
 801a058:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	2208      	movs	r2, #8
 801a060:	4013      	ands	r3, r2
 801a062:	d009      	beq.n	801a078 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801a064:	4b1e      	ldr	r3, [pc, #120]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a068:	4a25      	ldr	r2, [pc, #148]	; (801a100 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 801a06a:	4013      	ands	r3, r2
 801a06c:	0019      	movs	r1, r3
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	699a      	ldr	r2, [r3, #24]
 801a072:	4b1b      	ldr	r3, [pc, #108]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a074:	430a      	orrs	r2, r1
 801a076:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	681a      	ldr	r2, [r3, #0]
 801a07c:	2380      	movs	r3, #128	; 0x80
 801a07e:	005b      	lsls	r3, r3, #1
 801a080:	4013      	ands	r3, r2
 801a082:	d009      	beq.n	801a098 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801a084:	4b16      	ldr	r3, [pc, #88]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a088:	4a17      	ldr	r2, [pc, #92]	; (801a0e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 801a08a:	4013      	ands	r3, r2
 801a08c:	0019      	movs	r1, r3
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	69da      	ldr	r2, [r3, #28]
 801a092:	4b13      	ldr	r3, [pc, #76]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a094:	430a      	orrs	r2, r1
 801a096:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	2240      	movs	r2, #64	; 0x40
 801a09e:	4013      	ands	r3, r2
 801a0a0:	d009      	beq.n	801a0b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801a0a2:	4b0f      	ldr	r3, [pc, #60]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a0a6:	4a17      	ldr	r2, [pc, #92]	; (801a104 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 801a0a8:	4013      	ands	r3, r2
 801a0aa:	0019      	movs	r1, r3
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a0b0:	4b0b      	ldr	r3, [pc, #44]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a0b2:	430a      	orrs	r2, r1
 801a0b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	2280      	movs	r2, #128	; 0x80
 801a0bc:	4013      	ands	r3, r2
 801a0be:	d009      	beq.n	801a0d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801a0c0:	4b07      	ldr	r3, [pc, #28]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a0c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a0c4:	4a10      	ldr	r2, [pc, #64]	; (801a108 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 801a0c6:	4013      	ands	r3, r2
 801a0c8:	0019      	movs	r1, r3
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	6a1a      	ldr	r2, [r3, #32]
 801a0ce:	4b04      	ldr	r3, [pc, #16]	; (801a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 801a0d0:	430a      	orrs	r2, r1
 801a0d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801a0d4:	2300      	movs	r3, #0
}
 801a0d6:	0018      	movs	r0, r3
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	b006      	add	sp, #24
 801a0dc:	bd80      	pop	{r7, pc}
 801a0de:	46c0      	nop			; (mov r8, r8)
 801a0e0:	40021000 	.word	0x40021000
 801a0e4:	40007000 	.word	0x40007000
 801a0e8:	fffcffff 	.word	0xfffcffff
 801a0ec:	fff7ffff 	.word	0xfff7ffff
 801a0f0:	00001388 	.word	0x00001388
 801a0f4:	ffcfffff 	.word	0xffcfffff
 801a0f8:	efffffff 	.word	0xefffffff
 801a0fc:	fffff3ff 	.word	0xfffff3ff
 801a100:	ffffcfff 	.word	0xffffcfff
 801a104:	fbffffff 	.word	0xfbffffff
 801a108:	fff3ffff 	.word	0xfff3ffff

0801a10c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b082      	sub	sp, #8
 801a110:	af00      	add	r7, sp, #0
 801a112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d101      	bne.n	801a11e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a11a:	2301      	movs	r3, #1
 801a11c:	e032      	b.n	801a184 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2239      	movs	r2, #57	; 0x39
 801a122:	5c9b      	ldrb	r3, [r3, r2]
 801a124:	b2db      	uxtb	r3, r3
 801a126:	2b00      	cmp	r3, #0
 801a128:	d107      	bne.n	801a13a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	2238      	movs	r2, #56	; 0x38
 801a12e:	2100      	movs	r1, #0
 801a130:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	0018      	movs	r0, r3
 801a136:	f000 f829 	bl	801a18c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	2239      	movs	r2, #57	; 0x39
 801a13e:	2102      	movs	r1, #2
 801a140:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	681a      	ldr	r2, [r3, #0]
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	3304      	adds	r3, #4
 801a14a:	0019      	movs	r1, r3
 801a14c:	0010      	movs	r0, r2
 801a14e:	f000 f97f 	bl	801a450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	223e      	movs	r2, #62	; 0x3e
 801a156:	2101      	movs	r1, #1
 801a158:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	223a      	movs	r2, #58	; 0x3a
 801a15e:	2101      	movs	r1, #1
 801a160:	5499      	strb	r1, [r3, r2]
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	223b      	movs	r2, #59	; 0x3b
 801a166:	2101      	movs	r1, #1
 801a168:	5499      	strb	r1, [r3, r2]
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	223c      	movs	r2, #60	; 0x3c
 801a16e:	2101      	movs	r1, #1
 801a170:	5499      	strb	r1, [r3, r2]
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	223d      	movs	r2, #61	; 0x3d
 801a176:	2101      	movs	r1, #1
 801a178:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	2239      	movs	r2, #57	; 0x39
 801a17e:	2101      	movs	r1, #1
 801a180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a182:	2300      	movs	r3, #0
}
 801a184:	0018      	movs	r0, r3
 801a186:	46bd      	mov	sp, r7
 801a188:	b002      	add	sp, #8
 801a18a:	bd80      	pop	{r7, pc}

0801a18c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b082      	sub	sp, #8
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801a194:	46c0      	nop			; (mov r8, r8)
 801a196:	46bd      	mov	sp, r7
 801a198:	b002      	add	sp, #8
 801a19a:	bd80      	pop	{r7, pc}

0801a19c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a19c:	b580      	push	{r7, lr}
 801a19e:	b084      	sub	sp, #16
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	2239      	movs	r2, #57	; 0x39
 801a1a8:	5c9b      	ldrb	r3, [r3, r2]
 801a1aa:	b2db      	uxtb	r3, r3
 801a1ac:	2b01      	cmp	r3, #1
 801a1ae:	d001      	beq.n	801a1b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801a1b0:	2301      	movs	r3, #1
 801a1b2:	e03b      	b.n	801a22c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	2239      	movs	r2, #57	; 0x39
 801a1b8:	2102      	movs	r1, #2
 801a1ba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	68da      	ldr	r2, [r3, #12]
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	2101      	movs	r1, #1
 801a1c8:	430a      	orrs	r2, r1
 801a1ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	681a      	ldr	r2, [r3, #0]
 801a1d0:	2380      	movs	r3, #128	; 0x80
 801a1d2:	05db      	lsls	r3, r3, #23
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	d00e      	beq.n	801a1f6 <HAL_TIM_Base_Start_IT+0x5a>
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	4a15      	ldr	r2, [pc, #84]	; (801a234 <HAL_TIM_Base_Start_IT+0x98>)
 801a1de:	4293      	cmp	r3, r2
 801a1e0:	d009      	beq.n	801a1f6 <HAL_TIM_Base_Start_IT+0x5a>
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	4a14      	ldr	r2, [pc, #80]	; (801a238 <HAL_TIM_Base_Start_IT+0x9c>)
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	d004      	beq.n	801a1f6 <HAL_TIM_Base_Start_IT+0x5a>
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	4a12      	ldr	r2, [pc, #72]	; (801a23c <HAL_TIM_Base_Start_IT+0xa0>)
 801a1f2:	4293      	cmp	r3, r2
 801a1f4:	d111      	bne.n	801a21a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	689b      	ldr	r3, [r3, #8]
 801a1fc:	2207      	movs	r2, #7
 801a1fe:	4013      	ands	r3, r2
 801a200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	2b06      	cmp	r3, #6
 801a206:	d010      	beq.n	801a22a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	681a      	ldr	r2, [r3, #0]
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	2101      	movs	r1, #1
 801a214:	430a      	orrs	r2, r1
 801a216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a218:	e007      	b.n	801a22a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	681a      	ldr	r2, [r3, #0]
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	2101      	movs	r1, #1
 801a226:	430a      	orrs	r2, r1
 801a228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a22a:	2300      	movs	r3, #0
}
 801a22c:	0018      	movs	r0, r3
 801a22e:	46bd      	mov	sp, r7
 801a230:	b004      	add	sp, #16
 801a232:	bd80      	pop	{r7, pc}
 801a234:	40000400 	.word	0x40000400
 801a238:	40010800 	.word	0x40010800
 801a23c:	40011400 	.word	0x40011400

0801a240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b082      	sub	sp, #8
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	691b      	ldr	r3, [r3, #16]
 801a24e:	2202      	movs	r2, #2
 801a250:	4013      	ands	r3, r2
 801a252:	2b02      	cmp	r3, #2
 801a254:	d124      	bne.n	801a2a0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	68db      	ldr	r3, [r3, #12]
 801a25c:	2202      	movs	r2, #2
 801a25e:	4013      	ands	r3, r2
 801a260:	2b02      	cmp	r3, #2
 801a262:	d11d      	bne.n	801a2a0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	2203      	movs	r2, #3
 801a26a:	4252      	negs	r2, r2
 801a26c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	2201      	movs	r2, #1
 801a272:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	699b      	ldr	r3, [r3, #24]
 801a27a:	2203      	movs	r2, #3
 801a27c:	4013      	ands	r3, r2
 801a27e:	d004      	beq.n	801a28a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	0018      	movs	r0, r3
 801a284:	f000 f8cc 	bl	801a420 <HAL_TIM_IC_CaptureCallback>
 801a288:	e007      	b.n	801a29a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	0018      	movs	r0, r3
 801a28e:	f000 f8bf 	bl	801a410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	0018      	movs	r0, r3
 801a296:	f000 f8cb 	bl	801a430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	2200      	movs	r2, #0
 801a29e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	691b      	ldr	r3, [r3, #16]
 801a2a6:	2204      	movs	r2, #4
 801a2a8:	4013      	ands	r3, r2
 801a2aa:	2b04      	cmp	r3, #4
 801a2ac:	d125      	bne.n	801a2fa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	68db      	ldr	r3, [r3, #12]
 801a2b4:	2204      	movs	r2, #4
 801a2b6:	4013      	ands	r3, r2
 801a2b8:	2b04      	cmp	r3, #4
 801a2ba:	d11e      	bne.n	801a2fa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	2205      	movs	r2, #5
 801a2c2:	4252      	negs	r2, r2
 801a2c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	2202      	movs	r2, #2
 801a2ca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	699a      	ldr	r2, [r3, #24]
 801a2d2:	23c0      	movs	r3, #192	; 0xc0
 801a2d4:	009b      	lsls	r3, r3, #2
 801a2d6:	4013      	ands	r3, r2
 801a2d8:	d004      	beq.n	801a2e4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	0018      	movs	r0, r3
 801a2de:	f000 f89f 	bl	801a420 <HAL_TIM_IC_CaptureCallback>
 801a2e2:	e007      	b.n	801a2f4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	0018      	movs	r0, r3
 801a2e8:	f000 f892 	bl	801a410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	0018      	movs	r0, r3
 801a2f0:	f000 f89e 	bl	801a430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	2200      	movs	r2, #0
 801a2f8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	691b      	ldr	r3, [r3, #16]
 801a300:	2208      	movs	r2, #8
 801a302:	4013      	ands	r3, r2
 801a304:	2b08      	cmp	r3, #8
 801a306:	d124      	bne.n	801a352 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	68db      	ldr	r3, [r3, #12]
 801a30e:	2208      	movs	r2, #8
 801a310:	4013      	ands	r3, r2
 801a312:	2b08      	cmp	r3, #8
 801a314:	d11d      	bne.n	801a352 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	2209      	movs	r2, #9
 801a31c:	4252      	negs	r2, r2
 801a31e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	2204      	movs	r2, #4
 801a324:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	69db      	ldr	r3, [r3, #28]
 801a32c:	2203      	movs	r2, #3
 801a32e:	4013      	ands	r3, r2
 801a330:	d004      	beq.n	801a33c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	0018      	movs	r0, r3
 801a336:	f000 f873 	bl	801a420 <HAL_TIM_IC_CaptureCallback>
 801a33a:	e007      	b.n	801a34c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	0018      	movs	r0, r3
 801a340:	f000 f866 	bl	801a410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	0018      	movs	r0, r3
 801a348:	f000 f872 	bl	801a430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	2200      	movs	r2, #0
 801a350:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	691b      	ldr	r3, [r3, #16]
 801a358:	2210      	movs	r2, #16
 801a35a:	4013      	ands	r3, r2
 801a35c:	2b10      	cmp	r3, #16
 801a35e:	d125      	bne.n	801a3ac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	68db      	ldr	r3, [r3, #12]
 801a366:	2210      	movs	r2, #16
 801a368:	4013      	ands	r3, r2
 801a36a:	2b10      	cmp	r3, #16
 801a36c:	d11e      	bne.n	801a3ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	2211      	movs	r2, #17
 801a374:	4252      	negs	r2, r2
 801a376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	2208      	movs	r2, #8
 801a37c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	69da      	ldr	r2, [r3, #28]
 801a384:	23c0      	movs	r3, #192	; 0xc0
 801a386:	009b      	lsls	r3, r3, #2
 801a388:	4013      	ands	r3, r2
 801a38a:	d004      	beq.n	801a396 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	0018      	movs	r0, r3
 801a390:	f000 f846 	bl	801a420 <HAL_TIM_IC_CaptureCallback>
 801a394:	e007      	b.n	801a3a6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	0018      	movs	r0, r3
 801a39a:	f000 f839 	bl	801a410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	0018      	movs	r0, r3
 801a3a2:	f000 f845 	bl	801a430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	2200      	movs	r2, #0
 801a3aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	691b      	ldr	r3, [r3, #16]
 801a3b2:	2201      	movs	r2, #1
 801a3b4:	4013      	ands	r3, r2
 801a3b6:	2b01      	cmp	r3, #1
 801a3b8:	d10f      	bne.n	801a3da <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	68db      	ldr	r3, [r3, #12]
 801a3c0:	2201      	movs	r2, #1
 801a3c2:	4013      	ands	r3, r2
 801a3c4:	2b01      	cmp	r3, #1
 801a3c6:	d108      	bne.n	801a3da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	2202      	movs	r2, #2
 801a3ce:	4252      	negs	r2, r2
 801a3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	0018      	movs	r0, r3
 801a3d6:	f7fe fa0d 	bl	80187f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	691b      	ldr	r3, [r3, #16]
 801a3e0:	2240      	movs	r2, #64	; 0x40
 801a3e2:	4013      	ands	r3, r2
 801a3e4:	2b40      	cmp	r3, #64	; 0x40
 801a3e6:	d10f      	bne.n	801a408 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	68db      	ldr	r3, [r3, #12]
 801a3ee:	2240      	movs	r2, #64	; 0x40
 801a3f0:	4013      	ands	r3, r2
 801a3f2:	2b40      	cmp	r3, #64	; 0x40
 801a3f4:	d108      	bne.n	801a408 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	2241      	movs	r2, #65	; 0x41
 801a3fc:	4252      	negs	r2, r2
 801a3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	0018      	movs	r0, r3
 801a404:	f000 f81c 	bl	801a440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801a408:	46c0      	nop			; (mov r8, r8)
 801a40a:	46bd      	mov	sp, r7
 801a40c:	b002      	add	sp, #8
 801a40e:	bd80      	pop	{r7, pc}

0801a410 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b082      	sub	sp, #8
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801a418:	46c0      	nop			; (mov r8, r8)
 801a41a:	46bd      	mov	sp, r7
 801a41c:	b002      	add	sp, #8
 801a41e:	bd80      	pop	{r7, pc}

0801a420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b082      	sub	sp, #8
 801a424:	af00      	add	r7, sp, #0
 801a426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801a428:	46c0      	nop			; (mov r8, r8)
 801a42a:	46bd      	mov	sp, r7
 801a42c:	b002      	add	sp, #8
 801a42e:	bd80      	pop	{r7, pc}

0801a430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b082      	sub	sp, #8
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801a438:	46c0      	nop			; (mov r8, r8)
 801a43a:	46bd      	mov	sp, r7
 801a43c:	b002      	add	sp, #8
 801a43e:	bd80      	pop	{r7, pc}

0801a440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801a440:	b580      	push	{r7, lr}
 801a442:	b082      	sub	sp, #8
 801a444:	af00      	add	r7, sp, #0
 801a446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801a448:	46c0      	nop			; (mov r8, r8)
 801a44a:	46bd      	mov	sp, r7
 801a44c:	b002      	add	sp, #8
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b084      	sub	sp, #16
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a460:	687a      	ldr	r2, [r7, #4]
 801a462:	2380      	movs	r3, #128	; 0x80
 801a464:	05db      	lsls	r3, r3, #23
 801a466:	429a      	cmp	r2, r3
 801a468:	d00b      	beq.n	801a482 <TIM_Base_SetConfig+0x32>
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	4a23      	ldr	r2, [pc, #140]	; (801a4fc <TIM_Base_SetConfig+0xac>)
 801a46e:	4293      	cmp	r3, r2
 801a470:	d007      	beq.n	801a482 <TIM_Base_SetConfig+0x32>
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	4a22      	ldr	r2, [pc, #136]	; (801a500 <TIM_Base_SetConfig+0xb0>)
 801a476:	4293      	cmp	r3, r2
 801a478:	d003      	beq.n	801a482 <TIM_Base_SetConfig+0x32>
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	4a21      	ldr	r2, [pc, #132]	; (801a504 <TIM_Base_SetConfig+0xb4>)
 801a47e:	4293      	cmp	r3, r2
 801a480:	d108      	bne.n	801a494 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	2270      	movs	r2, #112	; 0x70
 801a486:	4393      	bics	r3, r2
 801a488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a48a:	683b      	ldr	r3, [r7, #0]
 801a48c:	685b      	ldr	r3, [r3, #4]
 801a48e:	68fa      	ldr	r2, [r7, #12]
 801a490:	4313      	orrs	r3, r2
 801a492:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a494:	687a      	ldr	r2, [r7, #4]
 801a496:	2380      	movs	r3, #128	; 0x80
 801a498:	05db      	lsls	r3, r3, #23
 801a49a:	429a      	cmp	r2, r3
 801a49c:	d00b      	beq.n	801a4b6 <TIM_Base_SetConfig+0x66>
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	4a16      	ldr	r2, [pc, #88]	; (801a4fc <TIM_Base_SetConfig+0xac>)
 801a4a2:	4293      	cmp	r3, r2
 801a4a4:	d007      	beq.n	801a4b6 <TIM_Base_SetConfig+0x66>
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	4a15      	ldr	r2, [pc, #84]	; (801a500 <TIM_Base_SetConfig+0xb0>)
 801a4aa:	4293      	cmp	r3, r2
 801a4ac:	d003      	beq.n	801a4b6 <TIM_Base_SetConfig+0x66>
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	4a14      	ldr	r2, [pc, #80]	; (801a504 <TIM_Base_SetConfig+0xb4>)
 801a4b2:	4293      	cmp	r3, r2
 801a4b4:	d108      	bne.n	801a4c8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	4a13      	ldr	r2, [pc, #76]	; (801a508 <TIM_Base_SetConfig+0xb8>)
 801a4ba:	4013      	ands	r3, r2
 801a4bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a4be:	683b      	ldr	r3, [r7, #0]
 801a4c0:	68db      	ldr	r3, [r3, #12]
 801a4c2:	68fa      	ldr	r2, [r7, #12]
 801a4c4:	4313      	orrs	r3, r2
 801a4c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	2280      	movs	r2, #128	; 0x80
 801a4cc:	4393      	bics	r3, r2
 801a4ce:	001a      	movs	r2, r3
 801a4d0:	683b      	ldr	r3, [r7, #0]
 801a4d2:	691b      	ldr	r3, [r3, #16]
 801a4d4:	4313      	orrs	r3, r2
 801a4d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	68fa      	ldr	r2, [r7, #12]
 801a4dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a4de:	683b      	ldr	r3, [r7, #0]
 801a4e0:	689a      	ldr	r2, [r3, #8]
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a4e6:	683b      	ldr	r3, [r7, #0]
 801a4e8:	681a      	ldr	r2, [r3, #0]
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	2201      	movs	r2, #1
 801a4f2:	615a      	str	r2, [r3, #20]
}
 801a4f4:	46c0      	nop			; (mov r8, r8)
 801a4f6:	46bd      	mov	sp, r7
 801a4f8:	b004      	add	sp, #16
 801a4fa:	bd80      	pop	{r7, pc}
 801a4fc:	40000400 	.word	0x40000400
 801a500:	40010800 	.word	0x40010800
 801a504:	40011400 	.word	0x40011400
 801a508:	fffffcff 	.word	0xfffffcff

0801a50c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b082      	sub	sp, #8
 801a510:	af00      	add	r7, sp, #0
 801a512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	2b00      	cmp	r3, #0
 801a518:	d101      	bne.n	801a51e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a51a:	2301      	movs	r3, #1
 801a51c:	e044      	b.n	801a5a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a522:	2b00      	cmp	r3, #0
 801a524:	d107      	bne.n	801a536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	2274      	movs	r2, #116	; 0x74
 801a52a:	2100      	movs	r1, #0
 801a52c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	0018      	movs	r0, r3
 801a532:	f7fe f9b1 	bl	8018898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	2224      	movs	r2, #36	; 0x24
 801a53a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	681a      	ldr	r2, [r3, #0]
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	2101      	movs	r1, #1
 801a548:	438a      	bics	r2, r1
 801a54a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	0018      	movs	r0, r3
 801a550:	f000 f830 	bl	801a5b4 <UART_SetConfig>
 801a554:	0003      	movs	r3, r0
 801a556:	2b01      	cmp	r3, #1
 801a558:	d101      	bne.n	801a55e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801a55a:	2301      	movs	r3, #1
 801a55c:	e024      	b.n	801a5a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a562:	2b00      	cmp	r3, #0
 801a564:	d003      	beq.n	801a56e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	0018      	movs	r0, r3
 801a56a:	f000 fac3 	bl	801aaf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	685a      	ldr	r2, [r3, #4]
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	490d      	ldr	r1, [pc, #52]	; (801a5b0 <HAL_UART_Init+0xa4>)
 801a57a:	400a      	ands	r2, r1
 801a57c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	689a      	ldr	r2, [r3, #8]
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	212a      	movs	r1, #42	; 0x2a
 801a58a:	438a      	bics	r2, r1
 801a58c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	681a      	ldr	r2, [r3, #0]
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	2101      	movs	r1, #1
 801a59a:	430a      	orrs	r2, r1
 801a59c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	0018      	movs	r0, r3
 801a5a2:	f000 fb5b 	bl	801ac5c <UART_CheckIdleState>
 801a5a6:	0003      	movs	r3, r0
}
 801a5a8:	0018      	movs	r0, r3
 801a5aa:	46bd      	mov	sp, r7
 801a5ac:	b002      	add	sp, #8
 801a5ae:	bd80      	pop	{r7, pc}
 801a5b0:	ffffb7ff 	.word	0xffffb7ff

0801a5b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a5b4:	b5b0      	push	{r4, r5, r7, lr}
 801a5b6:	b08e      	sub	sp, #56	; 0x38
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801a5bc:	231a      	movs	r3, #26
 801a5be:	2218      	movs	r2, #24
 801a5c0:	189b      	adds	r3, r3, r2
 801a5c2:	19db      	adds	r3, r3, r7
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801a5c8:	69fb      	ldr	r3, [r7, #28]
 801a5ca:	689a      	ldr	r2, [r3, #8]
 801a5cc:	69fb      	ldr	r3, [r7, #28]
 801a5ce:	691b      	ldr	r3, [r3, #16]
 801a5d0:	431a      	orrs	r2, r3
 801a5d2:	69fb      	ldr	r3, [r7, #28]
 801a5d4:	695b      	ldr	r3, [r3, #20]
 801a5d6:	431a      	orrs	r2, r3
 801a5d8:	69fb      	ldr	r3, [r7, #28]
 801a5da:	69db      	ldr	r3, [r3, #28]
 801a5dc:	4313      	orrs	r3, r2
 801a5de:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801a5e0:	69fb      	ldr	r3, [r7, #28]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	4ac3      	ldr	r2, [pc, #780]	; (801a8f4 <UART_SetConfig+0x340>)
 801a5e8:	4013      	ands	r3, r2
 801a5ea:	0019      	movs	r1, r3
 801a5ec:	69fb      	ldr	r3, [r7, #28]
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a5f2:	430a      	orrs	r2, r1
 801a5f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a5f6:	69fb      	ldr	r3, [r7, #28]
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	685b      	ldr	r3, [r3, #4]
 801a5fc:	4abe      	ldr	r2, [pc, #760]	; (801a8f8 <UART_SetConfig+0x344>)
 801a5fe:	4013      	ands	r3, r2
 801a600:	0019      	movs	r1, r3
 801a602:	69fb      	ldr	r3, [r7, #28]
 801a604:	68da      	ldr	r2, [r3, #12]
 801a606:	69fb      	ldr	r3, [r7, #28]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	430a      	orrs	r2, r1
 801a60c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801a60e:	69fb      	ldr	r3, [r7, #28]
 801a610:	699b      	ldr	r3, [r3, #24]
 801a612:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801a614:	69fb      	ldr	r3, [r7, #28]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	4ab8      	ldr	r2, [pc, #736]	; (801a8fc <UART_SetConfig+0x348>)
 801a61a:	4293      	cmp	r3, r2
 801a61c:	d004      	beq.n	801a628 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801a61e:	69fb      	ldr	r3, [r7, #28]
 801a620:	6a1b      	ldr	r3, [r3, #32]
 801a622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a624:	4313      	orrs	r3, r2
 801a626:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a628:	69fb      	ldr	r3, [r7, #28]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	689b      	ldr	r3, [r3, #8]
 801a62e:	4ab4      	ldr	r2, [pc, #720]	; (801a900 <UART_SetConfig+0x34c>)
 801a630:	4013      	ands	r3, r2
 801a632:	0019      	movs	r1, r3
 801a634:	69fb      	ldr	r3, [r7, #28]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a63a:	430a      	orrs	r2, r1
 801a63c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a63e:	69fb      	ldr	r3, [r7, #28]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	4ab0      	ldr	r2, [pc, #704]	; (801a904 <UART_SetConfig+0x350>)
 801a644:	4293      	cmp	r3, r2
 801a646:	d131      	bne.n	801a6ac <UART_SetConfig+0xf8>
 801a648:	4baf      	ldr	r3, [pc, #700]	; (801a908 <UART_SetConfig+0x354>)
 801a64a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a64c:	2203      	movs	r2, #3
 801a64e:	4013      	ands	r3, r2
 801a650:	2b03      	cmp	r3, #3
 801a652:	d01d      	beq.n	801a690 <UART_SetConfig+0xdc>
 801a654:	d823      	bhi.n	801a69e <UART_SetConfig+0xea>
 801a656:	2b02      	cmp	r3, #2
 801a658:	d00c      	beq.n	801a674 <UART_SetConfig+0xc0>
 801a65a:	d820      	bhi.n	801a69e <UART_SetConfig+0xea>
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d002      	beq.n	801a666 <UART_SetConfig+0xb2>
 801a660:	2b01      	cmp	r3, #1
 801a662:	d00e      	beq.n	801a682 <UART_SetConfig+0xce>
 801a664:	e01b      	b.n	801a69e <UART_SetConfig+0xea>
 801a666:	231b      	movs	r3, #27
 801a668:	2218      	movs	r2, #24
 801a66a:	189b      	adds	r3, r3, r2
 801a66c:	19db      	adds	r3, r3, r7
 801a66e:	2201      	movs	r2, #1
 801a670:	701a      	strb	r2, [r3, #0]
 801a672:	e0b4      	b.n	801a7de <UART_SetConfig+0x22a>
 801a674:	231b      	movs	r3, #27
 801a676:	2218      	movs	r2, #24
 801a678:	189b      	adds	r3, r3, r2
 801a67a:	19db      	adds	r3, r3, r7
 801a67c:	2202      	movs	r2, #2
 801a67e:	701a      	strb	r2, [r3, #0]
 801a680:	e0ad      	b.n	801a7de <UART_SetConfig+0x22a>
 801a682:	231b      	movs	r3, #27
 801a684:	2218      	movs	r2, #24
 801a686:	189b      	adds	r3, r3, r2
 801a688:	19db      	adds	r3, r3, r7
 801a68a:	2204      	movs	r2, #4
 801a68c:	701a      	strb	r2, [r3, #0]
 801a68e:	e0a6      	b.n	801a7de <UART_SetConfig+0x22a>
 801a690:	231b      	movs	r3, #27
 801a692:	2218      	movs	r2, #24
 801a694:	189b      	adds	r3, r3, r2
 801a696:	19db      	adds	r3, r3, r7
 801a698:	2208      	movs	r2, #8
 801a69a:	701a      	strb	r2, [r3, #0]
 801a69c:	e09f      	b.n	801a7de <UART_SetConfig+0x22a>
 801a69e:	231b      	movs	r3, #27
 801a6a0:	2218      	movs	r2, #24
 801a6a2:	189b      	adds	r3, r3, r2
 801a6a4:	19db      	adds	r3, r3, r7
 801a6a6:	2210      	movs	r2, #16
 801a6a8:	701a      	strb	r2, [r3, #0]
 801a6aa:	e098      	b.n	801a7de <UART_SetConfig+0x22a>
 801a6ac:	69fb      	ldr	r3, [r7, #28]
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	4a96      	ldr	r2, [pc, #600]	; (801a90c <UART_SetConfig+0x358>)
 801a6b2:	4293      	cmp	r3, r2
 801a6b4:	d131      	bne.n	801a71a <UART_SetConfig+0x166>
 801a6b6:	4b94      	ldr	r3, [pc, #592]	; (801a908 <UART_SetConfig+0x354>)
 801a6b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a6ba:	220c      	movs	r2, #12
 801a6bc:	4013      	ands	r3, r2
 801a6be:	2b0c      	cmp	r3, #12
 801a6c0:	d01d      	beq.n	801a6fe <UART_SetConfig+0x14a>
 801a6c2:	d823      	bhi.n	801a70c <UART_SetConfig+0x158>
 801a6c4:	2b08      	cmp	r3, #8
 801a6c6:	d00c      	beq.n	801a6e2 <UART_SetConfig+0x12e>
 801a6c8:	d820      	bhi.n	801a70c <UART_SetConfig+0x158>
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d002      	beq.n	801a6d4 <UART_SetConfig+0x120>
 801a6ce:	2b04      	cmp	r3, #4
 801a6d0:	d00e      	beq.n	801a6f0 <UART_SetConfig+0x13c>
 801a6d2:	e01b      	b.n	801a70c <UART_SetConfig+0x158>
 801a6d4:	231b      	movs	r3, #27
 801a6d6:	2218      	movs	r2, #24
 801a6d8:	189b      	adds	r3, r3, r2
 801a6da:	19db      	adds	r3, r3, r7
 801a6dc:	2200      	movs	r2, #0
 801a6de:	701a      	strb	r2, [r3, #0]
 801a6e0:	e07d      	b.n	801a7de <UART_SetConfig+0x22a>
 801a6e2:	231b      	movs	r3, #27
 801a6e4:	2218      	movs	r2, #24
 801a6e6:	189b      	adds	r3, r3, r2
 801a6e8:	19db      	adds	r3, r3, r7
 801a6ea:	2202      	movs	r2, #2
 801a6ec:	701a      	strb	r2, [r3, #0]
 801a6ee:	e076      	b.n	801a7de <UART_SetConfig+0x22a>
 801a6f0:	231b      	movs	r3, #27
 801a6f2:	2218      	movs	r2, #24
 801a6f4:	189b      	adds	r3, r3, r2
 801a6f6:	19db      	adds	r3, r3, r7
 801a6f8:	2204      	movs	r2, #4
 801a6fa:	701a      	strb	r2, [r3, #0]
 801a6fc:	e06f      	b.n	801a7de <UART_SetConfig+0x22a>
 801a6fe:	231b      	movs	r3, #27
 801a700:	2218      	movs	r2, #24
 801a702:	189b      	adds	r3, r3, r2
 801a704:	19db      	adds	r3, r3, r7
 801a706:	2208      	movs	r2, #8
 801a708:	701a      	strb	r2, [r3, #0]
 801a70a:	e068      	b.n	801a7de <UART_SetConfig+0x22a>
 801a70c:	231b      	movs	r3, #27
 801a70e:	2218      	movs	r2, #24
 801a710:	189b      	adds	r3, r3, r2
 801a712:	19db      	adds	r3, r3, r7
 801a714:	2210      	movs	r2, #16
 801a716:	701a      	strb	r2, [r3, #0]
 801a718:	e061      	b.n	801a7de <UART_SetConfig+0x22a>
 801a71a:	69fb      	ldr	r3, [r7, #28]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	4a7c      	ldr	r2, [pc, #496]	; (801a910 <UART_SetConfig+0x35c>)
 801a720:	4293      	cmp	r3, r2
 801a722:	d106      	bne.n	801a732 <UART_SetConfig+0x17e>
 801a724:	231b      	movs	r3, #27
 801a726:	2218      	movs	r2, #24
 801a728:	189b      	adds	r3, r3, r2
 801a72a:	19db      	adds	r3, r3, r7
 801a72c:	2200      	movs	r2, #0
 801a72e:	701a      	strb	r2, [r3, #0]
 801a730:	e055      	b.n	801a7de <UART_SetConfig+0x22a>
 801a732:	69fb      	ldr	r3, [r7, #28]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	4a77      	ldr	r2, [pc, #476]	; (801a914 <UART_SetConfig+0x360>)
 801a738:	4293      	cmp	r3, r2
 801a73a:	d106      	bne.n	801a74a <UART_SetConfig+0x196>
 801a73c:	231b      	movs	r3, #27
 801a73e:	2218      	movs	r2, #24
 801a740:	189b      	adds	r3, r3, r2
 801a742:	19db      	adds	r3, r3, r7
 801a744:	2200      	movs	r2, #0
 801a746:	701a      	strb	r2, [r3, #0]
 801a748:	e049      	b.n	801a7de <UART_SetConfig+0x22a>
 801a74a:	69fb      	ldr	r3, [r7, #28]
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	4a6b      	ldr	r2, [pc, #428]	; (801a8fc <UART_SetConfig+0x348>)
 801a750:	4293      	cmp	r3, r2
 801a752:	d13e      	bne.n	801a7d2 <UART_SetConfig+0x21e>
 801a754:	4b6c      	ldr	r3, [pc, #432]	; (801a908 <UART_SetConfig+0x354>)
 801a756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a758:	23c0      	movs	r3, #192	; 0xc0
 801a75a:	011b      	lsls	r3, r3, #4
 801a75c:	4013      	ands	r3, r2
 801a75e:	22c0      	movs	r2, #192	; 0xc0
 801a760:	0112      	lsls	r2, r2, #4
 801a762:	4293      	cmp	r3, r2
 801a764:	d027      	beq.n	801a7b6 <UART_SetConfig+0x202>
 801a766:	22c0      	movs	r2, #192	; 0xc0
 801a768:	0112      	lsls	r2, r2, #4
 801a76a:	4293      	cmp	r3, r2
 801a76c:	d82a      	bhi.n	801a7c4 <UART_SetConfig+0x210>
 801a76e:	2280      	movs	r2, #128	; 0x80
 801a770:	0112      	lsls	r2, r2, #4
 801a772:	4293      	cmp	r3, r2
 801a774:	d011      	beq.n	801a79a <UART_SetConfig+0x1e6>
 801a776:	2280      	movs	r2, #128	; 0x80
 801a778:	0112      	lsls	r2, r2, #4
 801a77a:	4293      	cmp	r3, r2
 801a77c:	d822      	bhi.n	801a7c4 <UART_SetConfig+0x210>
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d004      	beq.n	801a78c <UART_SetConfig+0x1d8>
 801a782:	2280      	movs	r2, #128	; 0x80
 801a784:	00d2      	lsls	r2, r2, #3
 801a786:	4293      	cmp	r3, r2
 801a788:	d00e      	beq.n	801a7a8 <UART_SetConfig+0x1f4>
 801a78a:	e01b      	b.n	801a7c4 <UART_SetConfig+0x210>
 801a78c:	231b      	movs	r3, #27
 801a78e:	2218      	movs	r2, #24
 801a790:	189b      	adds	r3, r3, r2
 801a792:	19db      	adds	r3, r3, r7
 801a794:	2200      	movs	r2, #0
 801a796:	701a      	strb	r2, [r3, #0]
 801a798:	e021      	b.n	801a7de <UART_SetConfig+0x22a>
 801a79a:	231b      	movs	r3, #27
 801a79c:	2218      	movs	r2, #24
 801a79e:	189b      	adds	r3, r3, r2
 801a7a0:	19db      	adds	r3, r3, r7
 801a7a2:	2202      	movs	r2, #2
 801a7a4:	701a      	strb	r2, [r3, #0]
 801a7a6:	e01a      	b.n	801a7de <UART_SetConfig+0x22a>
 801a7a8:	231b      	movs	r3, #27
 801a7aa:	2218      	movs	r2, #24
 801a7ac:	189b      	adds	r3, r3, r2
 801a7ae:	19db      	adds	r3, r3, r7
 801a7b0:	2204      	movs	r2, #4
 801a7b2:	701a      	strb	r2, [r3, #0]
 801a7b4:	e013      	b.n	801a7de <UART_SetConfig+0x22a>
 801a7b6:	231b      	movs	r3, #27
 801a7b8:	2218      	movs	r2, #24
 801a7ba:	189b      	adds	r3, r3, r2
 801a7bc:	19db      	adds	r3, r3, r7
 801a7be:	2208      	movs	r2, #8
 801a7c0:	701a      	strb	r2, [r3, #0]
 801a7c2:	e00c      	b.n	801a7de <UART_SetConfig+0x22a>
 801a7c4:	231b      	movs	r3, #27
 801a7c6:	2218      	movs	r2, #24
 801a7c8:	189b      	adds	r3, r3, r2
 801a7ca:	19db      	adds	r3, r3, r7
 801a7cc:	2210      	movs	r2, #16
 801a7ce:	701a      	strb	r2, [r3, #0]
 801a7d0:	e005      	b.n	801a7de <UART_SetConfig+0x22a>
 801a7d2:	231b      	movs	r3, #27
 801a7d4:	2218      	movs	r2, #24
 801a7d6:	189b      	adds	r3, r3, r2
 801a7d8:	19db      	adds	r3, r3, r7
 801a7da:	2210      	movs	r2, #16
 801a7dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a7de:	69fb      	ldr	r3, [r7, #28]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	4a46      	ldr	r2, [pc, #280]	; (801a8fc <UART_SetConfig+0x348>)
 801a7e4:	4293      	cmp	r3, r2
 801a7e6:	d000      	beq.n	801a7ea <UART_SetConfig+0x236>
 801a7e8:	e09a      	b.n	801a920 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a7ea:	231b      	movs	r3, #27
 801a7ec:	2218      	movs	r2, #24
 801a7ee:	189b      	adds	r3, r3, r2
 801a7f0:	19db      	adds	r3, r3, r7
 801a7f2:	781b      	ldrb	r3, [r3, #0]
 801a7f4:	2b08      	cmp	r3, #8
 801a7f6:	d01d      	beq.n	801a834 <UART_SetConfig+0x280>
 801a7f8:	dc20      	bgt.n	801a83c <UART_SetConfig+0x288>
 801a7fa:	2b04      	cmp	r3, #4
 801a7fc:	d015      	beq.n	801a82a <UART_SetConfig+0x276>
 801a7fe:	dc1d      	bgt.n	801a83c <UART_SetConfig+0x288>
 801a800:	2b00      	cmp	r3, #0
 801a802:	d002      	beq.n	801a80a <UART_SetConfig+0x256>
 801a804:	2b02      	cmp	r3, #2
 801a806:	d005      	beq.n	801a814 <UART_SetConfig+0x260>
 801a808:	e018      	b.n	801a83c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a80a:	f7ff faad 	bl	8019d68 <HAL_RCC_GetPCLK1Freq>
 801a80e:	0003      	movs	r3, r0
 801a810:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801a812:	e01c      	b.n	801a84e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a814:	4b3c      	ldr	r3, [pc, #240]	; (801a908 <UART_SetConfig+0x354>)
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	2210      	movs	r2, #16
 801a81a:	4013      	ands	r3, r2
 801a81c:	d002      	beq.n	801a824 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a81e:	4b3e      	ldr	r3, [pc, #248]	; (801a918 <UART_SetConfig+0x364>)
 801a820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a822:	e014      	b.n	801a84e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801a824:	4b3d      	ldr	r3, [pc, #244]	; (801a91c <UART_SetConfig+0x368>)
 801a826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801a828:	e011      	b.n	801a84e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a82a:	f7ff f9ed 	bl	8019c08 <HAL_RCC_GetSysClockFreq>
 801a82e:	0003      	movs	r3, r0
 801a830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801a832:	e00c      	b.n	801a84e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a834:	2380      	movs	r3, #128	; 0x80
 801a836:	021b      	lsls	r3, r3, #8
 801a838:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801a83a:	e008      	b.n	801a84e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801a83c:	2300      	movs	r3, #0
 801a83e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801a840:	231a      	movs	r3, #26
 801a842:	2218      	movs	r2, #24
 801a844:	189b      	adds	r3, r3, r2
 801a846:	19db      	adds	r3, r3, r7
 801a848:	2201      	movs	r2, #1
 801a84a:	701a      	strb	r2, [r3, #0]
        break;
 801a84c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a850:	2b00      	cmp	r3, #0
 801a852:	d100      	bne.n	801a856 <UART_SetConfig+0x2a2>
 801a854:	e134      	b.n	801aac0 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801a856:	69fb      	ldr	r3, [r7, #28]
 801a858:	685a      	ldr	r2, [r3, #4]
 801a85a:	0013      	movs	r3, r2
 801a85c:	005b      	lsls	r3, r3, #1
 801a85e:	189b      	adds	r3, r3, r2
 801a860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a862:	429a      	cmp	r2, r3
 801a864:	d305      	bcc.n	801a872 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801a866:	69fb      	ldr	r3, [r7, #28]
 801a868:	685b      	ldr	r3, [r3, #4]
 801a86a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801a86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a86e:	429a      	cmp	r2, r3
 801a870:	d906      	bls.n	801a880 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801a872:	231a      	movs	r3, #26
 801a874:	2218      	movs	r2, #24
 801a876:	189b      	adds	r3, r3, r2
 801a878:	19db      	adds	r3, r3, r7
 801a87a:	2201      	movs	r2, #1
 801a87c:	701a      	strb	r2, [r3, #0]
 801a87e:	e11f      	b.n	801aac0 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801a880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a882:	613b      	str	r3, [r7, #16]
 801a884:	2300      	movs	r3, #0
 801a886:	617b      	str	r3, [r7, #20]
 801a888:	6939      	ldr	r1, [r7, #16]
 801a88a:	697a      	ldr	r2, [r7, #20]
 801a88c:	000b      	movs	r3, r1
 801a88e:	0e1b      	lsrs	r3, r3, #24
 801a890:	0010      	movs	r0, r2
 801a892:	0205      	lsls	r5, r0, #8
 801a894:	431d      	orrs	r5, r3
 801a896:	000b      	movs	r3, r1
 801a898:	021c      	lsls	r4, r3, #8
 801a89a:	69fb      	ldr	r3, [r7, #28]
 801a89c:	685b      	ldr	r3, [r3, #4]
 801a89e:	085b      	lsrs	r3, r3, #1
 801a8a0:	60bb      	str	r3, [r7, #8]
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	60fb      	str	r3, [r7, #12]
 801a8a6:	68b8      	ldr	r0, [r7, #8]
 801a8a8:	68f9      	ldr	r1, [r7, #12]
 801a8aa:	1900      	adds	r0, r0, r4
 801a8ac:	4169      	adcs	r1, r5
 801a8ae:	69fb      	ldr	r3, [r7, #28]
 801a8b0:	685b      	ldr	r3, [r3, #4]
 801a8b2:	603b      	str	r3, [r7, #0]
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	607b      	str	r3, [r7, #4]
 801a8b8:	683a      	ldr	r2, [r7, #0]
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	f7fd fcb0 	bl	8018220 <__aeabi_uldivmod>
 801a8c0:	0002      	movs	r2, r0
 801a8c2:	000b      	movs	r3, r1
 801a8c4:	0013      	movs	r3, r2
 801a8c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a8c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a8ca:	23c0      	movs	r3, #192	; 0xc0
 801a8cc:	009b      	lsls	r3, r3, #2
 801a8ce:	429a      	cmp	r2, r3
 801a8d0:	d309      	bcc.n	801a8e6 <UART_SetConfig+0x332>
 801a8d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a8d4:	2380      	movs	r3, #128	; 0x80
 801a8d6:	035b      	lsls	r3, r3, #13
 801a8d8:	429a      	cmp	r2, r3
 801a8da:	d204      	bcs.n	801a8e6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801a8dc:	69fb      	ldr	r3, [r7, #28]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a8e2:	60da      	str	r2, [r3, #12]
 801a8e4:	e0ec      	b.n	801aac0 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 801a8e6:	231a      	movs	r3, #26
 801a8e8:	2218      	movs	r2, #24
 801a8ea:	189b      	adds	r3, r3, r2
 801a8ec:	19db      	adds	r3, r3, r7
 801a8ee:	2201      	movs	r2, #1
 801a8f0:	701a      	strb	r2, [r3, #0]
 801a8f2:	e0e5      	b.n	801aac0 <UART_SetConfig+0x50c>
 801a8f4:	efff69f3 	.word	0xefff69f3
 801a8f8:	ffffcfff 	.word	0xffffcfff
 801a8fc:	40004800 	.word	0x40004800
 801a900:	fffff4ff 	.word	0xfffff4ff
 801a904:	40013800 	.word	0x40013800
 801a908:	40021000 	.word	0x40021000
 801a90c:	40004400 	.word	0x40004400
 801a910:	40004c00 	.word	0x40004c00
 801a914:	40005000 	.word	0x40005000
 801a918:	003d0900 	.word	0x003d0900
 801a91c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a920:	69fb      	ldr	r3, [r7, #28]
 801a922:	69da      	ldr	r2, [r3, #28]
 801a924:	2380      	movs	r3, #128	; 0x80
 801a926:	021b      	lsls	r3, r3, #8
 801a928:	429a      	cmp	r2, r3
 801a92a:	d000      	beq.n	801a92e <UART_SetConfig+0x37a>
 801a92c:	e071      	b.n	801aa12 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 801a92e:	231b      	movs	r3, #27
 801a930:	2218      	movs	r2, #24
 801a932:	189b      	adds	r3, r3, r2
 801a934:	19db      	adds	r3, r3, r7
 801a936:	781b      	ldrb	r3, [r3, #0]
 801a938:	2b08      	cmp	r3, #8
 801a93a:	d822      	bhi.n	801a982 <UART_SetConfig+0x3ce>
 801a93c:	009a      	lsls	r2, r3, #2
 801a93e:	4b68      	ldr	r3, [pc, #416]	; (801aae0 <UART_SetConfig+0x52c>)
 801a940:	18d3      	adds	r3, r2, r3
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a946:	f7ff fa0f 	bl	8019d68 <HAL_RCC_GetPCLK1Freq>
 801a94a:	0003      	movs	r3, r0
 801a94c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801a94e:	e021      	b.n	801a994 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a950:	f7ff fa20 	bl	8019d94 <HAL_RCC_GetPCLK2Freq>
 801a954:	0003      	movs	r3, r0
 801a956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801a958:	e01c      	b.n	801a994 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a95a:	4b62      	ldr	r3, [pc, #392]	; (801aae4 <UART_SetConfig+0x530>)
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	2210      	movs	r2, #16
 801a960:	4013      	ands	r3, r2
 801a962:	d002      	beq.n	801a96a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a964:	4b60      	ldr	r3, [pc, #384]	; (801aae8 <UART_SetConfig+0x534>)
 801a966:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a968:	e014      	b.n	801a994 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801a96a:	4b60      	ldr	r3, [pc, #384]	; (801aaec <UART_SetConfig+0x538>)
 801a96c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801a96e:	e011      	b.n	801a994 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a970:	f7ff f94a 	bl	8019c08 <HAL_RCC_GetSysClockFreq>
 801a974:	0003      	movs	r3, r0
 801a976:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801a978:	e00c      	b.n	801a994 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a97a:	2380      	movs	r3, #128	; 0x80
 801a97c:	021b      	lsls	r3, r3, #8
 801a97e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801a980:	e008      	b.n	801a994 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801a982:	2300      	movs	r3, #0
 801a984:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801a986:	231a      	movs	r3, #26
 801a988:	2218      	movs	r2, #24
 801a98a:	189b      	adds	r3, r3, r2
 801a98c:	19db      	adds	r3, r3, r7
 801a98e:	2201      	movs	r2, #1
 801a990:	701a      	strb	r2, [r3, #0]
        break;
 801a992:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a996:	2b00      	cmp	r3, #0
 801a998:	d100      	bne.n	801a99c <UART_SetConfig+0x3e8>
 801a99a:	e091      	b.n	801aac0 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a99e:	005a      	lsls	r2, r3, #1
 801a9a0:	69fb      	ldr	r3, [r7, #28]
 801a9a2:	685b      	ldr	r3, [r3, #4]
 801a9a4:	085b      	lsrs	r3, r3, #1
 801a9a6:	18d2      	adds	r2, r2, r3
 801a9a8:	69fb      	ldr	r3, [r7, #28]
 801a9aa:	685b      	ldr	r3, [r3, #4]
 801a9ac:	0019      	movs	r1, r3
 801a9ae:	0010      	movs	r0, r2
 801a9b0:	f7fd fbaa 	bl	8018108 <__udivsi3>
 801a9b4:	0003      	movs	r3, r0
 801a9b6:	b29b      	uxth	r3, r3
 801a9b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9bc:	2b0f      	cmp	r3, #15
 801a9be:	d921      	bls.n	801aa04 <UART_SetConfig+0x450>
 801a9c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a9c2:	2380      	movs	r3, #128	; 0x80
 801a9c4:	025b      	lsls	r3, r3, #9
 801a9c6:	429a      	cmp	r2, r3
 801a9c8:	d21c      	bcs.n	801aa04 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9cc:	b29a      	uxth	r2, r3
 801a9ce:	200e      	movs	r0, #14
 801a9d0:	2418      	movs	r4, #24
 801a9d2:	1903      	adds	r3, r0, r4
 801a9d4:	19db      	adds	r3, r3, r7
 801a9d6:	210f      	movs	r1, #15
 801a9d8:	438a      	bics	r2, r1
 801a9da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9de:	085b      	lsrs	r3, r3, #1
 801a9e0:	b29b      	uxth	r3, r3
 801a9e2:	2207      	movs	r2, #7
 801a9e4:	4013      	ands	r3, r2
 801a9e6:	b299      	uxth	r1, r3
 801a9e8:	1903      	adds	r3, r0, r4
 801a9ea:	19db      	adds	r3, r3, r7
 801a9ec:	1902      	adds	r2, r0, r4
 801a9ee:	19d2      	adds	r2, r2, r7
 801a9f0:	8812      	ldrh	r2, [r2, #0]
 801a9f2:	430a      	orrs	r2, r1
 801a9f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801a9f6:	69fb      	ldr	r3, [r7, #28]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	1902      	adds	r2, r0, r4
 801a9fc:	19d2      	adds	r2, r2, r7
 801a9fe:	8812      	ldrh	r2, [r2, #0]
 801aa00:	60da      	str	r2, [r3, #12]
 801aa02:	e05d      	b.n	801aac0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 801aa04:	231a      	movs	r3, #26
 801aa06:	2218      	movs	r2, #24
 801aa08:	189b      	adds	r3, r3, r2
 801aa0a:	19db      	adds	r3, r3, r7
 801aa0c:	2201      	movs	r2, #1
 801aa0e:	701a      	strb	r2, [r3, #0]
 801aa10:	e056      	b.n	801aac0 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801aa12:	231b      	movs	r3, #27
 801aa14:	2218      	movs	r2, #24
 801aa16:	189b      	adds	r3, r3, r2
 801aa18:	19db      	adds	r3, r3, r7
 801aa1a:	781b      	ldrb	r3, [r3, #0]
 801aa1c:	2b08      	cmp	r3, #8
 801aa1e:	d822      	bhi.n	801aa66 <UART_SetConfig+0x4b2>
 801aa20:	009a      	lsls	r2, r3, #2
 801aa22:	4b33      	ldr	r3, [pc, #204]	; (801aaf0 <UART_SetConfig+0x53c>)
 801aa24:	18d3      	adds	r3, r2, r3
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801aa2a:	f7ff f99d 	bl	8019d68 <HAL_RCC_GetPCLK1Freq>
 801aa2e:	0003      	movs	r3, r0
 801aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801aa32:	e021      	b.n	801aa78 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801aa34:	f7ff f9ae 	bl	8019d94 <HAL_RCC_GetPCLK2Freq>
 801aa38:	0003      	movs	r3, r0
 801aa3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801aa3c:	e01c      	b.n	801aa78 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801aa3e:	4b29      	ldr	r3, [pc, #164]	; (801aae4 <UART_SetConfig+0x530>)
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	2210      	movs	r2, #16
 801aa44:	4013      	ands	r3, r2
 801aa46:	d002      	beq.n	801aa4e <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801aa48:	4b27      	ldr	r3, [pc, #156]	; (801aae8 <UART_SetConfig+0x534>)
 801aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801aa4c:	e014      	b.n	801aa78 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 801aa4e:	4b27      	ldr	r3, [pc, #156]	; (801aaec <UART_SetConfig+0x538>)
 801aa50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801aa52:	e011      	b.n	801aa78 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801aa54:	f7ff f8d8 	bl	8019c08 <HAL_RCC_GetSysClockFreq>
 801aa58:	0003      	movs	r3, r0
 801aa5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801aa5c:	e00c      	b.n	801aa78 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801aa5e:	2380      	movs	r3, #128	; 0x80
 801aa60:	021b      	lsls	r3, r3, #8
 801aa62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801aa64:	e008      	b.n	801aa78 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 801aa66:	2300      	movs	r3, #0
 801aa68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801aa6a:	231a      	movs	r3, #26
 801aa6c:	2218      	movs	r2, #24
 801aa6e:	189b      	adds	r3, r3, r2
 801aa70:	19db      	adds	r3, r3, r7
 801aa72:	2201      	movs	r2, #1
 801aa74:	701a      	strb	r2, [r3, #0]
        break;
 801aa76:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 801aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d020      	beq.n	801aac0 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801aa7e:	69fb      	ldr	r3, [r7, #28]
 801aa80:	685b      	ldr	r3, [r3, #4]
 801aa82:	085a      	lsrs	r2, r3, #1
 801aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa86:	18d2      	adds	r2, r2, r3
 801aa88:	69fb      	ldr	r3, [r7, #28]
 801aa8a:	685b      	ldr	r3, [r3, #4]
 801aa8c:	0019      	movs	r1, r3
 801aa8e:	0010      	movs	r0, r2
 801aa90:	f7fd fb3a 	bl	8018108 <__udivsi3>
 801aa94:	0003      	movs	r3, r0
 801aa96:	b29b      	uxth	r3, r3
 801aa98:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa9c:	2b0f      	cmp	r3, #15
 801aa9e:	d909      	bls.n	801aab4 <UART_SetConfig+0x500>
 801aaa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aaa2:	2380      	movs	r3, #128	; 0x80
 801aaa4:	025b      	lsls	r3, r3, #9
 801aaa6:	429a      	cmp	r2, r3
 801aaa8:	d204      	bcs.n	801aab4 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 801aaaa:	69fb      	ldr	r3, [r7, #28]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aab0:	60da      	str	r2, [r3, #12]
 801aab2:	e005      	b.n	801aac0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 801aab4:	231a      	movs	r3, #26
 801aab6:	2218      	movs	r2, #24
 801aab8:	189b      	adds	r3, r3, r2
 801aaba:	19db      	adds	r3, r3, r7
 801aabc:	2201      	movs	r2, #1
 801aabe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801aac0:	69fb      	ldr	r3, [r7, #28]
 801aac2:	2200      	movs	r2, #0
 801aac4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 801aac6:	69fb      	ldr	r3, [r7, #28]
 801aac8:	2200      	movs	r2, #0
 801aaca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 801aacc:	231a      	movs	r3, #26
 801aace:	2218      	movs	r2, #24
 801aad0:	189b      	adds	r3, r3, r2
 801aad2:	19db      	adds	r3, r3, r7
 801aad4:	781b      	ldrb	r3, [r3, #0]
}
 801aad6:	0018      	movs	r0, r3
 801aad8:	46bd      	mov	sp, r7
 801aada:	b00e      	add	sp, #56	; 0x38
 801aadc:	bdb0      	pop	{r4, r5, r7, pc}
 801aade:	46c0      	nop			; (mov r8, r8)
 801aae0:	0801d65c 	.word	0x0801d65c
 801aae4:	40021000 	.word	0x40021000
 801aae8:	003d0900 	.word	0x003d0900
 801aaec:	00f42400 	.word	0x00f42400
 801aaf0:	0801d680 	.word	0x0801d680

0801aaf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b082      	sub	sp, #8
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab00:	2201      	movs	r2, #1
 801ab02:	4013      	ands	r3, r2
 801ab04:	d00b      	beq.n	801ab1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	685b      	ldr	r3, [r3, #4]
 801ab0c:	4a4a      	ldr	r2, [pc, #296]	; (801ac38 <UART_AdvFeatureConfig+0x144>)
 801ab0e:	4013      	ands	r3, r2
 801ab10:	0019      	movs	r1, r3
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	430a      	orrs	r2, r1
 801ab1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab22:	2202      	movs	r2, #2
 801ab24:	4013      	ands	r3, r2
 801ab26:	d00b      	beq.n	801ab40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	685b      	ldr	r3, [r3, #4]
 801ab2e:	4a43      	ldr	r2, [pc, #268]	; (801ac3c <UART_AdvFeatureConfig+0x148>)
 801ab30:	4013      	ands	r3, r2
 801ab32:	0019      	movs	r1, r3
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	430a      	orrs	r2, r1
 801ab3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab44:	2204      	movs	r2, #4
 801ab46:	4013      	ands	r3, r2
 801ab48:	d00b      	beq.n	801ab62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	685b      	ldr	r3, [r3, #4]
 801ab50:	4a3b      	ldr	r2, [pc, #236]	; (801ac40 <UART_AdvFeatureConfig+0x14c>)
 801ab52:	4013      	ands	r3, r2
 801ab54:	0019      	movs	r1, r3
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	430a      	orrs	r2, r1
 801ab60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab66:	2208      	movs	r2, #8
 801ab68:	4013      	ands	r3, r2
 801ab6a:	d00b      	beq.n	801ab84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	685b      	ldr	r3, [r3, #4]
 801ab72:	4a34      	ldr	r2, [pc, #208]	; (801ac44 <UART_AdvFeatureConfig+0x150>)
 801ab74:	4013      	ands	r3, r2
 801ab76:	0019      	movs	r1, r3
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	430a      	orrs	r2, r1
 801ab82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab88:	2210      	movs	r2, #16
 801ab8a:	4013      	ands	r3, r2
 801ab8c:	d00b      	beq.n	801aba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	689b      	ldr	r3, [r3, #8]
 801ab94:	4a2c      	ldr	r2, [pc, #176]	; (801ac48 <UART_AdvFeatureConfig+0x154>)
 801ab96:	4013      	ands	r3, r2
 801ab98:	0019      	movs	r1, r3
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	430a      	orrs	r2, r1
 801aba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abaa:	2220      	movs	r2, #32
 801abac:	4013      	ands	r3, r2
 801abae:	d00b      	beq.n	801abc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	689b      	ldr	r3, [r3, #8]
 801abb6:	4a25      	ldr	r2, [pc, #148]	; (801ac4c <UART_AdvFeatureConfig+0x158>)
 801abb8:	4013      	ands	r3, r2
 801abba:	0019      	movs	r1, r3
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	430a      	orrs	r2, r1
 801abc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abcc:	2240      	movs	r2, #64	; 0x40
 801abce:	4013      	ands	r3, r2
 801abd0:	d01d      	beq.n	801ac0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	685b      	ldr	r3, [r3, #4]
 801abd8:	4a1d      	ldr	r2, [pc, #116]	; (801ac50 <UART_AdvFeatureConfig+0x15c>)
 801abda:	4013      	ands	r3, r2
 801abdc:	0019      	movs	r1, r3
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	430a      	orrs	r2, r1
 801abe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801abee:	2380      	movs	r3, #128	; 0x80
 801abf0:	035b      	lsls	r3, r3, #13
 801abf2:	429a      	cmp	r2, r3
 801abf4:	d10b      	bne.n	801ac0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	685b      	ldr	r3, [r3, #4]
 801abfc:	4a15      	ldr	r2, [pc, #84]	; (801ac54 <UART_AdvFeatureConfig+0x160>)
 801abfe:	4013      	ands	r3, r2
 801ac00:	0019      	movs	r1, r3
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	430a      	orrs	r2, r1
 801ac0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac12:	2280      	movs	r2, #128	; 0x80
 801ac14:	4013      	ands	r3, r2
 801ac16:	d00b      	beq.n	801ac30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	685b      	ldr	r3, [r3, #4]
 801ac1e:	4a0e      	ldr	r2, [pc, #56]	; (801ac58 <UART_AdvFeatureConfig+0x164>)
 801ac20:	4013      	ands	r3, r2
 801ac22:	0019      	movs	r1, r3
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	430a      	orrs	r2, r1
 801ac2e:	605a      	str	r2, [r3, #4]
  }
}
 801ac30:	46c0      	nop			; (mov r8, r8)
 801ac32:	46bd      	mov	sp, r7
 801ac34:	b002      	add	sp, #8
 801ac36:	bd80      	pop	{r7, pc}
 801ac38:	fffdffff 	.word	0xfffdffff
 801ac3c:	fffeffff 	.word	0xfffeffff
 801ac40:	fffbffff 	.word	0xfffbffff
 801ac44:	ffff7fff 	.word	0xffff7fff
 801ac48:	ffffefff 	.word	0xffffefff
 801ac4c:	ffffdfff 	.word	0xffffdfff
 801ac50:	ffefffff 	.word	0xffefffff
 801ac54:	ff9fffff 	.word	0xff9fffff
 801ac58:	fff7ffff 	.word	0xfff7ffff

0801ac5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801ac5c:	b580      	push	{r7, lr}
 801ac5e:	b086      	sub	sp, #24
 801ac60:	af02      	add	r7, sp, #8
 801ac62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	2280      	movs	r2, #128	; 0x80
 801ac68:	2100      	movs	r1, #0
 801ac6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801ac6c:	f7fd ff62 	bl	8018b34 <HAL_GetTick>
 801ac70:	0003      	movs	r3, r0
 801ac72:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	2208      	movs	r2, #8
 801ac7c:	4013      	ands	r3, r2
 801ac7e:	2b08      	cmp	r3, #8
 801ac80:	d10c      	bne.n	801ac9c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	2280      	movs	r2, #128	; 0x80
 801ac86:	0391      	lsls	r1, r2, #14
 801ac88:	6878      	ldr	r0, [r7, #4]
 801ac8a:	4a17      	ldr	r2, [pc, #92]	; (801ace8 <UART_CheckIdleState+0x8c>)
 801ac8c:	9200      	str	r2, [sp, #0]
 801ac8e:	2200      	movs	r2, #0
 801ac90:	f000 f82c 	bl	801acec <UART_WaitOnFlagUntilTimeout>
 801ac94:	1e03      	subs	r3, r0, #0
 801ac96:	d001      	beq.n	801ac9c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ac98:	2303      	movs	r3, #3
 801ac9a:	e021      	b.n	801ace0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	2204      	movs	r2, #4
 801aca4:	4013      	ands	r3, r2
 801aca6:	2b04      	cmp	r3, #4
 801aca8:	d10c      	bne.n	801acc4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	2280      	movs	r2, #128	; 0x80
 801acae:	03d1      	lsls	r1, r2, #15
 801acb0:	6878      	ldr	r0, [r7, #4]
 801acb2:	4a0d      	ldr	r2, [pc, #52]	; (801ace8 <UART_CheckIdleState+0x8c>)
 801acb4:	9200      	str	r2, [sp, #0]
 801acb6:	2200      	movs	r2, #0
 801acb8:	f000 f818 	bl	801acec <UART_WaitOnFlagUntilTimeout>
 801acbc:	1e03      	subs	r3, r0, #0
 801acbe:	d001      	beq.n	801acc4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801acc0:	2303      	movs	r3, #3
 801acc2:	e00d      	b.n	801ace0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	2220      	movs	r2, #32
 801acc8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	2220      	movs	r2, #32
 801acce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	2200      	movs	r2, #0
 801acd4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	2274      	movs	r2, #116	; 0x74
 801acda:	2100      	movs	r1, #0
 801acdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801acde:	2300      	movs	r3, #0
}
 801ace0:	0018      	movs	r0, r3
 801ace2:	46bd      	mov	sp, r7
 801ace4:	b004      	add	sp, #16
 801ace6:	bd80      	pop	{r7, pc}
 801ace8:	01ffffff 	.word	0x01ffffff

0801acec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801acec:	b580      	push	{r7, lr}
 801acee:	b094      	sub	sp, #80	; 0x50
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	60f8      	str	r0, [r7, #12]
 801acf4:	60b9      	str	r1, [r7, #8]
 801acf6:	603b      	str	r3, [r7, #0]
 801acf8:	1dfb      	adds	r3, r7, #7
 801acfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801acfc:	e0a3      	b.n	801ae46 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801acfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ad00:	3301      	adds	r3, #1
 801ad02:	d100      	bne.n	801ad06 <UART_WaitOnFlagUntilTimeout+0x1a>
 801ad04:	e09f      	b.n	801ae46 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ad06:	f7fd ff15 	bl	8018b34 <HAL_GetTick>
 801ad0a:	0002      	movs	r2, r0
 801ad0c:	683b      	ldr	r3, [r7, #0]
 801ad0e:	1ad3      	subs	r3, r2, r3
 801ad10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d302      	bcc.n	801ad1c <UART_WaitOnFlagUntilTimeout+0x30>
 801ad16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d13d      	bne.n	801ad98 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad1c:	f3ef 8310 	mrs	r3, PRIMASK
 801ad20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 801ad22:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801ad24:	647b      	str	r3, [r7, #68]	; 0x44
 801ad26:	2301      	movs	r3, #1
 801ad28:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad2c:	f383 8810 	msr	PRIMASK, r3
}
 801ad30:	46c0      	nop			; (mov r8, r8)
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	681a      	ldr	r2, [r3, #0]
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	494c      	ldr	r1, [pc, #304]	; (801ae70 <UART_WaitOnFlagUntilTimeout+0x184>)
 801ad3e:	400a      	ands	r2, r1
 801ad40:	601a      	str	r2, [r3, #0]
 801ad42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ad44:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad48:	f383 8810 	msr	PRIMASK, r3
}
 801ad4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad4e:	f3ef 8310 	mrs	r3, PRIMASK
 801ad52:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 801ad54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ad56:	643b      	str	r3, [r7, #64]	; 0x40
 801ad58:	2301      	movs	r3, #1
 801ad5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad5e:	f383 8810 	msr	PRIMASK, r3
}
 801ad62:	46c0      	nop			; (mov r8, r8)
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	689a      	ldr	r2, [r3, #8]
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	2101      	movs	r1, #1
 801ad70:	438a      	bics	r2, r1
 801ad72:	609a      	str	r2, [r3, #8]
 801ad74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ad76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad7a:	f383 8810 	msr	PRIMASK, r3
}
 801ad7e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	2220      	movs	r2, #32
 801ad84:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 801ad86:	68fb      	ldr	r3, [r7, #12]
 801ad88:	2220      	movs	r2, #32
 801ad8a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	2274      	movs	r2, #116	; 0x74
 801ad90:	2100      	movs	r1, #0
 801ad92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801ad94:	2303      	movs	r3, #3
 801ad96:	e067      	b.n	801ae68 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	2204      	movs	r2, #4
 801ada0:	4013      	ands	r3, r2
 801ada2:	d050      	beq.n	801ae46 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	69da      	ldr	r2, [r3, #28]
 801adaa:	2380      	movs	r3, #128	; 0x80
 801adac:	011b      	lsls	r3, r3, #4
 801adae:	401a      	ands	r2, r3
 801adb0:	2380      	movs	r3, #128	; 0x80
 801adb2:	011b      	lsls	r3, r3, #4
 801adb4:	429a      	cmp	r2, r3
 801adb6:	d146      	bne.n	801ae46 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	2280      	movs	r2, #128	; 0x80
 801adbe:	0112      	lsls	r2, r2, #4
 801adc0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adc2:	f3ef 8310 	mrs	r3, PRIMASK
 801adc6:	613b      	str	r3, [r7, #16]
  return(result);
 801adc8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801adca:	64fb      	str	r3, [r7, #76]	; 0x4c
 801adcc:	2301      	movs	r3, #1
 801adce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801add0:	697b      	ldr	r3, [r7, #20]
 801add2:	f383 8810 	msr	PRIMASK, r3
}
 801add6:	46c0      	nop			; (mov r8, r8)
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	681a      	ldr	r2, [r3, #0]
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	4923      	ldr	r1, [pc, #140]	; (801ae70 <UART_WaitOnFlagUntilTimeout+0x184>)
 801ade4:	400a      	ands	r2, r1
 801ade6:	601a      	str	r2, [r3, #0]
 801ade8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801adea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adec:	69bb      	ldr	r3, [r7, #24]
 801adee:	f383 8810 	msr	PRIMASK, r3
}
 801adf2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adf4:	f3ef 8310 	mrs	r3, PRIMASK
 801adf8:	61fb      	str	r3, [r7, #28]
  return(result);
 801adfa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801adfc:	64bb      	str	r3, [r7, #72]	; 0x48
 801adfe:	2301      	movs	r3, #1
 801ae00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae02:	6a3b      	ldr	r3, [r7, #32]
 801ae04:	f383 8810 	msr	PRIMASK, r3
}
 801ae08:	46c0      	nop			; (mov r8, r8)
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	689a      	ldr	r2, [r3, #8]
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	2101      	movs	r1, #1
 801ae16:	438a      	bics	r2, r1
 801ae18:	609a      	str	r2, [r3, #8]
 801ae1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae20:	f383 8810 	msr	PRIMASK, r3
}
 801ae24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	2220      	movs	r2, #32
 801ae2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	2220      	movs	r2, #32
 801ae30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	2280      	movs	r2, #128	; 0x80
 801ae36:	2120      	movs	r1, #32
 801ae38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	2274      	movs	r2, #116	; 0x74
 801ae3e:	2100      	movs	r1, #0
 801ae40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801ae42:	2303      	movs	r3, #3
 801ae44:	e010      	b.n	801ae68 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	69db      	ldr	r3, [r3, #28]
 801ae4c:	68ba      	ldr	r2, [r7, #8]
 801ae4e:	4013      	ands	r3, r2
 801ae50:	68ba      	ldr	r2, [r7, #8]
 801ae52:	1ad3      	subs	r3, r2, r3
 801ae54:	425a      	negs	r2, r3
 801ae56:	4153      	adcs	r3, r2
 801ae58:	b2db      	uxtb	r3, r3
 801ae5a:	001a      	movs	r2, r3
 801ae5c:	1dfb      	adds	r3, r7, #7
 801ae5e:	781b      	ldrb	r3, [r3, #0]
 801ae60:	429a      	cmp	r2, r3
 801ae62:	d100      	bne.n	801ae66 <UART_WaitOnFlagUntilTimeout+0x17a>
 801ae64:	e74b      	b.n	801acfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ae66:	2300      	movs	r3, #0
}
 801ae68:	0018      	movs	r0, r3
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	b014      	add	sp, #80	; 0x50
 801ae6e:	bd80      	pop	{r7, pc}
 801ae70:	fffffe5f 	.word	0xfffffe5f

0801ae74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801ae74:	b580      	push	{r7, lr}
 801ae76:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801ae78:	46c0      	nop			; (mov r8, r8)
 801ae7a:	46bd      	mov	sp, r7
 801ae7c:	bd80      	pop	{r7, pc}
	...

0801ae80 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b084      	sub	sp, #16
 801ae84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ae86:	f3ef 8305 	mrs	r3, IPSR
 801ae8a:	60bb      	str	r3, [r7, #8]
  return(result);
 801ae8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d109      	bne.n	801aea6 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae92:	f3ef 8310 	mrs	r3, PRIMASK
 801ae96:	607b      	str	r3, [r7, #4]
  return(result);
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d007      	beq.n	801aeae <osKernelInitialize+0x2e>
 801ae9e:	4b0d      	ldr	r3, [pc, #52]	; (801aed4 <osKernelInitialize+0x54>)
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	2b02      	cmp	r3, #2
 801aea4:	d103      	bne.n	801aeae <osKernelInitialize+0x2e>
    stat = osErrorISR;
 801aea6:	2306      	movs	r3, #6
 801aea8:	425b      	negs	r3, r3
 801aeaa:	60fb      	str	r3, [r7, #12]
 801aeac:	e00c      	b.n	801aec8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 801aeae:	4b09      	ldr	r3, [pc, #36]	; (801aed4 <osKernelInitialize+0x54>)
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d105      	bne.n	801aec2 <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801aeb6:	4b07      	ldr	r3, [pc, #28]	; (801aed4 <osKernelInitialize+0x54>)
 801aeb8:	2201      	movs	r2, #1
 801aeba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801aebc:	2300      	movs	r3, #0
 801aebe:	60fb      	str	r3, [r7, #12]
 801aec0:	e002      	b.n	801aec8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 801aec2:	2301      	movs	r3, #1
 801aec4:	425b      	negs	r3, r3
 801aec6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801aec8:	68fb      	ldr	r3, [r7, #12]
}
 801aeca:	0018      	movs	r0, r3
 801aecc:	46bd      	mov	sp, r7
 801aece:	b004      	add	sp, #16
 801aed0:	bd80      	pop	{r7, pc}
 801aed2:	46c0      	nop			; (mov r8, r8)
 801aed4:	200004c4 	.word	0x200004c4

0801aed8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b084      	sub	sp, #16
 801aedc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801aede:	f3ef 8305 	mrs	r3, IPSR
 801aee2:	60bb      	str	r3, [r7, #8]
  return(result);
 801aee4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d109      	bne.n	801aefe <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aeea:	f3ef 8310 	mrs	r3, PRIMASK
 801aeee:	607b      	str	r3, [r7, #4]
  return(result);
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d007      	beq.n	801af06 <osKernelStart+0x2e>
 801aef6:	4b0f      	ldr	r3, [pc, #60]	; (801af34 <osKernelStart+0x5c>)
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	2b02      	cmp	r3, #2
 801aefc:	d103      	bne.n	801af06 <osKernelStart+0x2e>
    stat = osErrorISR;
 801aefe:	2306      	movs	r3, #6
 801af00:	425b      	negs	r3, r3
 801af02:	60fb      	str	r3, [r7, #12]
 801af04:	e010      	b.n	801af28 <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 801af06:	4b0b      	ldr	r3, [pc, #44]	; (801af34 <osKernelStart+0x5c>)
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	2b01      	cmp	r3, #1
 801af0c:	d109      	bne.n	801af22 <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801af0e:	f7ff ffb1 	bl	801ae74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801af12:	4b08      	ldr	r3, [pc, #32]	; (801af34 <osKernelStart+0x5c>)
 801af14:	2202      	movs	r2, #2
 801af16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801af18:	f000 ff9c 	bl	801be54 <vTaskStartScheduler>
      stat = osOK;
 801af1c:	2300      	movs	r3, #0
 801af1e:	60fb      	str	r3, [r7, #12]
 801af20:	e002      	b.n	801af28 <osKernelStart+0x50>
    } else {
      stat = osError;
 801af22:	2301      	movs	r3, #1
 801af24:	425b      	negs	r3, r3
 801af26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801af28:	68fb      	ldr	r3, [r7, #12]
}
 801af2a:	0018      	movs	r0, r3
 801af2c:	46bd      	mov	sp, r7
 801af2e:	b004      	add	sp, #16
 801af30:	bd80      	pop	{r7, pc}
 801af32:	46c0      	nop			; (mov r8, r8)
 801af34:	200004c4 	.word	0x200004c4

0801af38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801af38:	b5b0      	push	{r4, r5, r7, lr}
 801af3a:	b090      	sub	sp, #64	; 0x40
 801af3c:	af04      	add	r7, sp, #16
 801af3e:	60f8      	str	r0, [r7, #12]
 801af40:	60b9      	str	r1, [r7, #8]
 801af42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801af44:	2300      	movs	r3, #0
 801af46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801af48:	f3ef 8305 	mrs	r3, IPSR
 801af4c:	61fb      	str	r3, [r7, #28]
  return(result);
 801af4e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801af50:	2b00      	cmp	r3, #0
 801af52:	d000      	beq.n	801af56 <osThreadNew+0x1e>
 801af54:	e08c      	b.n	801b070 <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af56:	f3ef 8310 	mrs	r3, PRIMASK
 801af5a:	61bb      	str	r3, [r7, #24]
  return(result);
 801af5c:	69bb      	ldr	r3, [r7, #24]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d004      	beq.n	801af6c <osThreadNew+0x34>
 801af62:	4b46      	ldr	r3, [pc, #280]	; (801b07c <osThreadNew+0x144>)
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	2b02      	cmp	r3, #2
 801af68:	d100      	bne.n	801af6c <osThreadNew+0x34>
 801af6a:	e081      	b.n	801b070 <osThreadNew+0x138>
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d100      	bne.n	801af74 <osThreadNew+0x3c>
 801af72:	e07d      	b.n	801b070 <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 801af74:	2380      	movs	r3, #128	; 0x80
 801af76:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801af78:	2318      	movs	r3, #24
 801af7a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801af7c:	2300      	movs	r3, #0
 801af7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801af80:	2301      	movs	r3, #1
 801af82:	425b      	negs	r3, r3
 801af84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d044      	beq.n	801b016 <osThreadNew+0xde>
      if (attr->name != NULL) {
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	2b00      	cmp	r3, #0
 801af92:	d002      	beq.n	801af9a <osThreadNew+0x62>
        name = attr->name;
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	699b      	ldr	r3, [r3, #24]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d002      	beq.n	801afa8 <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	699b      	ldr	r3, [r3, #24]
 801afa6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d007      	beq.n	801afbe <osThreadNew+0x86>
 801afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afb0:	2b38      	cmp	r3, #56	; 0x38
 801afb2:	d804      	bhi.n	801afbe <osThreadNew+0x86>
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	685b      	ldr	r3, [r3, #4]
 801afb8:	2201      	movs	r2, #1
 801afba:	4013      	ands	r3, r2
 801afbc:	d001      	beq.n	801afc2 <osThreadNew+0x8a>
        return (NULL);
 801afbe:	2300      	movs	r3, #0
 801afc0:	e057      	b.n	801b072 <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	695b      	ldr	r3, [r3, #20]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d003      	beq.n	801afd2 <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	695b      	ldr	r3, [r3, #20]
 801afce:	089b      	lsrs	r3, r3, #2
 801afd0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	689b      	ldr	r3, [r3, #8]
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d00e      	beq.n	801aff8 <osThreadNew+0xc0>
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	68db      	ldr	r3, [r3, #12]
 801afde:	2bbb      	cmp	r3, #187	; 0xbb
 801afe0:	d90a      	bls.n	801aff8 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d006      	beq.n	801aff8 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	695b      	ldr	r3, [r3, #20]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d002      	beq.n	801aff8 <osThreadNew+0xc0>
        mem = 1;
 801aff2:	2301      	movs	r3, #1
 801aff4:	623b      	str	r3, [r7, #32]
 801aff6:	e010      	b.n	801b01a <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	689b      	ldr	r3, [r3, #8]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d10c      	bne.n	801b01a <osThreadNew+0xe2>
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	68db      	ldr	r3, [r3, #12]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d108      	bne.n	801b01a <osThreadNew+0xe2>
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	691b      	ldr	r3, [r3, #16]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d104      	bne.n	801b01a <osThreadNew+0xe2>
          mem = 0;
 801b010:	2300      	movs	r3, #0
 801b012:	623b      	str	r3, [r7, #32]
 801b014:	e001      	b.n	801b01a <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 801b016:	2300      	movs	r3, #0
 801b018:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801b01a:	6a3b      	ldr	r3, [r7, #32]
 801b01c:	2b01      	cmp	r3, #1
 801b01e:	d112      	bne.n	801b046 <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801b028:	68bd      	ldr	r5, [r7, #8]
 801b02a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801b02c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b02e:	68f8      	ldr	r0, [r7, #12]
 801b030:	9302      	str	r3, [sp, #8]
 801b032:	9201      	str	r2, [sp, #4]
 801b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b036:	9300      	str	r3, [sp, #0]
 801b038:	002b      	movs	r3, r5
 801b03a:	0022      	movs	r2, r4
 801b03c:	f000 fd4b 	bl	801bad6 <xTaskCreateStatic>
 801b040:	0003      	movs	r3, r0
 801b042:	617b      	str	r3, [r7, #20]
 801b044:	e014      	b.n	801b070 <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 801b046:	6a3b      	ldr	r3, [r7, #32]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d111      	bne.n	801b070 <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b04e:	b29a      	uxth	r2, r3
 801b050:	68bc      	ldr	r4, [r7, #8]
 801b052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b054:	68f8      	ldr	r0, [r7, #12]
 801b056:	2314      	movs	r3, #20
 801b058:	18fb      	adds	r3, r7, r3
 801b05a:	9301      	str	r3, [sp, #4]
 801b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b05e:	9300      	str	r3, [sp, #0]
 801b060:	0023      	movs	r3, r4
 801b062:	f000 fd7c 	bl	801bb5e <xTaskCreate>
 801b066:	0003      	movs	r3, r0
 801b068:	2b01      	cmp	r3, #1
 801b06a:	d001      	beq.n	801b070 <osThreadNew+0x138>
          hTask = NULL;
 801b06c:	2300      	movs	r3, #0
 801b06e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801b070:	697b      	ldr	r3, [r7, #20]
}
 801b072:	0018      	movs	r0, r3
 801b074:	46bd      	mov	sp, r7
 801b076:	b00c      	add	sp, #48	; 0x30
 801b078:	bdb0      	pop	{r4, r5, r7, pc}
 801b07a:	46c0      	nop			; (mov r8, r8)
 801b07c:	200004c4 	.word	0x200004c4

0801b080 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 801b080:	b580      	push	{r7, lr}
 801b082:	b086      	sub	sp, #24
 801b084:	af00      	add	r7, sp, #0
 801b086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b088:	f3ef 8305 	mrs	r3, IPSR
 801b08c:	613b      	str	r3, [r7, #16]
  return(result);
 801b08e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801b090:	2b00      	cmp	r3, #0
 801b092:	d109      	bne.n	801b0a8 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b094:	f3ef 8310 	mrs	r3, PRIMASK
 801b098:	60fb      	str	r3, [r7, #12]
  return(result);
 801b09a:	68fb      	ldr	r3, [r7, #12]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d007      	beq.n	801b0b0 <osDelay+0x30>
 801b0a0:	4b0a      	ldr	r3, [pc, #40]	; (801b0cc <osDelay+0x4c>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	2b02      	cmp	r3, #2
 801b0a6:	d103      	bne.n	801b0b0 <osDelay+0x30>
    stat = osErrorISR;
 801b0a8:	2306      	movs	r3, #6
 801b0aa:	425b      	negs	r3, r3
 801b0ac:	617b      	str	r3, [r7, #20]
 801b0ae:	e008      	b.n	801b0c2 <osDelay+0x42>
  }
  else {
    stat = osOK;
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d003      	beq.n	801b0c2 <osDelay+0x42>
      vTaskDelay(ticks);
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	0018      	movs	r0, r3
 801b0be:	f000 fea3 	bl	801be08 <vTaskDelay>
    }
  }

  return (stat);
 801b0c2:	697b      	ldr	r3, [r7, #20]
}
 801b0c4:	0018      	movs	r0, r3
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	b006      	add	sp, #24
 801b0ca:	bd80      	pop	{r7, pc}
 801b0cc:	200004c4 	.word	0x200004c4

0801b0d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801b0d0:	b580      	push	{r7, lr}
 801b0d2:	b084      	sub	sp, #16
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	60f8      	str	r0, [r7, #12]
 801b0d8:	60b9      	str	r1, [r7, #8]
 801b0da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	4a06      	ldr	r2, [pc, #24]	; (801b0f8 <vApplicationGetIdleTaskMemory+0x28>)
 801b0e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801b0e2:	68bb      	ldr	r3, [r7, #8]
 801b0e4:	4a05      	ldr	r2, [pc, #20]	; (801b0fc <vApplicationGetIdleTaskMemory+0x2c>)
 801b0e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	2280      	movs	r2, #128	; 0x80
 801b0ec:	601a      	str	r2, [r3, #0]
}
 801b0ee:	46c0      	nop			; (mov r8, r8)
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	b004      	add	sp, #16
 801b0f4:	bd80      	pop	{r7, pc}
 801b0f6:	46c0      	nop			; (mov r8, r8)
 801b0f8:	200004c8 	.word	0x200004c8
 801b0fc:	20000584 	.word	0x20000584

0801b100 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801b100:	b580      	push	{r7, lr}
 801b102:	b084      	sub	sp, #16
 801b104:	af00      	add	r7, sp, #0
 801b106:	60f8      	str	r0, [r7, #12]
 801b108:	60b9      	str	r1, [r7, #8]
 801b10a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	4a06      	ldr	r2, [pc, #24]	; (801b128 <vApplicationGetTimerTaskMemory+0x28>)
 801b110:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801b112:	68bb      	ldr	r3, [r7, #8]
 801b114:	4a05      	ldr	r2, [pc, #20]	; (801b12c <vApplicationGetTimerTaskMemory+0x2c>)
 801b116:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	2280      	movs	r2, #128	; 0x80
 801b11c:	0052      	lsls	r2, r2, #1
 801b11e:	601a      	str	r2, [r3, #0]
}
 801b120:	46c0      	nop			; (mov r8, r8)
 801b122:	46bd      	mov	sp, r7
 801b124:	b004      	add	sp, #16
 801b126:	bd80      	pop	{r7, pc}
 801b128:	20000784 	.word	0x20000784
 801b12c:	20000840 	.word	0x20000840

0801b130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801b130:	b580      	push	{r7, lr}
 801b132:	b082      	sub	sp, #8
 801b134:	af00      	add	r7, sp, #0
 801b136:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	3308      	adds	r3, #8
 801b13c:	001a      	movs	r2, r3
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	2201      	movs	r2, #1
 801b146:	4252      	negs	r2, r2
 801b148:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	3308      	adds	r3, #8
 801b14e:	001a      	movs	r2, r3
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	3308      	adds	r3, #8
 801b158:	001a      	movs	r2, r3
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	2200      	movs	r2, #0
 801b162:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801b164:	46c0      	nop			; (mov r8, r8)
 801b166:	46bd      	mov	sp, r7
 801b168:	b002      	add	sp, #8
 801b16a:	bd80      	pop	{r7, pc}

0801b16c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b082      	sub	sp, #8
 801b170:	af00      	add	r7, sp, #0
 801b172:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	2200      	movs	r2, #0
 801b178:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801b17a:	46c0      	nop			; (mov r8, r8)
 801b17c:	46bd      	mov	sp, r7
 801b17e:	b002      	add	sp, #8
 801b180:	bd80      	pop	{r7, pc}

0801b182 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801b182:	b580      	push	{r7, lr}
 801b184:	b084      	sub	sp, #16
 801b186:	af00      	add	r7, sp, #0
 801b188:	6078      	str	r0, [r7, #4]
 801b18a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	685b      	ldr	r3, [r3, #4]
 801b190:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	68fa      	ldr	r2, [r7, #12]
 801b196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	689a      	ldr	r2, [r3, #8]
 801b19c:	683b      	ldr	r3, [r7, #0]
 801b19e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	689b      	ldr	r3, [r3, #8]
 801b1a4:	683a      	ldr	r2, [r7, #0]
 801b1a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801b1a8:	68fb      	ldr	r3, [r7, #12]
 801b1aa:	683a      	ldr	r2, [r7, #0]
 801b1ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801b1ae:	683b      	ldr	r3, [r7, #0]
 801b1b0:	687a      	ldr	r2, [r7, #4]
 801b1b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	1c5a      	adds	r2, r3, #1
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	601a      	str	r2, [r3, #0]
}
 801b1be:	46c0      	nop			; (mov r8, r8)
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	b004      	add	sp, #16
 801b1c4:	bd80      	pop	{r7, pc}

0801b1c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801b1c6:	b580      	push	{r7, lr}
 801b1c8:	b084      	sub	sp, #16
 801b1ca:	af00      	add	r7, sp, #0
 801b1cc:	6078      	str	r0, [r7, #4]
 801b1ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801b1d0:	683b      	ldr	r3, [r7, #0]
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801b1d6:	68bb      	ldr	r3, [r7, #8]
 801b1d8:	3301      	adds	r3, #1
 801b1da:	d103      	bne.n	801b1e4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	691b      	ldr	r3, [r3, #16]
 801b1e0:	60fb      	str	r3, [r7, #12]
 801b1e2:	e00c      	b.n	801b1fe <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	3308      	adds	r3, #8
 801b1e8:	60fb      	str	r3, [r7, #12]
 801b1ea:	e002      	b.n	801b1f2 <vListInsert+0x2c>
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	685b      	ldr	r3, [r3, #4]
 801b1f0:	60fb      	str	r3, [r7, #12]
 801b1f2:	68fb      	ldr	r3, [r7, #12]
 801b1f4:	685b      	ldr	r3, [r3, #4]
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	68ba      	ldr	r2, [r7, #8]
 801b1fa:	429a      	cmp	r2, r3
 801b1fc:	d2f6      	bcs.n	801b1ec <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801b1fe:	68fb      	ldr	r3, [r7, #12]
 801b200:	685a      	ldr	r2, [r3, #4]
 801b202:	683b      	ldr	r3, [r7, #0]
 801b204:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801b206:	683b      	ldr	r3, [r7, #0]
 801b208:	685b      	ldr	r3, [r3, #4]
 801b20a:	683a      	ldr	r2, [r7, #0]
 801b20c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	68fa      	ldr	r2, [r7, #12]
 801b212:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	683a      	ldr	r2, [r7, #0]
 801b218:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801b21a:	683b      	ldr	r3, [r7, #0]
 801b21c:	687a      	ldr	r2, [r7, #4]
 801b21e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	1c5a      	adds	r2, r3, #1
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	601a      	str	r2, [r3, #0]
}
 801b22a:	46c0      	nop			; (mov r8, r8)
 801b22c:	46bd      	mov	sp, r7
 801b22e:	b004      	add	sp, #16
 801b230:	bd80      	pop	{r7, pc}

0801b232 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801b232:	b580      	push	{r7, lr}
 801b234:	b084      	sub	sp, #16
 801b236:	af00      	add	r7, sp, #0
 801b238:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	691b      	ldr	r3, [r3, #16]
 801b23e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	685b      	ldr	r3, [r3, #4]
 801b244:	687a      	ldr	r2, [r7, #4]
 801b246:	6892      	ldr	r2, [r2, #8]
 801b248:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	689b      	ldr	r3, [r3, #8]
 801b24e:	687a      	ldr	r2, [r7, #4]
 801b250:	6852      	ldr	r2, [r2, #4]
 801b252:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	685b      	ldr	r3, [r3, #4]
 801b258:	687a      	ldr	r2, [r7, #4]
 801b25a:	429a      	cmp	r2, r3
 801b25c:	d103      	bne.n	801b266 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	689a      	ldr	r2, [r3, #8]
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	2200      	movs	r2, #0
 801b26a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	1e5a      	subs	r2, r3, #1
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	681b      	ldr	r3, [r3, #0]
}
 801b27a:	0018      	movs	r0, r3
 801b27c:	46bd      	mov	sp, r7
 801b27e:	b004      	add	sp, #16
 801b280:	bd80      	pop	{r7, pc}

0801b282 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801b282:	b580      	push	{r7, lr}
 801b284:	b084      	sub	sp, #16
 801b286:	af00      	add	r7, sp, #0
 801b288:	6078      	str	r0, [r7, #4]
 801b28a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	2b00      	cmp	r3, #0
 801b294:	d101      	bne.n	801b29a <xQueueGenericReset+0x18>
 801b296:	b672      	cpsid	i
 801b298:	e7fe      	b.n	801b298 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 801b29a:	f001 fe41 	bl	801cf20 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	681a      	ldr	r2, [r3, #0]
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2aa:	434b      	muls	r3, r1
 801b2ac:	18d2      	adds	r2, r2, r3
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	2200      	movs	r2, #0
 801b2b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801b2b8:	68fb      	ldr	r3, [r7, #12]
 801b2ba:	681a      	ldr	r2, [r3, #0]
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	681a      	ldr	r2, [r3, #0]
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2c8:	1e59      	subs	r1, r3, #1
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2ce:	434b      	muls	r3, r1
 801b2d0:	18d2      	adds	r2, r2, r3
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	2244      	movs	r2, #68	; 0x44
 801b2da:	21ff      	movs	r1, #255	; 0xff
 801b2dc:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 801b2de:	68fb      	ldr	r3, [r7, #12]
 801b2e0:	2245      	movs	r2, #69	; 0x45
 801b2e2:	21ff      	movs	r1, #255	; 0xff
 801b2e4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 801b2e6:	683b      	ldr	r3, [r7, #0]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d10d      	bne.n	801b308 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	691b      	ldr	r3, [r3, #16]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d013      	beq.n	801b31c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	3310      	adds	r3, #16
 801b2f8:	0018      	movs	r0, r3
 801b2fa:	f000 fffd 	bl	801c2f8 <xTaskRemoveFromEventList>
 801b2fe:	1e03      	subs	r3, r0, #0
 801b300:	d00c      	beq.n	801b31c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801b302:	f001 fdfd 	bl	801cf00 <vPortYield>
 801b306:	e009      	b.n	801b31c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	3310      	adds	r3, #16
 801b30c:	0018      	movs	r0, r3
 801b30e:	f7ff ff0f 	bl	801b130 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	3324      	adds	r3, #36	; 0x24
 801b316:	0018      	movs	r0, r3
 801b318:	f7ff ff0a 	bl	801b130 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801b31c:	f001 fe12 	bl	801cf44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801b320:	2301      	movs	r3, #1
}
 801b322:	0018      	movs	r0, r3
 801b324:	46bd      	mov	sp, r7
 801b326:	b004      	add	sp, #16
 801b328:	bd80      	pop	{r7, pc}

0801b32a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801b32a:	b590      	push	{r4, r7, lr}
 801b32c:	b089      	sub	sp, #36	; 0x24
 801b32e:	af02      	add	r7, sp, #8
 801b330:	60f8      	str	r0, [r7, #12]
 801b332:	60b9      	str	r1, [r7, #8]
 801b334:	607a      	str	r2, [r7, #4]
 801b336:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d101      	bne.n	801b342 <xQueueGenericCreateStatic+0x18>
 801b33e:	b672      	cpsid	i
 801b340:	e7fe      	b.n	801b340 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801b342:	683b      	ldr	r3, [r7, #0]
 801b344:	2b00      	cmp	r3, #0
 801b346:	d101      	bne.n	801b34c <xQueueGenericCreateStatic+0x22>
 801b348:	b672      	cpsid	i
 801b34a:	e7fe      	b.n	801b34a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d002      	beq.n	801b358 <xQueueGenericCreateStatic+0x2e>
 801b352:	68bb      	ldr	r3, [r7, #8]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d001      	beq.n	801b35c <xQueueGenericCreateStatic+0x32>
 801b358:	2301      	movs	r3, #1
 801b35a:	e000      	b.n	801b35e <xQueueGenericCreateStatic+0x34>
 801b35c:	2300      	movs	r3, #0
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d101      	bne.n	801b366 <xQueueGenericCreateStatic+0x3c>
 801b362:	b672      	cpsid	i
 801b364:	e7fe      	b.n	801b364 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d102      	bne.n	801b372 <xQueueGenericCreateStatic+0x48>
 801b36c:	68bb      	ldr	r3, [r7, #8]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d101      	bne.n	801b376 <xQueueGenericCreateStatic+0x4c>
 801b372:	2301      	movs	r3, #1
 801b374:	e000      	b.n	801b378 <xQueueGenericCreateStatic+0x4e>
 801b376:	2300      	movs	r3, #0
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d101      	bne.n	801b380 <xQueueGenericCreateStatic+0x56>
 801b37c:	b672      	cpsid	i
 801b37e:	e7fe      	b.n	801b37e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801b380:	2350      	movs	r3, #80	; 0x50
 801b382:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801b384:	693b      	ldr	r3, [r7, #16]
 801b386:	2b50      	cmp	r3, #80	; 0x50
 801b388:	d001      	beq.n	801b38e <xQueueGenericCreateStatic+0x64>
 801b38a:	b672      	cpsid	i
 801b38c:	e7fe      	b.n	801b38c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801b38e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801b390:	683b      	ldr	r3, [r7, #0]
 801b392:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801b394:	697b      	ldr	r3, [r7, #20]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d00e      	beq.n	801b3b8 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801b39a:	697b      	ldr	r3, [r7, #20]
 801b39c:	2246      	movs	r2, #70	; 0x46
 801b39e:	2101      	movs	r1, #1
 801b3a0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801b3a2:	2328      	movs	r3, #40	; 0x28
 801b3a4:	18fb      	adds	r3, r7, r3
 801b3a6:	781c      	ldrb	r4, [r3, #0]
 801b3a8:	687a      	ldr	r2, [r7, #4]
 801b3aa:	68b9      	ldr	r1, [r7, #8]
 801b3ac:	68f8      	ldr	r0, [r7, #12]
 801b3ae:	697b      	ldr	r3, [r7, #20]
 801b3b0:	9300      	str	r3, [sp, #0]
 801b3b2:	0023      	movs	r3, r4
 801b3b4:	f000 f805 	bl	801b3c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801b3b8:	697b      	ldr	r3, [r7, #20]
	}
 801b3ba:	0018      	movs	r0, r3
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	b007      	add	sp, #28
 801b3c0:	bd90      	pop	{r4, r7, pc}

0801b3c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801b3c2:	b580      	push	{r7, lr}
 801b3c4:	b084      	sub	sp, #16
 801b3c6:	af00      	add	r7, sp, #0
 801b3c8:	60f8      	str	r0, [r7, #12]
 801b3ca:	60b9      	str	r1, [r7, #8]
 801b3cc:	607a      	str	r2, [r7, #4]
 801b3ce:	001a      	movs	r2, r3
 801b3d0:	1cfb      	adds	r3, r7, #3
 801b3d2:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801b3d4:	68bb      	ldr	r3, [r7, #8]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d103      	bne.n	801b3e2 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801b3da:	69bb      	ldr	r3, [r7, #24]
 801b3dc:	69ba      	ldr	r2, [r7, #24]
 801b3de:	601a      	str	r2, [r3, #0]
 801b3e0:	e002      	b.n	801b3e8 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801b3e2:	69bb      	ldr	r3, [r7, #24]
 801b3e4:	687a      	ldr	r2, [r7, #4]
 801b3e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801b3e8:	69bb      	ldr	r3, [r7, #24]
 801b3ea:	68fa      	ldr	r2, [r7, #12]
 801b3ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801b3ee:	69bb      	ldr	r3, [r7, #24]
 801b3f0:	68ba      	ldr	r2, [r7, #8]
 801b3f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801b3f4:	69bb      	ldr	r3, [r7, #24]
 801b3f6:	2101      	movs	r1, #1
 801b3f8:	0018      	movs	r0, r3
 801b3fa:	f7ff ff42 	bl	801b282 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801b3fe:	69bb      	ldr	r3, [r7, #24]
 801b400:	1cfa      	adds	r2, r7, #3
 801b402:	214c      	movs	r1, #76	; 0x4c
 801b404:	7812      	ldrb	r2, [r2, #0]
 801b406:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801b408:	46c0      	nop			; (mov r8, r8)
 801b40a:	46bd      	mov	sp, r7
 801b40c:	b004      	add	sp, #16
 801b40e:	bd80      	pop	{r7, pc}

0801b410 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801b410:	b580      	push	{r7, lr}
 801b412:	b08a      	sub	sp, #40	; 0x28
 801b414:	af00      	add	r7, sp, #0
 801b416:	60f8      	str	r0, [r7, #12]
 801b418:	60b9      	str	r1, [r7, #8]
 801b41a:	607a      	str	r2, [r7, #4]
 801b41c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801b41e:	2300      	movs	r3, #0
 801b420:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801b422:	68fb      	ldr	r3, [r7, #12]
 801b424:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801b426:	6a3b      	ldr	r3, [r7, #32]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d101      	bne.n	801b430 <xQueueGenericSend+0x20>
 801b42c:	b672      	cpsid	i
 801b42e:	e7fe      	b.n	801b42e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801b430:	68bb      	ldr	r3, [r7, #8]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d103      	bne.n	801b43e <xQueueGenericSend+0x2e>
 801b436:	6a3b      	ldr	r3, [r7, #32]
 801b438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d101      	bne.n	801b442 <xQueueGenericSend+0x32>
 801b43e:	2301      	movs	r3, #1
 801b440:	e000      	b.n	801b444 <xQueueGenericSend+0x34>
 801b442:	2300      	movs	r3, #0
 801b444:	2b00      	cmp	r3, #0
 801b446:	d101      	bne.n	801b44c <xQueueGenericSend+0x3c>
 801b448:	b672      	cpsid	i
 801b44a:	e7fe      	b.n	801b44a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801b44c:	683b      	ldr	r3, [r7, #0]
 801b44e:	2b02      	cmp	r3, #2
 801b450:	d103      	bne.n	801b45a <xQueueGenericSend+0x4a>
 801b452:	6a3b      	ldr	r3, [r7, #32]
 801b454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b456:	2b01      	cmp	r3, #1
 801b458:	d101      	bne.n	801b45e <xQueueGenericSend+0x4e>
 801b45a:	2301      	movs	r3, #1
 801b45c:	e000      	b.n	801b460 <xQueueGenericSend+0x50>
 801b45e:	2300      	movs	r3, #0
 801b460:	2b00      	cmp	r3, #0
 801b462:	d101      	bne.n	801b468 <xQueueGenericSend+0x58>
 801b464:	b672      	cpsid	i
 801b466:	e7fe      	b.n	801b466 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801b468:	f001 f8de 	bl	801c628 <xTaskGetSchedulerState>
 801b46c:	1e03      	subs	r3, r0, #0
 801b46e:	d102      	bne.n	801b476 <xQueueGenericSend+0x66>
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d101      	bne.n	801b47a <xQueueGenericSend+0x6a>
 801b476:	2301      	movs	r3, #1
 801b478:	e000      	b.n	801b47c <xQueueGenericSend+0x6c>
 801b47a:	2300      	movs	r3, #0
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d101      	bne.n	801b484 <xQueueGenericSend+0x74>
 801b480:	b672      	cpsid	i
 801b482:	e7fe      	b.n	801b482 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801b484:	f001 fd4c 	bl	801cf20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801b488:	6a3b      	ldr	r3, [r7, #32]
 801b48a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b48c:	6a3b      	ldr	r3, [r7, #32]
 801b48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b490:	429a      	cmp	r2, r3
 801b492:	d302      	bcc.n	801b49a <xQueueGenericSend+0x8a>
 801b494:	683b      	ldr	r3, [r7, #0]
 801b496:	2b02      	cmp	r3, #2
 801b498:	d11e      	bne.n	801b4d8 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801b49a:	683a      	ldr	r2, [r7, #0]
 801b49c:	68b9      	ldr	r1, [r7, #8]
 801b49e:	6a3b      	ldr	r3, [r7, #32]
 801b4a0:	0018      	movs	r0, r3
 801b4a2:	f000 f99f 	bl	801b7e4 <prvCopyDataToQueue>
 801b4a6:	0003      	movs	r3, r0
 801b4a8:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801b4aa:	6a3b      	ldr	r3, [r7, #32]
 801b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d009      	beq.n	801b4c6 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801b4b2:	6a3b      	ldr	r3, [r7, #32]
 801b4b4:	3324      	adds	r3, #36	; 0x24
 801b4b6:	0018      	movs	r0, r3
 801b4b8:	f000 ff1e 	bl	801c2f8 <xTaskRemoveFromEventList>
 801b4bc:	1e03      	subs	r3, r0, #0
 801b4be:	d007      	beq.n	801b4d0 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801b4c0:	f001 fd1e 	bl	801cf00 <vPortYield>
 801b4c4:	e004      	b.n	801b4d0 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801b4c6:	69fb      	ldr	r3, [r7, #28]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d001      	beq.n	801b4d0 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801b4cc:	f001 fd18 	bl	801cf00 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801b4d0:	f001 fd38 	bl	801cf44 <vPortExitCritical>
				return pdPASS;
 801b4d4:	2301      	movs	r3, #1
 801b4d6:	e05b      	b.n	801b590 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d103      	bne.n	801b4e6 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801b4de:	f001 fd31 	bl	801cf44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	e054      	b.n	801b590 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 801b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d106      	bne.n	801b4fa <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801b4ec:	2314      	movs	r3, #20
 801b4ee:	18fb      	adds	r3, r7, r3
 801b4f0:	0018      	movs	r0, r3
 801b4f2:	f000 ff5d 	bl	801c3b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801b4f6:	2301      	movs	r3, #1
 801b4f8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801b4fa:	f001 fd23 	bl	801cf44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801b4fe:	f000 fd07 	bl	801bf10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801b502:	f001 fd0d 	bl	801cf20 <vPortEnterCritical>
 801b506:	6a3b      	ldr	r3, [r7, #32]
 801b508:	2244      	movs	r2, #68	; 0x44
 801b50a:	5c9b      	ldrb	r3, [r3, r2]
 801b50c:	b25b      	sxtb	r3, r3
 801b50e:	3301      	adds	r3, #1
 801b510:	d103      	bne.n	801b51a <xQueueGenericSend+0x10a>
 801b512:	6a3b      	ldr	r3, [r7, #32]
 801b514:	2244      	movs	r2, #68	; 0x44
 801b516:	2100      	movs	r1, #0
 801b518:	5499      	strb	r1, [r3, r2]
 801b51a:	6a3b      	ldr	r3, [r7, #32]
 801b51c:	2245      	movs	r2, #69	; 0x45
 801b51e:	5c9b      	ldrb	r3, [r3, r2]
 801b520:	b25b      	sxtb	r3, r3
 801b522:	3301      	adds	r3, #1
 801b524:	d103      	bne.n	801b52e <xQueueGenericSend+0x11e>
 801b526:	6a3b      	ldr	r3, [r7, #32]
 801b528:	2245      	movs	r2, #69	; 0x45
 801b52a:	2100      	movs	r1, #0
 801b52c:	5499      	strb	r1, [r3, r2]
 801b52e:	f001 fd09 	bl	801cf44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801b532:	1d3a      	adds	r2, r7, #4
 801b534:	2314      	movs	r3, #20
 801b536:	18fb      	adds	r3, r7, r3
 801b538:	0011      	movs	r1, r2
 801b53a:	0018      	movs	r0, r3
 801b53c:	f000 ff4c 	bl	801c3d8 <xTaskCheckForTimeOut>
 801b540:	1e03      	subs	r3, r0, #0
 801b542:	d11e      	bne.n	801b582 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801b544:	6a3b      	ldr	r3, [r7, #32]
 801b546:	0018      	movs	r0, r3
 801b548:	f000 fa51 	bl	801b9ee <prvIsQueueFull>
 801b54c:	1e03      	subs	r3, r0, #0
 801b54e:	d011      	beq.n	801b574 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801b550:	6a3b      	ldr	r3, [r7, #32]
 801b552:	3310      	adds	r3, #16
 801b554:	687a      	ldr	r2, [r7, #4]
 801b556:	0011      	movs	r1, r2
 801b558:	0018      	movs	r0, r3
 801b55a:	f000 fe89 	bl	801c270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801b55e:	6a3b      	ldr	r3, [r7, #32]
 801b560:	0018      	movs	r0, r3
 801b562:	f000 f9d0 	bl	801b906 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801b566:	f000 fcdf 	bl	801bf28 <xTaskResumeAll>
 801b56a:	1e03      	subs	r3, r0, #0
 801b56c:	d18a      	bne.n	801b484 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 801b56e:	f001 fcc7 	bl	801cf00 <vPortYield>
 801b572:	e787      	b.n	801b484 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801b574:	6a3b      	ldr	r3, [r7, #32]
 801b576:	0018      	movs	r0, r3
 801b578:	f000 f9c5 	bl	801b906 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801b57c:	f000 fcd4 	bl	801bf28 <xTaskResumeAll>
 801b580:	e780      	b.n	801b484 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801b582:	6a3b      	ldr	r3, [r7, #32]
 801b584:	0018      	movs	r0, r3
 801b586:	f000 f9be 	bl	801b906 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801b58a:	f000 fccd 	bl	801bf28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801b58e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801b590:	0018      	movs	r0, r3
 801b592:	46bd      	mov	sp, r7
 801b594:	b00a      	add	sp, #40	; 0x28
 801b596:	bd80      	pop	{r7, pc}

0801b598 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801b598:	b590      	push	{r4, r7, lr}
 801b59a:	b089      	sub	sp, #36	; 0x24
 801b59c:	af00      	add	r7, sp, #0
 801b59e:	60f8      	str	r0, [r7, #12]
 801b5a0:	60b9      	str	r1, [r7, #8]
 801b5a2:	607a      	str	r2, [r7, #4]
 801b5a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 801b5aa:	69bb      	ldr	r3, [r7, #24]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d101      	bne.n	801b5b4 <xQueueGenericSendFromISR+0x1c>
 801b5b0:	b672      	cpsid	i
 801b5b2:	e7fe      	b.n	801b5b2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801b5b4:	68bb      	ldr	r3, [r7, #8]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d103      	bne.n	801b5c2 <xQueueGenericSendFromISR+0x2a>
 801b5ba:	69bb      	ldr	r3, [r7, #24]
 801b5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d101      	bne.n	801b5c6 <xQueueGenericSendFromISR+0x2e>
 801b5c2:	2301      	movs	r3, #1
 801b5c4:	e000      	b.n	801b5c8 <xQueueGenericSendFromISR+0x30>
 801b5c6:	2300      	movs	r3, #0
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d101      	bne.n	801b5d0 <xQueueGenericSendFromISR+0x38>
 801b5cc:	b672      	cpsid	i
 801b5ce:	e7fe      	b.n	801b5ce <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801b5d0:	683b      	ldr	r3, [r7, #0]
 801b5d2:	2b02      	cmp	r3, #2
 801b5d4:	d103      	bne.n	801b5de <xQueueGenericSendFromISR+0x46>
 801b5d6:	69bb      	ldr	r3, [r7, #24]
 801b5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b5da:	2b01      	cmp	r3, #1
 801b5dc:	d101      	bne.n	801b5e2 <xQueueGenericSendFromISR+0x4a>
 801b5de:	2301      	movs	r3, #1
 801b5e0:	e000      	b.n	801b5e4 <xQueueGenericSendFromISR+0x4c>
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d101      	bne.n	801b5ec <xQueueGenericSendFromISR+0x54>
 801b5e8:	b672      	cpsid	i
 801b5ea:	e7fe      	b.n	801b5ea <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801b5ec:	f001 fcc2 	bl	801cf74 <ulSetInterruptMaskFromISR>
 801b5f0:	0003      	movs	r3, r0
 801b5f2:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801b5f4:	69bb      	ldr	r3, [r7, #24]
 801b5f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b5f8:	69bb      	ldr	r3, [r7, #24]
 801b5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	d302      	bcc.n	801b606 <xQueueGenericSendFromISR+0x6e>
 801b600:	683b      	ldr	r3, [r7, #0]
 801b602:	2b02      	cmp	r3, #2
 801b604:	d12e      	bne.n	801b664 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801b606:	2413      	movs	r4, #19
 801b608:	193b      	adds	r3, r7, r4
 801b60a:	69ba      	ldr	r2, [r7, #24]
 801b60c:	2145      	movs	r1, #69	; 0x45
 801b60e:	5c52      	ldrb	r2, [r2, r1]
 801b610:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801b612:	683a      	ldr	r2, [r7, #0]
 801b614:	68b9      	ldr	r1, [r7, #8]
 801b616:	69bb      	ldr	r3, [r7, #24]
 801b618:	0018      	movs	r0, r3
 801b61a:	f000 f8e3 	bl	801b7e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801b61e:	193b      	adds	r3, r7, r4
 801b620:	781b      	ldrb	r3, [r3, #0]
 801b622:	b25b      	sxtb	r3, r3
 801b624:	3301      	adds	r3, #1
 801b626:	d111      	bne.n	801b64c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801b628:	69bb      	ldr	r3, [r7, #24]
 801b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d016      	beq.n	801b65e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801b630:	69bb      	ldr	r3, [r7, #24]
 801b632:	3324      	adds	r3, #36	; 0x24
 801b634:	0018      	movs	r0, r3
 801b636:	f000 fe5f 	bl	801c2f8 <xTaskRemoveFromEventList>
 801b63a:	1e03      	subs	r3, r0, #0
 801b63c:	d00f      	beq.n	801b65e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	2b00      	cmp	r3, #0
 801b642:	d00c      	beq.n	801b65e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	2201      	movs	r2, #1
 801b648:	601a      	str	r2, [r3, #0]
 801b64a:	e008      	b.n	801b65e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801b64c:	2313      	movs	r3, #19
 801b64e:	18fb      	adds	r3, r7, r3
 801b650:	781b      	ldrb	r3, [r3, #0]
 801b652:	3301      	adds	r3, #1
 801b654:	b2db      	uxtb	r3, r3
 801b656:	b259      	sxtb	r1, r3
 801b658:	69bb      	ldr	r3, [r7, #24]
 801b65a:	2245      	movs	r2, #69	; 0x45
 801b65c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 801b65e:	2301      	movs	r3, #1
 801b660:	61fb      	str	r3, [r7, #28]
		{
 801b662:	e001      	b.n	801b668 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801b664:	2300      	movs	r3, #0
 801b666:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801b668:	697b      	ldr	r3, [r7, #20]
 801b66a:	0018      	movs	r0, r3
 801b66c:	f001 fc88 	bl	801cf80 <vClearInterruptMaskFromISR>

	return xReturn;
 801b670:	69fb      	ldr	r3, [r7, #28]
}
 801b672:	0018      	movs	r0, r3
 801b674:	46bd      	mov	sp, r7
 801b676:	b009      	add	sp, #36	; 0x24
 801b678:	bd90      	pop	{r4, r7, pc}

0801b67a <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801b67a:	b580      	push	{r7, lr}
 801b67c:	b08a      	sub	sp, #40	; 0x28
 801b67e:	af00      	add	r7, sp, #0
 801b680:	60f8      	str	r0, [r7, #12]
 801b682:	60b9      	str	r1, [r7, #8]
 801b684:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801b686:	2300      	movs	r3, #0
 801b688:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801b68a:	68fb      	ldr	r3, [r7, #12]
 801b68c:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801b68e:	6a3b      	ldr	r3, [r7, #32]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d101      	bne.n	801b698 <xQueueReceive+0x1e>
 801b694:	b672      	cpsid	i
 801b696:	e7fe      	b.n	801b696 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801b698:	68bb      	ldr	r3, [r7, #8]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d103      	bne.n	801b6a6 <xQueueReceive+0x2c>
 801b69e:	6a3b      	ldr	r3, [r7, #32]
 801b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d101      	bne.n	801b6aa <xQueueReceive+0x30>
 801b6a6:	2301      	movs	r3, #1
 801b6a8:	e000      	b.n	801b6ac <xQueueReceive+0x32>
 801b6aa:	2300      	movs	r3, #0
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d101      	bne.n	801b6b4 <xQueueReceive+0x3a>
 801b6b0:	b672      	cpsid	i
 801b6b2:	e7fe      	b.n	801b6b2 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801b6b4:	f000 ffb8 	bl	801c628 <xTaskGetSchedulerState>
 801b6b8:	1e03      	subs	r3, r0, #0
 801b6ba:	d102      	bne.n	801b6c2 <xQueueReceive+0x48>
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d101      	bne.n	801b6c6 <xQueueReceive+0x4c>
 801b6c2:	2301      	movs	r3, #1
 801b6c4:	e000      	b.n	801b6c8 <xQueueReceive+0x4e>
 801b6c6:	2300      	movs	r3, #0
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d101      	bne.n	801b6d0 <xQueueReceive+0x56>
 801b6cc:	b672      	cpsid	i
 801b6ce:	e7fe      	b.n	801b6ce <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801b6d0:	f001 fc26 	bl	801cf20 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801b6d4:	6a3b      	ldr	r3, [r7, #32]
 801b6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6d8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801b6da:	69fb      	ldr	r3, [r7, #28]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d01a      	beq.n	801b716 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801b6e0:	68ba      	ldr	r2, [r7, #8]
 801b6e2:	6a3b      	ldr	r3, [r7, #32]
 801b6e4:	0011      	movs	r1, r2
 801b6e6:	0018      	movs	r0, r3
 801b6e8:	f000 f8e7 	bl	801b8ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801b6ec:	69fb      	ldr	r3, [r7, #28]
 801b6ee:	1e5a      	subs	r2, r3, #1
 801b6f0:	6a3b      	ldr	r3, [r7, #32]
 801b6f2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801b6f4:	6a3b      	ldr	r3, [r7, #32]
 801b6f6:	691b      	ldr	r3, [r3, #16]
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d008      	beq.n	801b70e <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801b6fc:	6a3b      	ldr	r3, [r7, #32]
 801b6fe:	3310      	adds	r3, #16
 801b700:	0018      	movs	r0, r3
 801b702:	f000 fdf9 	bl	801c2f8 <xTaskRemoveFromEventList>
 801b706:	1e03      	subs	r3, r0, #0
 801b708:	d001      	beq.n	801b70e <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801b70a:	f001 fbf9 	bl	801cf00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801b70e:	f001 fc19 	bl	801cf44 <vPortExitCritical>
				return pdPASS;
 801b712:	2301      	movs	r3, #1
 801b714:	e062      	b.n	801b7dc <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d103      	bne.n	801b724 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801b71c:	f001 fc12 	bl	801cf44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801b720:	2300      	movs	r3, #0
 801b722:	e05b      	b.n	801b7dc <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 801b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b726:	2b00      	cmp	r3, #0
 801b728:	d106      	bne.n	801b738 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801b72a:	2314      	movs	r3, #20
 801b72c:	18fb      	adds	r3, r7, r3
 801b72e:	0018      	movs	r0, r3
 801b730:	f000 fe3e 	bl	801c3b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801b734:	2301      	movs	r3, #1
 801b736:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801b738:	f001 fc04 	bl	801cf44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801b73c:	f000 fbe8 	bl	801bf10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801b740:	f001 fbee 	bl	801cf20 <vPortEnterCritical>
 801b744:	6a3b      	ldr	r3, [r7, #32]
 801b746:	2244      	movs	r2, #68	; 0x44
 801b748:	5c9b      	ldrb	r3, [r3, r2]
 801b74a:	b25b      	sxtb	r3, r3
 801b74c:	3301      	adds	r3, #1
 801b74e:	d103      	bne.n	801b758 <xQueueReceive+0xde>
 801b750:	6a3b      	ldr	r3, [r7, #32]
 801b752:	2244      	movs	r2, #68	; 0x44
 801b754:	2100      	movs	r1, #0
 801b756:	5499      	strb	r1, [r3, r2]
 801b758:	6a3b      	ldr	r3, [r7, #32]
 801b75a:	2245      	movs	r2, #69	; 0x45
 801b75c:	5c9b      	ldrb	r3, [r3, r2]
 801b75e:	b25b      	sxtb	r3, r3
 801b760:	3301      	adds	r3, #1
 801b762:	d103      	bne.n	801b76c <xQueueReceive+0xf2>
 801b764:	6a3b      	ldr	r3, [r7, #32]
 801b766:	2245      	movs	r2, #69	; 0x45
 801b768:	2100      	movs	r1, #0
 801b76a:	5499      	strb	r1, [r3, r2]
 801b76c:	f001 fbea 	bl	801cf44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801b770:	1d3a      	adds	r2, r7, #4
 801b772:	2314      	movs	r3, #20
 801b774:	18fb      	adds	r3, r7, r3
 801b776:	0011      	movs	r1, r2
 801b778:	0018      	movs	r0, r3
 801b77a:	f000 fe2d 	bl	801c3d8 <xTaskCheckForTimeOut>
 801b77e:	1e03      	subs	r3, r0, #0
 801b780:	d11e      	bne.n	801b7c0 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801b782:	6a3b      	ldr	r3, [r7, #32]
 801b784:	0018      	movs	r0, r3
 801b786:	f000 f91c 	bl	801b9c2 <prvIsQueueEmpty>
 801b78a:	1e03      	subs	r3, r0, #0
 801b78c:	d011      	beq.n	801b7b2 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801b78e:	6a3b      	ldr	r3, [r7, #32]
 801b790:	3324      	adds	r3, #36	; 0x24
 801b792:	687a      	ldr	r2, [r7, #4]
 801b794:	0011      	movs	r1, r2
 801b796:	0018      	movs	r0, r3
 801b798:	f000 fd6a 	bl	801c270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801b79c:	6a3b      	ldr	r3, [r7, #32]
 801b79e:	0018      	movs	r0, r3
 801b7a0:	f000 f8b1 	bl	801b906 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801b7a4:	f000 fbc0 	bl	801bf28 <xTaskResumeAll>
 801b7a8:	1e03      	subs	r3, r0, #0
 801b7aa:	d191      	bne.n	801b6d0 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 801b7ac:	f001 fba8 	bl	801cf00 <vPortYield>
 801b7b0:	e78e      	b.n	801b6d0 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801b7b2:	6a3b      	ldr	r3, [r7, #32]
 801b7b4:	0018      	movs	r0, r3
 801b7b6:	f000 f8a6 	bl	801b906 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801b7ba:	f000 fbb5 	bl	801bf28 <xTaskResumeAll>
 801b7be:	e787      	b.n	801b6d0 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801b7c0:	6a3b      	ldr	r3, [r7, #32]
 801b7c2:	0018      	movs	r0, r3
 801b7c4:	f000 f89f 	bl	801b906 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801b7c8:	f000 fbae 	bl	801bf28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801b7cc:	6a3b      	ldr	r3, [r7, #32]
 801b7ce:	0018      	movs	r0, r3
 801b7d0:	f000 f8f7 	bl	801b9c2 <prvIsQueueEmpty>
 801b7d4:	1e03      	subs	r3, r0, #0
 801b7d6:	d100      	bne.n	801b7da <xQueueReceive+0x160>
 801b7d8:	e77a      	b.n	801b6d0 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801b7da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801b7dc:	0018      	movs	r0, r3
 801b7de:	46bd      	mov	sp, r7
 801b7e0:	b00a      	add	sp, #40	; 0x28
 801b7e2:	bd80      	pop	{r7, pc}

0801b7e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801b7e4:	b580      	push	{r7, lr}
 801b7e6:	b086      	sub	sp, #24
 801b7e8:	af00      	add	r7, sp, #0
 801b7ea:	60f8      	str	r0, [r7, #12]
 801b7ec:	60b9      	str	r1, [r7, #8]
 801b7ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b7f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801b7fa:	68fb      	ldr	r3, [r7, #12]
 801b7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d10e      	bne.n	801b820 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	2b00      	cmp	r3, #0
 801b808:	d14e      	bne.n	801b8a8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	689b      	ldr	r3, [r3, #8]
 801b80e:	0018      	movs	r0, r3
 801b810:	f000 ff26 	bl	801c660 <xTaskPriorityDisinherit>
 801b814:	0003      	movs	r3, r0
 801b816:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	2200      	movs	r2, #0
 801b81c:	609a      	str	r2, [r3, #8]
 801b81e:	e043      	b.n	801b8a8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	2b00      	cmp	r3, #0
 801b824:	d119      	bne.n	801b85a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	6858      	ldr	r0, [r3, #4]
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b82e:	68bb      	ldr	r3, [r7, #8]
 801b830:	0019      	movs	r1, r3
 801b832:	f001 fdd9 	bl	801d3e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	685a      	ldr	r2, [r3, #4]
 801b83a:	68fb      	ldr	r3, [r7, #12]
 801b83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b83e:	18d2      	adds	r2, r2, r3
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	685a      	ldr	r2, [r3, #4]
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	689b      	ldr	r3, [r3, #8]
 801b84c:	429a      	cmp	r2, r3
 801b84e:	d32b      	bcc.n	801b8a8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	681a      	ldr	r2, [r3, #0]
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	605a      	str	r2, [r3, #4]
 801b858:	e026      	b.n	801b8a8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	68d8      	ldr	r0, [r3, #12]
 801b85e:	68fb      	ldr	r3, [r7, #12]
 801b860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b862:	68bb      	ldr	r3, [r7, #8]
 801b864:	0019      	movs	r1, r3
 801b866:	f001 fdbf 	bl	801d3e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	68da      	ldr	r2, [r3, #12]
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b872:	425b      	negs	r3, r3
 801b874:	18d2      	adds	r2, r2, r3
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	68da      	ldr	r2, [r3, #12]
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	429a      	cmp	r2, r3
 801b884:	d207      	bcs.n	801b896 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	689a      	ldr	r2, [r3, #8]
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b88e:	425b      	negs	r3, r3
 801b890:	18d2      	adds	r2, r2, r3
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	2b02      	cmp	r3, #2
 801b89a:	d105      	bne.n	801b8a8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801b89c:	693b      	ldr	r3, [r7, #16]
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d002      	beq.n	801b8a8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801b8a2:	693b      	ldr	r3, [r7, #16]
 801b8a4:	3b01      	subs	r3, #1
 801b8a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801b8a8:	693b      	ldr	r3, [r7, #16]
 801b8aa:	1c5a      	adds	r2, r3, #1
 801b8ac:	68fb      	ldr	r3, [r7, #12]
 801b8ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801b8b0:	697b      	ldr	r3, [r7, #20]
}
 801b8b2:	0018      	movs	r0, r3
 801b8b4:	46bd      	mov	sp, r7
 801b8b6:	b006      	add	sp, #24
 801b8b8:	bd80      	pop	{r7, pc}

0801b8ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801b8ba:	b580      	push	{r7, lr}
 801b8bc:	b082      	sub	sp, #8
 801b8be:	af00      	add	r7, sp, #0
 801b8c0:	6078      	str	r0, [r7, #4]
 801b8c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d018      	beq.n	801b8fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	68da      	ldr	r2, [r3, #12]
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8d4:	18d2      	adds	r2, r2, r3
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	68da      	ldr	r2, [r3, #12]
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	689b      	ldr	r3, [r3, #8]
 801b8e2:	429a      	cmp	r2, r3
 801b8e4:	d303      	bcc.n	801b8ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	681a      	ldr	r2, [r3, #0]
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	68d9      	ldr	r1, [r3, #12]
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b8f6:	683b      	ldr	r3, [r7, #0]
 801b8f8:	0018      	movs	r0, r3
 801b8fa:	f001 fd75 	bl	801d3e8 <memcpy>
	}
}
 801b8fe:	46c0      	nop			; (mov r8, r8)
 801b900:	46bd      	mov	sp, r7
 801b902:	b002      	add	sp, #8
 801b904:	bd80      	pop	{r7, pc}

0801b906 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801b906:	b580      	push	{r7, lr}
 801b908:	b084      	sub	sp, #16
 801b90a:	af00      	add	r7, sp, #0
 801b90c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801b90e:	f001 fb07 	bl	801cf20 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801b912:	230f      	movs	r3, #15
 801b914:	18fb      	adds	r3, r7, r3
 801b916:	687a      	ldr	r2, [r7, #4]
 801b918:	2145      	movs	r1, #69	; 0x45
 801b91a:	5c52      	ldrb	r2, [r2, r1]
 801b91c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801b91e:	e013      	b.n	801b948 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b924:	2b00      	cmp	r3, #0
 801b926:	d016      	beq.n	801b956 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	3324      	adds	r3, #36	; 0x24
 801b92c:	0018      	movs	r0, r3
 801b92e:	f000 fce3 	bl	801c2f8 <xTaskRemoveFromEventList>
 801b932:	1e03      	subs	r3, r0, #0
 801b934:	d001      	beq.n	801b93a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801b936:	f000 fd9f 	bl	801c478 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801b93a:	210f      	movs	r1, #15
 801b93c:	187b      	adds	r3, r7, r1
 801b93e:	781b      	ldrb	r3, [r3, #0]
 801b940:	3b01      	subs	r3, #1
 801b942:	b2da      	uxtb	r2, r3
 801b944:	187b      	adds	r3, r7, r1
 801b946:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801b948:	230f      	movs	r3, #15
 801b94a:	18fb      	adds	r3, r7, r3
 801b94c:	781b      	ldrb	r3, [r3, #0]
 801b94e:	b25b      	sxtb	r3, r3
 801b950:	2b00      	cmp	r3, #0
 801b952:	dce5      	bgt.n	801b920 <prvUnlockQueue+0x1a>
 801b954:	e000      	b.n	801b958 <prvUnlockQueue+0x52>
					break;
 801b956:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	2245      	movs	r2, #69	; 0x45
 801b95c:	21ff      	movs	r1, #255	; 0xff
 801b95e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 801b960:	f001 faf0 	bl	801cf44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801b964:	f001 fadc 	bl	801cf20 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801b968:	230e      	movs	r3, #14
 801b96a:	18fb      	adds	r3, r7, r3
 801b96c:	687a      	ldr	r2, [r7, #4]
 801b96e:	2144      	movs	r1, #68	; 0x44
 801b970:	5c52      	ldrb	r2, [r2, r1]
 801b972:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801b974:	e013      	b.n	801b99e <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	691b      	ldr	r3, [r3, #16]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d016      	beq.n	801b9ac <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	3310      	adds	r3, #16
 801b982:	0018      	movs	r0, r3
 801b984:	f000 fcb8 	bl	801c2f8 <xTaskRemoveFromEventList>
 801b988:	1e03      	subs	r3, r0, #0
 801b98a:	d001      	beq.n	801b990 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 801b98c:	f000 fd74 	bl	801c478 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801b990:	210e      	movs	r1, #14
 801b992:	187b      	adds	r3, r7, r1
 801b994:	781b      	ldrb	r3, [r3, #0]
 801b996:	3b01      	subs	r3, #1
 801b998:	b2da      	uxtb	r2, r3
 801b99a:	187b      	adds	r3, r7, r1
 801b99c:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801b99e:	230e      	movs	r3, #14
 801b9a0:	18fb      	adds	r3, r7, r3
 801b9a2:	781b      	ldrb	r3, [r3, #0]
 801b9a4:	b25b      	sxtb	r3, r3
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	dce5      	bgt.n	801b976 <prvUnlockQueue+0x70>
 801b9aa:	e000      	b.n	801b9ae <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 801b9ac:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	2244      	movs	r2, #68	; 0x44
 801b9b2:	21ff      	movs	r1, #255	; 0xff
 801b9b4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 801b9b6:	f001 fac5 	bl	801cf44 <vPortExitCritical>
}
 801b9ba:	46c0      	nop			; (mov r8, r8)
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	b004      	add	sp, #16
 801b9c0:	bd80      	pop	{r7, pc}

0801b9c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801b9c2:	b580      	push	{r7, lr}
 801b9c4:	b084      	sub	sp, #16
 801b9c6:	af00      	add	r7, sp, #0
 801b9c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801b9ca:	f001 faa9 	bl	801cf20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d102      	bne.n	801b9dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801b9d6:	2301      	movs	r3, #1
 801b9d8:	60fb      	str	r3, [r7, #12]
 801b9da:	e001      	b.n	801b9e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801b9dc:	2300      	movs	r3, #0
 801b9de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801b9e0:	f001 fab0 	bl	801cf44 <vPortExitCritical>

	return xReturn;
 801b9e4:	68fb      	ldr	r3, [r7, #12]
}
 801b9e6:	0018      	movs	r0, r3
 801b9e8:	46bd      	mov	sp, r7
 801b9ea:	b004      	add	sp, #16
 801b9ec:	bd80      	pop	{r7, pc}

0801b9ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801b9ee:	b580      	push	{r7, lr}
 801b9f0:	b084      	sub	sp, #16
 801b9f2:	af00      	add	r7, sp, #0
 801b9f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801b9f6:	f001 fa93 	bl	801cf20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ba02:	429a      	cmp	r2, r3
 801ba04:	d102      	bne.n	801ba0c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801ba06:	2301      	movs	r3, #1
 801ba08:	60fb      	str	r3, [r7, #12]
 801ba0a:	e001      	b.n	801ba10 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801ba0c:	2300      	movs	r3, #0
 801ba0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ba10:	f001 fa98 	bl	801cf44 <vPortExitCritical>

	return xReturn;
 801ba14:	68fb      	ldr	r3, [r7, #12]
}
 801ba16:	0018      	movs	r0, r3
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	b004      	add	sp, #16
 801ba1c:	bd80      	pop	{r7, pc}
	...

0801ba20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801ba20:	b580      	push	{r7, lr}
 801ba22:	b084      	sub	sp, #16
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	6078      	str	r0, [r7, #4]
 801ba28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	60fb      	str	r3, [r7, #12]
 801ba2e:	e015      	b.n	801ba5c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801ba30:	4b0e      	ldr	r3, [pc, #56]	; (801ba6c <vQueueAddToRegistry+0x4c>)
 801ba32:	68fa      	ldr	r2, [r7, #12]
 801ba34:	00d2      	lsls	r2, r2, #3
 801ba36:	58d3      	ldr	r3, [r2, r3]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d10c      	bne.n	801ba56 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801ba3c:	4b0b      	ldr	r3, [pc, #44]	; (801ba6c <vQueueAddToRegistry+0x4c>)
 801ba3e:	68fa      	ldr	r2, [r7, #12]
 801ba40:	00d2      	lsls	r2, r2, #3
 801ba42:	6839      	ldr	r1, [r7, #0]
 801ba44:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801ba46:	4a09      	ldr	r2, [pc, #36]	; (801ba6c <vQueueAddToRegistry+0x4c>)
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	00db      	lsls	r3, r3, #3
 801ba4c:	18d3      	adds	r3, r2, r3
 801ba4e:	3304      	adds	r3, #4
 801ba50:	687a      	ldr	r2, [r7, #4]
 801ba52:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801ba54:	e006      	b.n	801ba64 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	3301      	adds	r3, #1
 801ba5a:	60fb      	str	r3, [r7, #12]
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	2b07      	cmp	r3, #7
 801ba60:	d9e6      	bls.n	801ba30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801ba62:	46c0      	nop			; (mov r8, r8)
 801ba64:	46c0      	nop			; (mov r8, r8)
 801ba66:	46bd      	mov	sp, r7
 801ba68:	b004      	add	sp, #16
 801ba6a:	bd80      	pop	{r7, pc}
 801ba6c:	20000c40 	.word	0x20000c40

0801ba70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b086      	sub	sp, #24
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	60f8      	str	r0, [r7, #12]
 801ba78:	60b9      	str	r1, [r7, #8]
 801ba7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801ba80:	f001 fa4e 	bl	801cf20 <vPortEnterCritical>
 801ba84:	697b      	ldr	r3, [r7, #20]
 801ba86:	2244      	movs	r2, #68	; 0x44
 801ba88:	5c9b      	ldrb	r3, [r3, r2]
 801ba8a:	b25b      	sxtb	r3, r3
 801ba8c:	3301      	adds	r3, #1
 801ba8e:	d103      	bne.n	801ba98 <vQueueWaitForMessageRestricted+0x28>
 801ba90:	697b      	ldr	r3, [r7, #20]
 801ba92:	2244      	movs	r2, #68	; 0x44
 801ba94:	2100      	movs	r1, #0
 801ba96:	5499      	strb	r1, [r3, r2]
 801ba98:	697b      	ldr	r3, [r7, #20]
 801ba9a:	2245      	movs	r2, #69	; 0x45
 801ba9c:	5c9b      	ldrb	r3, [r3, r2]
 801ba9e:	b25b      	sxtb	r3, r3
 801baa0:	3301      	adds	r3, #1
 801baa2:	d103      	bne.n	801baac <vQueueWaitForMessageRestricted+0x3c>
 801baa4:	697b      	ldr	r3, [r7, #20]
 801baa6:	2245      	movs	r2, #69	; 0x45
 801baa8:	2100      	movs	r1, #0
 801baaa:	5499      	strb	r1, [r3, r2]
 801baac:	f001 fa4a 	bl	801cf44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801bab0:	697b      	ldr	r3, [r7, #20]
 801bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d106      	bne.n	801bac6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801bab8:	697b      	ldr	r3, [r7, #20]
 801baba:	3324      	adds	r3, #36	; 0x24
 801babc:	687a      	ldr	r2, [r7, #4]
 801babe:	68b9      	ldr	r1, [r7, #8]
 801bac0:	0018      	movs	r0, r3
 801bac2:	f000 fbf3 	bl	801c2ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801bac6:	697b      	ldr	r3, [r7, #20]
 801bac8:	0018      	movs	r0, r3
 801baca:	f7ff ff1c 	bl	801b906 <prvUnlockQueue>
	}
 801bace:	46c0      	nop			; (mov r8, r8)
 801bad0:	46bd      	mov	sp, r7
 801bad2:	b006      	add	sp, #24
 801bad4:	bd80      	pop	{r7, pc}

0801bad6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801bad6:	b590      	push	{r4, r7, lr}
 801bad8:	b08d      	sub	sp, #52	; 0x34
 801bada:	af04      	add	r7, sp, #16
 801badc:	60f8      	str	r0, [r7, #12]
 801bade:	60b9      	str	r1, [r7, #8]
 801bae0:	607a      	str	r2, [r7, #4]
 801bae2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801bae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d101      	bne.n	801baee <xTaskCreateStatic+0x18>
 801baea:	b672      	cpsid	i
 801baec:	e7fe      	b.n	801baec <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 801baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d101      	bne.n	801baf8 <xTaskCreateStatic+0x22>
 801baf4:	b672      	cpsid	i
 801baf6:	e7fe      	b.n	801baf6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801baf8:	23bc      	movs	r3, #188	; 0xbc
 801bafa:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801bafc:	697b      	ldr	r3, [r7, #20]
 801bafe:	2bbc      	cmp	r3, #188	; 0xbc
 801bb00:	d001      	beq.n	801bb06 <xTaskCreateStatic+0x30>
 801bb02:	b672      	cpsid	i
 801bb04:	e7fe      	b.n	801bb04 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801bb06:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d020      	beq.n	801bb50 <xTaskCreateStatic+0x7a>
 801bb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d01d      	beq.n	801bb50 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801bb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb16:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801bb18:	69fb      	ldr	r3, [r7, #28]
 801bb1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bb1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801bb1e:	69fb      	ldr	r3, [r7, #28]
 801bb20:	22b9      	movs	r2, #185	; 0xb9
 801bb22:	2102      	movs	r1, #2
 801bb24:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801bb26:	683c      	ldr	r4, [r7, #0]
 801bb28:	687a      	ldr	r2, [r7, #4]
 801bb2a:	68b9      	ldr	r1, [r7, #8]
 801bb2c:	68f8      	ldr	r0, [r7, #12]
 801bb2e:	2300      	movs	r3, #0
 801bb30:	9303      	str	r3, [sp, #12]
 801bb32:	69fb      	ldr	r3, [r7, #28]
 801bb34:	9302      	str	r3, [sp, #8]
 801bb36:	2318      	movs	r3, #24
 801bb38:	18fb      	adds	r3, r7, r3
 801bb3a:	9301      	str	r3, [sp, #4]
 801bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb3e:	9300      	str	r3, [sp, #0]
 801bb40:	0023      	movs	r3, r4
 801bb42:	f000 f859 	bl	801bbf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801bb46:	69fb      	ldr	r3, [r7, #28]
 801bb48:	0018      	movs	r0, r3
 801bb4a:	f000 f8f5 	bl	801bd38 <prvAddNewTaskToReadyList>
 801bb4e:	e001      	b.n	801bb54 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 801bb50:	2300      	movs	r3, #0
 801bb52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801bb54:	69bb      	ldr	r3, [r7, #24]
	}
 801bb56:	0018      	movs	r0, r3
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	b009      	add	sp, #36	; 0x24
 801bb5c:	bd90      	pop	{r4, r7, pc}

0801bb5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801bb5e:	b590      	push	{r4, r7, lr}
 801bb60:	b08d      	sub	sp, #52	; 0x34
 801bb62:	af04      	add	r7, sp, #16
 801bb64:	60f8      	str	r0, [r7, #12]
 801bb66:	60b9      	str	r1, [r7, #8]
 801bb68:	603b      	str	r3, [r7, #0]
 801bb6a:	1dbb      	adds	r3, r7, #6
 801bb6c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801bb6e:	1dbb      	adds	r3, r7, #6
 801bb70:	881b      	ldrh	r3, [r3, #0]
 801bb72:	009b      	lsls	r3, r3, #2
 801bb74:	0018      	movs	r0, r3
 801bb76:	f001 fa6b 	bl	801d050 <pvPortMalloc>
 801bb7a:	0003      	movs	r3, r0
 801bb7c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 801bb7e:	697b      	ldr	r3, [r7, #20]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d010      	beq.n	801bba6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801bb84:	20bc      	movs	r0, #188	; 0xbc
 801bb86:	f001 fa63 	bl	801d050 <pvPortMalloc>
 801bb8a:	0003      	movs	r3, r0
 801bb8c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 801bb8e:	69fb      	ldr	r3, [r7, #28]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d003      	beq.n	801bb9c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801bb94:	69fb      	ldr	r3, [r7, #28]
 801bb96:	697a      	ldr	r2, [r7, #20]
 801bb98:	631a      	str	r2, [r3, #48]	; 0x30
 801bb9a:	e006      	b.n	801bbaa <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801bb9c:	697b      	ldr	r3, [r7, #20]
 801bb9e:	0018      	movs	r0, r3
 801bba0:	f001 fafc 	bl	801d19c <vPortFree>
 801bba4:	e001      	b.n	801bbaa <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801bba6:	2300      	movs	r3, #0
 801bba8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801bbaa:	69fb      	ldr	r3, [r7, #28]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d01a      	beq.n	801bbe6 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801bbb0:	69fb      	ldr	r3, [r7, #28]
 801bbb2:	22b9      	movs	r2, #185	; 0xb9
 801bbb4:	2100      	movs	r1, #0
 801bbb6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801bbb8:	1dbb      	adds	r3, r7, #6
 801bbba:	881a      	ldrh	r2, [r3, #0]
 801bbbc:	683c      	ldr	r4, [r7, #0]
 801bbbe:	68b9      	ldr	r1, [r7, #8]
 801bbc0:	68f8      	ldr	r0, [r7, #12]
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	9303      	str	r3, [sp, #12]
 801bbc6:	69fb      	ldr	r3, [r7, #28]
 801bbc8:	9302      	str	r3, [sp, #8]
 801bbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bbcc:	9301      	str	r3, [sp, #4]
 801bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bbd0:	9300      	str	r3, [sp, #0]
 801bbd2:	0023      	movs	r3, r4
 801bbd4:	f000 f810 	bl	801bbf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801bbd8:	69fb      	ldr	r3, [r7, #28]
 801bbda:	0018      	movs	r0, r3
 801bbdc:	f000 f8ac 	bl	801bd38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801bbe0:	2301      	movs	r3, #1
 801bbe2:	61bb      	str	r3, [r7, #24]
 801bbe4:	e002      	b.n	801bbec <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801bbe6:	2301      	movs	r3, #1
 801bbe8:	425b      	negs	r3, r3
 801bbea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801bbec:	69bb      	ldr	r3, [r7, #24]
	}
 801bbee:	0018      	movs	r0, r3
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	b009      	add	sp, #36	; 0x24
 801bbf4:	bd90      	pop	{r4, r7, pc}
	...

0801bbf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b086      	sub	sp, #24
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	60f8      	str	r0, [r7, #12]
 801bc00:	60b9      	str	r1, [r7, #8]
 801bc02:	607a      	str	r2, [r7, #4]
 801bc04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801bc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	009b      	lsls	r3, r3, #2
 801bc0e:	001a      	movs	r2, r3
 801bc10:	21a5      	movs	r1, #165	; 0xa5
 801bc12:	f001 fbf2 	bl	801d3fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	4942      	ldr	r1, [pc, #264]	; (801bd28 <prvInitialiseNewTask+0x130>)
 801bc1e:	468c      	mov	ip, r1
 801bc20:	4463      	add	r3, ip
 801bc22:	009b      	lsls	r3, r3, #2
 801bc24:	18d3      	adds	r3, r2, r3
 801bc26:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801bc28:	693b      	ldr	r3, [r7, #16]
 801bc2a:	2207      	movs	r2, #7
 801bc2c:	4393      	bics	r3, r2
 801bc2e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801bc30:	693b      	ldr	r3, [r7, #16]
 801bc32:	2207      	movs	r2, #7
 801bc34:	4013      	ands	r3, r2
 801bc36:	d001      	beq.n	801bc3c <prvInitialiseNewTask+0x44>
 801bc38:	b672      	cpsid	i
 801bc3a:	e7fe      	b.n	801bc3a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801bc3c:	68bb      	ldr	r3, [r7, #8]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d020      	beq.n	801bc84 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801bc42:	2300      	movs	r3, #0
 801bc44:	617b      	str	r3, [r7, #20]
 801bc46:	e013      	b.n	801bc70 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801bc48:	68ba      	ldr	r2, [r7, #8]
 801bc4a:	697b      	ldr	r3, [r7, #20]
 801bc4c:	18d3      	adds	r3, r2, r3
 801bc4e:	7818      	ldrb	r0, [r3, #0]
 801bc50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bc52:	2134      	movs	r1, #52	; 0x34
 801bc54:	697b      	ldr	r3, [r7, #20]
 801bc56:	18d3      	adds	r3, r2, r3
 801bc58:	185b      	adds	r3, r3, r1
 801bc5a:	1c02      	adds	r2, r0, #0
 801bc5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801bc5e:	68ba      	ldr	r2, [r7, #8]
 801bc60:	697b      	ldr	r3, [r7, #20]
 801bc62:	18d3      	adds	r3, r2, r3
 801bc64:	781b      	ldrb	r3, [r3, #0]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d006      	beq.n	801bc78 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801bc6a:	697b      	ldr	r3, [r7, #20]
 801bc6c:	3301      	adds	r3, #1
 801bc6e:	617b      	str	r3, [r7, #20]
 801bc70:	697b      	ldr	r3, [r7, #20]
 801bc72:	2b0f      	cmp	r3, #15
 801bc74:	d9e8      	bls.n	801bc48 <prvInitialiseNewTask+0x50>
 801bc76:	e000      	b.n	801bc7a <prvInitialiseNewTask+0x82>
			{
				break;
 801bc78:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801bc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc7c:	2243      	movs	r2, #67	; 0x43
 801bc7e:	2100      	movs	r1, #0
 801bc80:	5499      	strb	r1, [r3, r2]
 801bc82:	e003      	b.n	801bc8c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc86:	2234      	movs	r2, #52	; 0x34
 801bc88:	2100      	movs	r1, #0
 801bc8a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801bc8c:	6a3b      	ldr	r3, [r7, #32]
 801bc8e:	2b37      	cmp	r3, #55	; 0x37
 801bc90:	d901      	bls.n	801bc96 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801bc92:	2337      	movs	r3, #55	; 0x37
 801bc94:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc98:	6a3a      	ldr	r2, [r7, #32]
 801bc9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801bc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc9e:	6a3a      	ldr	r2, [r7, #32]
 801bca0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bca4:	2200      	movs	r2, #0
 801bca6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcaa:	3304      	adds	r3, #4
 801bcac:	0018      	movs	r0, r3
 801bcae:	f7ff fa5d 	bl	801b16c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801bcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcb4:	3318      	adds	r3, #24
 801bcb6:	0018      	movs	r0, r3
 801bcb8:	f7ff fa58 	bl	801b16c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801bcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bcc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bcc2:	6a3b      	ldr	r3, [r7, #32]
 801bcc4:	2238      	movs	r2, #56	; 0x38
 801bcc6:	1ad2      	subs	r2, r2, r3
 801bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bcd0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcd4:	22b4      	movs	r2, #180	; 0xb4
 801bcd6:	2100      	movs	r1, #0
 801bcd8:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcdc:	22b8      	movs	r2, #184	; 0xb8
 801bcde:	2100      	movs	r1, #0
 801bce0:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bce4:	3354      	adds	r3, #84	; 0x54
 801bce6:	2260      	movs	r2, #96	; 0x60
 801bce8:	2100      	movs	r1, #0
 801bcea:	0018      	movs	r0, r3
 801bcec:	f001 fb85 	bl	801d3fa <memset>
 801bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcf2:	4a0e      	ldr	r2, [pc, #56]	; (801bd2c <prvInitialiseNewTask+0x134>)
 801bcf4:	659a      	str	r2, [r3, #88]	; 0x58
 801bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcf8:	4a0d      	ldr	r2, [pc, #52]	; (801bd30 <prvInitialiseNewTask+0x138>)
 801bcfa:	65da      	str	r2, [r3, #92]	; 0x5c
 801bcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcfe:	4a0d      	ldr	r2, [pc, #52]	; (801bd34 <prvInitialiseNewTask+0x13c>)
 801bd00:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801bd02:	683a      	ldr	r2, [r7, #0]
 801bd04:	68f9      	ldr	r1, [r7, #12]
 801bd06:	693b      	ldr	r3, [r7, #16]
 801bd08:	0018      	movs	r0, r3
 801bd0a:	f001 f86b 	bl	801cde4 <pxPortInitialiseStack>
 801bd0e:	0002      	movs	r2, r0
 801bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d002      	beq.n	801bd20 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801bd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bd1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801bd20:	46c0      	nop			; (mov r8, r8)
 801bd22:	46bd      	mov	sp, r7
 801bd24:	b006      	add	sp, #24
 801bd26:	bd80      	pop	{r7, pc}
 801bd28:	3fffffff 	.word	0x3fffffff
 801bd2c:	0801d6ec 	.word	0x0801d6ec
 801bd30:	0801d70c 	.word	0x0801d70c
 801bd34:	0801d6cc 	.word	0x0801d6cc

0801bd38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b082      	sub	sp, #8
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801bd40:	f001 f8ee 	bl	801cf20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801bd44:	4b2a      	ldr	r3, [pc, #168]	; (801bdf0 <prvAddNewTaskToReadyList+0xb8>)
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	1c5a      	adds	r2, r3, #1
 801bd4a:	4b29      	ldr	r3, [pc, #164]	; (801bdf0 <prvAddNewTaskToReadyList+0xb8>)
 801bd4c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801bd4e:	4b29      	ldr	r3, [pc, #164]	; (801bdf4 <prvAddNewTaskToReadyList+0xbc>)
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d109      	bne.n	801bd6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801bd56:	4b27      	ldr	r3, [pc, #156]	; (801bdf4 <prvAddNewTaskToReadyList+0xbc>)
 801bd58:	687a      	ldr	r2, [r7, #4]
 801bd5a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801bd5c:	4b24      	ldr	r3, [pc, #144]	; (801bdf0 <prvAddNewTaskToReadyList+0xb8>)
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	2b01      	cmp	r3, #1
 801bd62:	d110      	bne.n	801bd86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801bd64:	f000 fba2 	bl	801c4ac <prvInitialiseTaskLists>
 801bd68:	e00d      	b.n	801bd86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801bd6a:	4b23      	ldr	r3, [pc, #140]	; (801bdf8 <prvAddNewTaskToReadyList+0xc0>)
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d109      	bne.n	801bd86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801bd72:	4b20      	ldr	r3, [pc, #128]	; (801bdf4 <prvAddNewTaskToReadyList+0xbc>)
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd7c:	429a      	cmp	r2, r3
 801bd7e:	d802      	bhi.n	801bd86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801bd80:	4b1c      	ldr	r3, [pc, #112]	; (801bdf4 <prvAddNewTaskToReadyList+0xbc>)
 801bd82:	687a      	ldr	r2, [r7, #4]
 801bd84:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801bd86:	4b1d      	ldr	r3, [pc, #116]	; (801bdfc <prvAddNewTaskToReadyList+0xc4>)
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	1c5a      	adds	r2, r3, #1
 801bd8c:	4b1b      	ldr	r3, [pc, #108]	; (801bdfc <prvAddNewTaskToReadyList+0xc4>)
 801bd8e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801bd90:	4b1a      	ldr	r3, [pc, #104]	; (801bdfc <prvAddNewTaskToReadyList+0xc4>)
 801bd92:	681a      	ldr	r2, [r3, #0]
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd9c:	4b18      	ldr	r3, [pc, #96]	; (801be00 <prvAddNewTaskToReadyList+0xc8>)
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	429a      	cmp	r2, r3
 801bda2:	d903      	bls.n	801bdac <prvAddNewTaskToReadyList+0x74>
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bda8:	4b15      	ldr	r3, [pc, #84]	; (801be00 <prvAddNewTaskToReadyList+0xc8>)
 801bdaa:	601a      	str	r2, [r3, #0]
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bdb0:	0013      	movs	r3, r2
 801bdb2:	009b      	lsls	r3, r3, #2
 801bdb4:	189b      	adds	r3, r3, r2
 801bdb6:	009b      	lsls	r3, r3, #2
 801bdb8:	4a12      	ldr	r2, [pc, #72]	; (801be04 <prvAddNewTaskToReadyList+0xcc>)
 801bdba:	189a      	adds	r2, r3, r2
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	3304      	adds	r3, #4
 801bdc0:	0019      	movs	r1, r3
 801bdc2:	0010      	movs	r0, r2
 801bdc4:	f7ff f9dd 	bl	801b182 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801bdc8:	f001 f8bc 	bl	801cf44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801bdcc:	4b0a      	ldr	r3, [pc, #40]	; (801bdf8 <prvAddNewTaskToReadyList+0xc0>)
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d008      	beq.n	801bde6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801bdd4:	4b07      	ldr	r3, [pc, #28]	; (801bdf4 <prvAddNewTaskToReadyList+0xbc>)
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bdde:	429a      	cmp	r2, r3
 801bde0:	d201      	bcs.n	801bde6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801bde2:	f001 f88d 	bl	801cf00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801bde6:	46c0      	nop			; (mov r8, r8)
 801bde8:	46bd      	mov	sp, r7
 801bdea:	b002      	add	sp, #8
 801bdec:	bd80      	pop	{r7, pc}
 801bdee:	46c0      	nop			; (mov r8, r8)
 801bdf0:	20001154 	.word	0x20001154
 801bdf4:	20000c80 	.word	0x20000c80
 801bdf8:	20001160 	.word	0x20001160
 801bdfc:	20001170 	.word	0x20001170
 801be00:	2000115c 	.word	0x2000115c
 801be04:	20000c84 	.word	0x20000c84

0801be08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b084      	sub	sp, #16
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801be10:	2300      	movs	r3, #0
 801be12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	2b00      	cmp	r3, #0
 801be18:	d010      	beq.n	801be3c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801be1a:	4b0d      	ldr	r3, [pc, #52]	; (801be50 <vTaskDelay+0x48>)
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d001      	beq.n	801be26 <vTaskDelay+0x1e>
 801be22:	b672      	cpsid	i
 801be24:	e7fe      	b.n	801be24 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801be26:	f000 f873 	bl	801bf10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	2100      	movs	r1, #0
 801be2e:	0018      	movs	r0, r3
 801be30:	f000 fc72 	bl	801c718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801be34:	f000 f878 	bl	801bf28 <xTaskResumeAll>
 801be38:	0003      	movs	r3, r0
 801be3a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d101      	bne.n	801be46 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 801be42:	f001 f85d 	bl	801cf00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801be46:	46c0      	nop			; (mov r8, r8)
 801be48:	46bd      	mov	sp, r7
 801be4a:	b004      	add	sp, #16
 801be4c:	bd80      	pop	{r7, pc}
 801be4e:	46c0      	nop			; (mov r8, r8)
 801be50:	2000117c 	.word	0x2000117c

0801be54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801be54:	b590      	push	{r4, r7, lr}
 801be56:	b089      	sub	sp, #36	; 0x24
 801be58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801be5a:	2300      	movs	r3, #0
 801be5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801be5e:	2300      	movs	r3, #0
 801be60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801be62:	003a      	movs	r2, r7
 801be64:	1d39      	adds	r1, r7, #4
 801be66:	2308      	movs	r3, #8
 801be68:	18fb      	adds	r3, r7, r3
 801be6a:	0018      	movs	r0, r3
 801be6c:	f7ff f930 	bl	801b0d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801be70:	683c      	ldr	r4, [r7, #0]
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	68ba      	ldr	r2, [r7, #8]
 801be76:	491e      	ldr	r1, [pc, #120]	; (801bef0 <vTaskStartScheduler+0x9c>)
 801be78:	481e      	ldr	r0, [pc, #120]	; (801bef4 <vTaskStartScheduler+0xa0>)
 801be7a:	9202      	str	r2, [sp, #8]
 801be7c:	9301      	str	r3, [sp, #4]
 801be7e:	2300      	movs	r3, #0
 801be80:	9300      	str	r3, [sp, #0]
 801be82:	2300      	movs	r3, #0
 801be84:	0022      	movs	r2, r4
 801be86:	f7ff fe26 	bl	801bad6 <xTaskCreateStatic>
 801be8a:	0002      	movs	r2, r0
 801be8c:	4b1a      	ldr	r3, [pc, #104]	; (801bef8 <vTaskStartScheduler+0xa4>)
 801be8e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801be90:	4b19      	ldr	r3, [pc, #100]	; (801bef8 <vTaskStartScheduler+0xa4>)
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	2b00      	cmp	r3, #0
 801be96:	d002      	beq.n	801be9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801be98:	2301      	movs	r3, #1
 801be9a:	60fb      	str	r3, [r7, #12]
 801be9c:	e001      	b.n	801bea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801be9e:	2300      	movs	r3, #0
 801bea0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	2b01      	cmp	r3, #1
 801bea6:	d103      	bne.n	801beb0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 801bea8:	f000 fc8a 	bl	801c7c0 <xTimerCreateTimerTask>
 801beac:	0003      	movs	r3, r0
 801beae:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	2b01      	cmp	r3, #1
 801beb4:	d113      	bne.n	801bede <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801beb6:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801beb8:	4b10      	ldr	r3, [pc, #64]	; (801befc <vTaskStartScheduler+0xa8>)
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	3354      	adds	r3, #84	; 0x54
 801bebe:	001a      	movs	r2, r3
 801bec0:	4b0f      	ldr	r3, [pc, #60]	; (801bf00 <vTaskStartScheduler+0xac>)
 801bec2:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801bec4:	4b0f      	ldr	r3, [pc, #60]	; (801bf04 <vTaskStartScheduler+0xb0>)
 801bec6:	2201      	movs	r2, #1
 801bec8:	4252      	negs	r2, r2
 801beca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801becc:	4b0e      	ldr	r3, [pc, #56]	; (801bf08 <vTaskStartScheduler+0xb4>)
 801bece:	2201      	movs	r2, #1
 801bed0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801bed2:	4b0e      	ldr	r3, [pc, #56]	; (801bf0c <vTaskStartScheduler+0xb8>)
 801bed4:	2200      	movs	r2, #0
 801bed6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801bed8:	f000 ffee 	bl	801ceb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801bedc:	e004      	b.n	801bee8 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	3301      	adds	r3, #1
 801bee2:	d101      	bne.n	801bee8 <vTaskStartScheduler+0x94>
 801bee4:	b672      	cpsid	i
 801bee6:	e7fe      	b.n	801bee6 <vTaskStartScheduler+0x92>
}
 801bee8:	46c0      	nop			; (mov r8, r8)
 801beea:	46bd      	mov	sp, r7
 801beec:	b005      	add	sp, #20
 801beee:	bd90      	pop	{r4, r7, pc}
 801bef0:	0801d5d8 	.word	0x0801d5d8
 801bef4:	0801c48d 	.word	0x0801c48d
 801bef8:	20001178 	.word	0x20001178
 801befc:	20000c80 	.word	0x20000c80
 801bf00:	20000010 	.word	0x20000010
 801bf04:	20001174 	.word	0x20001174
 801bf08:	20001160 	.word	0x20001160
 801bf0c:	20001158 	.word	0x20001158

0801bf10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801bf14:	4b03      	ldr	r3, [pc, #12]	; (801bf24 <vTaskSuspendAll+0x14>)
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	1c5a      	adds	r2, r3, #1
 801bf1a:	4b02      	ldr	r3, [pc, #8]	; (801bf24 <vTaskSuspendAll+0x14>)
 801bf1c:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 801bf1e:	46c0      	nop			; (mov r8, r8)
 801bf20:	46bd      	mov	sp, r7
 801bf22:	bd80      	pop	{r7, pc}
 801bf24:	2000117c 	.word	0x2000117c

0801bf28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b084      	sub	sp, #16
 801bf2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801bf2e:	2300      	movs	r3, #0
 801bf30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801bf32:	2300      	movs	r3, #0
 801bf34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801bf36:	4b3a      	ldr	r3, [pc, #232]	; (801c020 <xTaskResumeAll+0xf8>)
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d101      	bne.n	801bf42 <xTaskResumeAll+0x1a>
 801bf3e:	b672      	cpsid	i
 801bf40:	e7fe      	b.n	801bf40 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801bf42:	f000 ffed 	bl	801cf20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801bf46:	4b36      	ldr	r3, [pc, #216]	; (801c020 <xTaskResumeAll+0xf8>)
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	1e5a      	subs	r2, r3, #1
 801bf4c:	4b34      	ldr	r3, [pc, #208]	; (801c020 <xTaskResumeAll+0xf8>)
 801bf4e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bf50:	4b33      	ldr	r3, [pc, #204]	; (801c020 <xTaskResumeAll+0xf8>)
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d15b      	bne.n	801c010 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801bf58:	4b32      	ldr	r3, [pc, #200]	; (801c024 <xTaskResumeAll+0xfc>)
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d057      	beq.n	801c010 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801bf60:	e02f      	b.n	801bfc2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bf62:	4b31      	ldr	r3, [pc, #196]	; (801c028 <xTaskResumeAll+0x100>)
 801bf64:	68db      	ldr	r3, [r3, #12]
 801bf66:	68db      	ldr	r3, [r3, #12]
 801bf68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	3318      	adds	r3, #24
 801bf6e:	0018      	movs	r0, r3
 801bf70:	f7ff f95f 	bl	801b232 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	3304      	adds	r3, #4
 801bf78:	0018      	movs	r0, r3
 801bf7a:	f7ff f95a 	bl	801b232 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bf82:	4b2a      	ldr	r3, [pc, #168]	; (801c02c <xTaskResumeAll+0x104>)
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	429a      	cmp	r2, r3
 801bf88:	d903      	bls.n	801bf92 <xTaskResumeAll+0x6a>
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bf8e:	4b27      	ldr	r3, [pc, #156]	; (801c02c <xTaskResumeAll+0x104>)
 801bf90:	601a      	str	r2, [r3, #0]
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bf96:	0013      	movs	r3, r2
 801bf98:	009b      	lsls	r3, r3, #2
 801bf9a:	189b      	adds	r3, r3, r2
 801bf9c:	009b      	lsls	r3, r3, #2
 801bf9e:	4a24      	ldr	r2, [pc, #144]	; (801c030 <xTaskResumeAll+0x108>)
 801bfa0:	189a      	adds	r2, r3, r2
 801bfa2:	68fb      	ldr	r3, [r7, #12]
 801bfa4:	3304      	adds	r3, #4
 801bfa6:	0019      	movs	r1, r3
 801bfa8:	0010      	movs	r0, r2
 801bfaa:	f7ff f8ea 	bl	801b182 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bfb2:	4b20      	ldr	r3, [pc, #128]	; (801c034 <xTaskResumeAll+0x10c>)
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bfb8:	429a      	cmp	r2, r3
 801bfba:	d302      	bcc.n	801bfc2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 801bfbc:	4b1e      	ldr	r3, [pc, #120]	; (801c038 <xTaskResumeAll+0x110>)
 801bfbe:	2201      	movs	r2, #1
 801bfc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801bfc2:	4b19      	ldr	r3, [pc, #100]	; (801c028 <xTaskResumeAll+0x100>)
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d1cb      	bne.n	801bf62 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d001      	beq.n	801bfd4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801bfd0:	f000 fb0c 	bl	801c5ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801bfd4:	4b19      	ldr	r3, [pc, #100]	; (801c03c <xTaskResumeAll+0x114>)
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d00f      	beq.n	801c000 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801bfe0:	f000 f83c 	bl	801c05c <xTaskIncrementTick>
 801bfe4:	1e03      	subs	r3, r0, #0
 801bfe6:	d002      	beq.n	801bfee <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 801bfe8:	4b13      	ldr	r3, [pc, #76]	; (801c038 <xTaskResumeAll+0x110>)
 801bfea:	2201      	movs	r2, #1
 801bfec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	3b01      	subs	r3, #1
 801bff2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d1f2      	bne.n	801bfe0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 801bffa:	4b10      	ldr	r3, [pc, #64]	; (801c03c <xTaskResumeAll+0x114>)
 801bffc:	2200      	movs	r2, #0
 801bffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801c000:	4b0d      	ldr	r3, [pc, #52]	; (801c038 <xTaskResumeAll+0x110>)
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d003      	beq.n	801c010 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801c008:	2301      	movs	r3, #1
 801c00a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801c00c:	f000 ff78 	bl	801cf00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c010:	f000 ff98 	bl	801cf44 <vPortExitCritical>

	return xAlreadyYielded;
 801c014:	68bb      	ldr	r3, [r7, #8]
}
 801c016:	0018      	movs	r0, r3
 801c018:	46bd      	mov	sp, r7
 801c01a:	b004      	add	sp, #16
 801c01c:	bd80      	pop	{r7, pc}
 801c01e:	46c0      	nop			; (mov r8, r8)
 801c020:	2000117c 	.word	0x2000117c
 801c024:	20001154 	.word	0x20001154
 801c028:	20001114 	.word	0x20001114
 801c02c:	2000115c 	.word	0x2000115c
 801c030:	20000c84 	.word	0x20000c84
 801c034:	20000c80 	.word	0x20000c80
 801c038:	20001168 	.word	0x20001168
 801c03c:	20001164 	.word	0x20001164

0801c040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b082      	sub	sp, #8
 801c044:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801c046:	4b04      	ldr	r3, [pc, #16]	; (801c058 <xTaskGetTickCount+0x18>)
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801c04c:	687b      	ldr	r3, [r7, #4]
}
 801c04e:	0018      	movs	r0, r3
 801c050:	46bd      	mov	sp, r7
 801c052:	b002      	add	sp, #8
 801c054:	bd80      	pop	{r7, pc}
 801c056:	46c0      	nop			; (mov r8, r8)
 801c058:	20001158 	.word	0x20001158

0801c05c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801c05c:	b580      	push	{r7, lr}
 801c05e:	b086      	sub	sp, #24
 801c060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801c062:	2300      	movs	r3, #0
 801c064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c066:	4b4a      	ldr	r3, [pc, #296]	; (801c190 <xTaskIncrementTick+0x134>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d000      	beq.n	801c070 <xTaskIncrementTick+0x14>
 801c06e:	e07e      	b.n	801c16e <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801c070:	4b48      	ldr	r3, [pc, #288]	; (801c194 <xTaskIncrementTick+0x138>)
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	3301      	adds	r3, #1
 801c076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801c078:	4b46      	ldr	r3, [pc, #280]	; (801c194 <xTaskIncrementTick+0x138>)
 801c07a:	693a      	ldr	r2, [r7, #16]
 801c07c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801c07e:	693b      	ldr	r3, [r7, #16]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d117      	bne.n	801c0b4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 801c084:	4b44      	ldr	r3, [pc, #272]	; (801c198 <xTaskIncrementTick+0x13c>)
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d001      	beq.n	801c092 <xTaskIncrementTick+0x36>
 801c08e:	b672      	cpsid	i
 801c090:	e7fe      	b.n	801c090 <xTaskIncrementTick+0x34>
 801c092:	4b41      	ldr	r3, [pc, #260]	; (801c198 <xTaskIncrementTick+0x13c>)
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	60fb      	str	r3, [r7, #12]
 801c098:	4b40      	ldr	r3, [pc, #256]	; (801c19c <xTaskIncrementTick+0x140>)
 801c09a:	681a      	ldr	r2, [r3, #0]
 801c09c:	4b3e      	ldr	r3, [pc, #248]	; (801c198 <xTaskIncrementTick+0x13c>)
 801c09e:	601a      	str	r2, [r3, #0]
 801c0a0:	4b3e      	ldr	r3, [pc, #248]	; (801c19c <xTaskIncrementTick+0x140>)
 801c0a2:	68fa      	ldr	r2, [r7, #12]
 801c0a4:	601a      	str	r2, [r3, #0]
 801c0a6:	4b3e      	ldr	r3, [pc, #248]	; (801c1a0 <xTaskIncrementTick+0x144>)
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	1c5a      	adds	r2, r3, #1
 801c0ac:	4b3c      	ldr	r3, [pc, #240]	; (801c1a0 <xTaskIncrementTick+0x144>)
 801c0ae:	601a      	str	r2, [r3, #0]
 801c0b0:	f000 fa9c 	bl	801c5ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801c0b4:	4b3b      	ldr	r3, [pc, #236]	; (801c1a4 <xTaskIncrementTick+0x148>)
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	693a      	ldr	r2, [r7, #16]
 801c0ba:	429a      	cmp	r2, r3
 801c0bc:	d349      	bcc.n	801c152 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801c0be:	4b36      	ldr	r3, [pc, #216]	; (801c198 <xTaskIncrementTick+0x13c>)
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d104      	bne.n	801c0d2 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c0c8:	4b36      	ldr	r3, [pc, #216]	; (801c1a4 <xTaskIncrementTick+0x148>)
 801c0ca:	2201      	movs	r2, #1
 801c0cc:	4252      	negs	r2, r2
 801c0ce:	601a      	str	r2, [r3, #0]
					break;
 801c0d0:	e03f      	b.n	801c152 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c0d2:	4b31      	ldr	r3, [pc, #196]	; (801c198 <xTaskIncrementTick+0x13c>)
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	68db      	ldr	r3, [r3, #12]
 801c0d8:	68db      	ldr	r3, [r3, #12]
 801c0da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801c0dc:	68bb      	ldr	r3, [r7, #8]
 801c0de:	685b      	ldr	r3, [r3, #4]
 801c0e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801c0e2:	693a      	ldr	r2, [r7, #16]
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	429a      	cmp	r2, r3
 801c0e8:	d203      	bcs.n	801c0f2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801c0ea:	4b2e      	ldr	r3, [pc, #184]	; (801c1a4 <xTaskIncrementTick+0x148>)
 801c0ec:	687a      	ldr	r2, [r7, #4]
 801c0ee:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801c0f0:	e02f      	b.n	801c152 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801c0f2:	68bb      	ldr	r3, [r7, #8]
 801c0f4:	3304      	adds	r3, #4
 801c0f6:	0018      	movs	r0, r3
 801c0f8:	f7ff f89b 	bl	801b232 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801c0fc:	68bb      	ldr	r3, [r7, #8]
 801c0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c100:	2b00      	cmp	r3, #0
 801c102:	d004      	beq.n	801c10e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801c104:	68bb      	ldr	r3, [r7, #8]
 801c106:	3318      	adds	r3, #24
 801c108:	0018      	movs	r0, r3
 801c10a:	f7ff f892 	bl	801b232 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801c10e:	68bb      	ldr	r3, [r7, #8]
 801c110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c112:	4b25      	ldr	r3, [pc, #148]	; (801c1a8 <xTaskIncrementTick+0x14c>)
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	429a      	cmp	r2, r3
 801c118:	d903      	bls.n	801c122 <xTaskIncrementTick+0xc6>
 801c11a:	68bb      	ldr	r3, [r7, #8]
 801c11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c11e:	4b22      	ldr	r3, [pc, #136]	; (801c1a8 <xTaskIncrementTick+0x14c>)
 801c120:	601a      	str	r2, [r3, #0]
 801c122:	68bb      	ldr	r3, [r7, #8]
 801c124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c126:	0013      	movs	r3, r2
 801c128:	009b      	lsls	r3, r3, #2
 801c12a:	189b      	adds	r3, r3, r2
 801c12c:	009b      	lsls	r3, r3, #2
 801c12e:	4a1f      	ldr	r2, [pc, #124]	; (801c1ac <xTaskIncrementTick+0x150>)
 801c130:	189a      	adds	r2, r3, r2
 801c132:	68bb      	ldr	r3, [r7, #8]
 801c134:	3304      	adds	r3, #4
 801c136:	0019      	movs	r1, r3
 801c138:	0010      	movs	r0, r2
 801c13a:	f7ff f822 	bl	801b182 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801c13e:	68bb      	ldr	r3, [r7, #8]
 801c140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c142:	4b1b      	ldr	r3, [pc, #108]	; (801c1b0 <xTaskIncrementTick+0x154>)
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c148:	429a      	cmp	r2, r3
 801c14a:	d3b8      	bcc.n	801c0be <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 801c14c:	2301      	movs	r3, #1
 801c14e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801c150:	e7b5      	b.n	801c0be <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801c152:	4b17      	ldr	r3, [pc, #92]	; (801c1b0 <xTaskIncrementTick+0x154>)
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c158:	4914      	ldr	r1, [pc, #80]	; (801c1ac <xTaskIncrementTick+0x150>)
 801c15a:	0013      	movs	r3, r2
 801c15c:	009b      	lsls	r3, r3, #2
 801c15e:	189b      	adds	r3, r3, r2
 801c160:	009b      	lsls	r3, r3, #2
 801c162:	585b      	ldr	r3, [r3, r1]
 801c164:	2b01      	cmp	r3, #1
 801c166:	d907      	bls.n	801c178 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 801c168:	2301      	movs	r3, #1
 801c16a:	617b      	str	r3, [r7, #20]
 801c16c:	e004      	b.n	801c178 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801c16e:	4b11      	ldr	r3, [pc, #68]	; (801c1b4 <xTaskIncrementTick+0x158>)
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	1c5a      	adds	r2, r3, #1
 801c174:	4b0f      	ldr	r3, [pc, #60]	; (801c1b4 <xTaskIncrementTick+0x158>)
 801c176:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801c178:	4b0f      	ldr	r3, [pc, #60]	; (801c1b8 <xTaskIncrementTick+0x15c>)
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d001      	beq.n	801c184 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 801c180:	2301      	movs	r3, #1
 801c182:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801c184:	697b      	ldr	r3, [r7, #20]
}
 801c186:	0018      	movs	r0, r3
 801c188:	46bd      	mov	sp, r7
 801c18a:	b006      	add	sp, #24
 801c18c:	bd80      	pop	{r7, pc}
 801c18e:	46c0      	nop			; (mov r8, r8)
 801c190:	2000117c 	.word	0x2000117c
 801c194:	20001158 	.word	0x20001158
 801c198:	2000110c 	.word	0x2000110c
 801c19c:	20001110 	.word	0x20001110
 801c1a0:	2000116c 	.word	0x2000116c
 801c1a4:	20001174 	.word	0x20001174
 801c1a8:	2000115c 	.word	0x2000115c
 801c1ac:	20000c84 	.word	0x20000c84
 801c1b0:	20000c80 	.word	0x20000c80
 801c1b4:	20001164 	.word	0x20001164
 801c1b8:	20001168 	.word	0x20001168

0801c1bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801c1bc:	b580      	push	{r7, lr}
 801c1be:	b082      	sub	sp, #8
 801c1c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801c1c2:	4b25      	ldr	r3, [pc, #148]	; (801c258 <vTaskSwitchContext+0x9c>)
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d003      	beq.n	801c1d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801c1ca:	4b24      	ldr	r3, [pc, #144]	; (801c25c <vTaskSwitchContext+0xa0>)
 801c1cc:	2201      	movs	r2, #1
 801c1ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801c1d0:	e03d      	b.n	801c24e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 801c1d2:	4b22      	ldr	r3, [pc, #136]	; (801c25c <vTaskSwitchContext+0xa0>)
 801c1d4:	2200      	movs	r2, #0
 801c1d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c1d8:	4b21      	ldr	r3, [pc, #132]	; (801c260 <vTaskSwitchContext+0xa4>)
 801c1da:	681b      	ldr	r3, [r3, #0]
 801c1dc:	607b      	str	r3, [r7, #4]
 801c1de:	e007      	b.n	801c1f0 <vTaskSwitchContext+0x34>
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d101      	bne.n	801c1ea <vTaskSwitchContext+0x2e>
 801c1e6:	b672      	cpsid	i
 801c1e8:	e7fe      	b.n	801c1e8 <vTaskSwitchContext+0x2c>
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	3b01      	subs	r3, #1
 801c1ee:	607b      	str	r3, [r7, #4]
 801c1f0:	491c      	ldr	r1, [pc, #112]	; (801c264 <vTaskSwitchContext+0xa8>)
 801c1f2:	687a      	ldr	r2, [r7, #4]
 801c1f4:	0013      	movs	r3, r2
 801c1f6:	009b      	lsls	r3, r3, #2
 801c1f8:	189b      	adds	r3, r3, r2
 801c1fa:	009b      	lsls	r3, r3, #2
 801c1fc:	585b      	ldr	r3, [r3, r1]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d0ee      	beq.n	801c1e0 <vTaskSwitchContext+0x24>
 801c202:	687a      	ldr	r2, [r7, #4]
 801c204:	0013      	movs	r3, r2
 801c206:	009b      	lsls	r3, r3, #2
 801c208:	189b      	adds	r3, r3, r2
 801c20a:	009b      	lsls	r3, r3, #2
 801c20c:	4a15      	ldr	r2, [pc, #84]	; (801c264 <vTaskSwitchContext+0xa8>)
 801c20e:	189b      	adds	r3, r3, r2
 801c210:	603b      	str	r3, [r7, #0]
 801c212:	683b      	ldr	r3, [r7, #0]
 801c214:	685b      	ldr	r3, [r3, #4]
 801c216:	685a      	ldr	r2, [r3, #4]
 801c218:	683b      	ldr	r3, [r7, #0]
 801c21a:	605a      	str	r2, [r3, #4]
 801c21c:	683b      	ldr	r3, [r7, #0]
 801c21e:	685a      	ldr	r2, [r3, #4]
 801c220:	683b      	ldr	r3, [r7, #0]
 801c222:	3308      	adds	r3, #8
 801c224:	429a      	cmp	r2, r3
 801c226:	d104      	bne.n	801c232 <vTaskSwitchContext+0x76>
 801c228:	683b      	ldr	r3, [r7, #0]
 801c22a:	685b      	ldr	r3, [r3, #4]
 801c22c:	685a      	ldr	r2, [r3, #4]
 801c22e:	683b      	ldr	r3, [r7, #0]
 801c230:	605a      	str	r2, [r3, #4]
 801c232:	683b      	ldr	r3, [r7, #0]
 801c234:	685b      	ldr	r3, [r3, #4]
 801c236:	68da      	ldr	r2, [r3, #12]
 801c238:	4b0b      	ldr	r3, [pc, #44]	; (801c268 <vTaskSwitchContext+0xac>)
 801c23a:	601a      	str	r2, [r3, #0]
 801c23c:	4b08      	ldr	r3, [pc, #32]	; (801c260 <vTaskSwitchContext+0xa4>)
 801c23e:	687a      	ldr	r2, [r7, #4]
 801c240:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801c242:	4b09      	ldr	r3, [pc, #36]	; (801c268 <vTaskSwitchContext+0xac>)
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	3354      	adds	r3, #84	; 0x54
 801c248:	001a      	movs	r2, r3
 801c24a:	4b08      	ldr	r3, [pc, #32]	; (801c26c <vTaskSwitchContext+0xb0>)
 801c24c:	601a      	str	r2, [r3, #0]
}
 801c24e:	46c0      	nop			; (mov r8, r8)
 801c250:	46bd      	mov	sp, r7
 801c252:	b002      	add	sp, #8
 801c254:	bd80      	pop	{r7, pc}
 801c256:	46c0      	nop			; (mov r8, r8)
 801c258:	2000117c 	.word	0x2000117c
 801c25c:	20001168 	.word	0x20001168
 801c260:	2000115c 	.word	0x2000115c
 801c264:	20000c84 	.word	0x20000c84
 801c268:	20000c80 	.word	0x20000c80
 801c26c:	20000010 	.word	0x20000010

0801c270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b082      	sub	sp, #8
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
 801c278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d101      	bne.n	801c284 <vTaskPlaceOnEventList+0x14>
 801c280:	b672      	cpsid	i
 801c282:	e7fe      	b.n	801c282 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801c284:	4b08      	ldr	r3, [pc, #32]	; (801c2a8 <vTaskPlaceOnEventList+0x38>)
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	3318      	adds	r3, #24
 801c28a:	001a      	movs	r2, r3
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	0011      	movs	r1, r2
 801c290:	0018      	movs	r0, r3
 801c292:	f7fe ff98 	bl	801b1c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801c296:	683b      	ldr	r3, [r7, #0]
 801c298:	2101      	movs	r1, #1
 801c29a:	0018      	movs	r0, r3
 801c29c:	f000 fa3c 	bl	801c718 <prvAddCurrentTaskToDelayedList>
}
 801c2a0:	46c0      	nop			; (mov r8, r8)
 801c2a2:	46bd      	mov	sp, r7
 801c2a4:	b002      	add	sp, #8
 801c2a6:	bd80      	pop	{r7, pc}
 801c2a8:	20000c80 	.word	0x20000c80

0801c2ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801c2ac:	b580      	push	{r7, lr}
 801c2ae:	b084      	sub	sp, #16
 801c2b0:	af00      	add	r7, sp, #0
 801c2b2:	60f8      	str	r0, [r7, #12]
 801c2b4:	60b9      	str	r1, [r7, #8]
 801c2b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d101      	bne.n	801c2c2 <vTaskPlaceOnEventListRestricted+0x16>
 801c2be:	b672      	cpsid	i
 801c2c0:	e7fe      	b.n	801c2c0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801c2c2:	4b0c      	ldr	r3, [pc, #48]	; (801c2f4 <vTaskPlaceOnEventListRestricted+0x48>)
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	3318      	adds	r3, #24
 801c2c8:	001a      	movs	r2, r3
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	0011      	movs	r1, r2
 801c2ce:	0018      	movs	r0, r3
 801c2d0:	f7fe ff57 	bl	801b182 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d002      	beq.n	801c2e0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 801c2da:	2301      	movs	r3, #1
 801c2dc:	425b      	negs	r3, r3
 801c2de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801c2e0:	687a      	ldr	r2, [r7, #4]
 801c2e2:	68bb      	ldr	r3, [r7, #8]
 801c2e4:	0011      	movs	r1, r2
 801c2e6:	0018      	movs	r0, r3
 801c2e8:	f000 fa16 	bl	801c718 <prvAddCurrentTaskToDelayedList>
	}
 801c2ec:	46c0      	nop			; (mov r8, r8)
 801c2ee:	46bd      	mov	sp, r7
 801c2f0:	b004      	add	sp, #16
 801c2f2:	bd80      	pop	{r7, pc}
 801c2f4:	20000c80 	.word	0x20000c80

0801c2f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801c2f8:	b580      	push	{r7, lr}
 801c2fa:	b084      	sub	sp, #16
 801c2fc:	af00      	add	r7, sp, #0
 801c2fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	68db      	ldr	r3, [r3, #12]
 801c304:	68db      	ldr	r3, [r3, #12]
 801c306:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801c308:	68bb      	ldr	r3, [r7, #8]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d101      	bne.n	801c312 <xTaskRemoveFromEventList+0x1a>
 801c30e:	b672      	cpsid	i
 801c310:	e7fe      	b.n	801c310 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801c312:	68bb      	ldr	r3, [r7, #8]
 801c314:	3318      	adds	r3, #24
 801c316:	0018      	movs	r0, r3
 801c318:	f7fe ff8b 	bl	801b232 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c31c:	4b1e      	ldr	r3, [pc, #120]	; (801c398 <xTaskRemoveFromEventList+0xa0>)
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d11d      	bne.n	801c360 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801c324:	68bb      	ldr	r3, [r7, #8]
 801c326:	3304      	adds	r3, #4
 801c328:	0018      	movs	r0, r3
 801c32a:	f7fe ff82 	bl	801b232 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801c32e:	68bb      	ldr	r3, [r7, #8]
 801c330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c332:	4b1a      	ldr	r3, [pc, #104]	; (801c39c <xTaskRemoveFromEventList+0xa4>)
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	429a      	cmp	r2, r3
 801c338:	d903      	bls.n	801c342 <xTaskRemoveFromEventList+0x4a>
 801c33a:	68bb      	ldr	r3, [r7, #8]
 801c33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c33e:	4b17      	ldr	r3, [pc, #92]	; (801c39c <xTaskRemoveFromEventList+0xa4>)
 801c340:	601a      	str	r2, [r3, #0]
 801c342:	68bb      	ldr	r3, [r7, #8]
 801c344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c346:	0013      	movs	r3, r2
 801c348:	009b      	lsls	r3, r3, #2
 801c34a:	189b      	adds	r3, r3, r2
 801c34c:	009b      	lsls	r3, r3, #2
 801c34e:	4a14      	ldr	r2, [pc, #80]	; (801c3a0 <xTaskRemoveFromEventList+0xa8>)
 801c350:	189a      	adds	r2, r3, r2
 801c352:	68bb      	ldr	r3, [r7, #8]
 801c354:	3304      	adds	r3, #4
 801c356:	0019      	movs	r1, r3
 801c358:	0010      	movs	r0, r2
 801c35a:	f7fe ff12 	bl	801b182 <vListInsertEnd>
 801c35e:	e007      	b.n	801c370 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801c360:	68bb      	ldr	r3, [r7, #8]
 801c362:	3318      	adds	r3, #24
 801c364:	001a      	movs	r2, r3
 801c366:	4b0f      	ldr	r3, [pc, #60]	; (801c3a4 <xTaskRemoveFromEventList+0xac>)
 801c368:	0011      	movs	r1, r2
 801c36a:	0018      	movs	r0, r3
 801c36c:	f7fe ff09 	bl	801b182 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801c370:	68bb      	ldr	r3, [r7, #8]
 801c372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c374:	4b0c      	ldr	r3, [pc, #48]	; (801c3a8 <xTaskRemoveFromEventList+0xb0>)
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c37a:	429a      	cmp	r2, r3
 801c37c:	d905      	bls.n	801c38a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801c37e:	2301      	movs	r3, #1
 801c380:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801c382:	4b0a      	ldr	r3, [pc, #40]	; (801c3ac <xTaskRemoveFromEventList+0xb4>)
 801c384:	2201      	movs	r2, #1
 801c386:	601a      	str	r2, [r3, #0]
 801c388:	e001      	b.n	801c38e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 801c38a:	2300      	movs	r3, #0
 801c38c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801c38e:	68fb      	ldr	r3, [r7, #12]
}
 801c390:	0018      	movs	r0, r3
 801c392:	46bd      	mov	sp, r7
 801c394:	b004      	add	sp, #16
 801c396:	bd80      	pop	{r7, pc}
 801c398:	2000117c 	.word	0x2000117c
 801c39c:	2000115c 	.word	0x2000115c
 801c3a0:	20000c84 	.word	0x20000c84
 801c3a4:	20001114 	.word	0x20001114
 801c3a8:	20000c80 	.word	0x20000c80
 801c3ac:	20001168 	.word	0x20001168

0801c3b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b082      	sub	sp, #8
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801c3b8:	4b05      	ldr	r3, [pc, #20]	; (801c3d0 <vTaskInternalSetTimeOutState+0x20>)
 801c3ba:	681a      	ldr	r2, [r3, #0]
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801c3c0:	4b04      	ldr	r3, [pc, #16]	; (801c3d4 <vTaskInternalSetTimeOutState+0x24>)
 801c3c2:	681a      	ldr	r2, [r3, #0]
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	605a      	str	r2, [r3, #4]
}
 801c3c8:	46c0      	nop			; (mov r8, r8)
 801c3ca:	46bd      	mov	sp, r7
 801c3cc:	b002      	add	sp, #8
 801c3ce:	bd80      	pop	{r7, pc}
 801c3d0:	2000116c 	.word	0x2000116c
 801c3d4:	20001158 	.word	0x20001158

0801c3d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801c3d8:	b580      	push	{r7, lr}
 801c3da:	b086      	sub	sp, #24
 801c3dc:	af00      	add	r7, sp, #0
 801c3de:	6078      	str	r0, [r7, #4]
 801c3e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d101      	bne.n	801c3ec <xTaskCheckForTimeOut+0x14>
 801c3e8:	b672      	cpsid	i
 801c3ea:	e7fe      	b.n	801c3ea <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 801c3ec:	683b      	ldr	r3, [r7, #0]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d101      	bne.n	801c3f6 <xTaskCheckForTimeOut+0x1e>
 801c3f2:	b672      	cpsid	i
 801c3f4:	e7fe      	b.n	801c3f4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 801c3f6:	f000 fd93 	bl	801cf20 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801c3fa:	4b1d      	ldr	r3, [pc, #116]	; (801c470 <xTaskCheckForTimeOut+0x98>)
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	685b      	ldr	r3, [r3, #4]
 801c404:	693a      	ldr	r2, [r7, #16]
 801c406:	1ad3      	subs	r3, r2, r3
 801c408:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801c40a:	683b      	ldr	r3, [r7, #0]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	3301      	adds	r3, #1
 801c410:	d102      	bne.n	801c418 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801c412:	2300      	movs	r3, #0
 801c414:	617b      	str	r3, [r7, #20]
 801c416:	e024      	b.n	801c462 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	681a      	ldr	r2, [r3, #0]
 801c41c:	4b15      	ldr	r3, [pc, #84]	; (801c474 <xTaskCheckForTimeOut+0x9c>)
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	429a      	cmp	r2, r3
 801c422:	d007      	beq.n	801c434 <xTaskCheckForTimeOut+0x5c>
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	685b      	ldr	r3, [r3, #4]
 801c428:	693a      	ldr	r2, [r7, #16]
 801c42a:	429a      	cmp	r2, r3
 801c42c:	d302      	bcc.n	801c434 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801c42e:	2301      	movs	r3, #1
 801c430:	617b      	str	r3, [r7, #20]
 801c432:	e016      	b.n	801c462 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801c434:	683b      	ldr	r3, [r7, #0]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	68fa      	ldr	r2, [r7, #12]
 801c43a:	429a      	cmp	r2, r3
 801c43c:	d20c      	bcs.n	801c458 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801c43e:	683b      	ldr	r3, [r7, #0]
 801c440:	681a      	ldr	r2, [r3, #0]
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	1ad2      	subs	r2, r2, r3
 801c446:	683b      	ldr	r3, [r7, #0]
 801c448:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	0018      	movs	r0, r3
 801c44e:	f7ff ffaf 	bl	801c3b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801c452:	2300      	movs	r3, #0
 801c454:	617b      	str	r3, [r7, #20]
 801c456:	e004      	b.n	801c462 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 801c458:	683b      	ldr	r3, [r7, #0]
 801c45a:	2200      	movs	r2, #0
 801c45c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801c45e:	2301      	movs	r3, #1
 801c460:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801c462:	f000 fd6f 	bl	801cf44 <vPortExitCritical>

	return xReturn;
 801c466:	697b      	ldr	r3, [r7, #20]
}
 801c468:	0018      	movs	r0, r3
 801c46a:	46bd      	mov	sp, r7
 801c46c:	b006      	add	sp, #24
 801c46e:	bd80      	pop	{r7, pc}
 801c470:	20001158 	.word	0x20001158
 801c474:	2000116c 	.word	0x2000116c

0801c478 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801c478:	b580      	push	{r7, lr}
 801c47a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801c47c:	4b02      	ldr	r3, [pc, #8]	; (801c488 <vTaskMissedYield+0x10>)
 801c47e:	2201      	movs	r2, #1
 801c480:	601a      	str	r2, [r3, #0]
}
 801c482:	46c0      	nop			; (mov r8, r8)
 801c484:	46bd      	mov	sp, r7
 801c486:	bd80      	pop	{r7, pc}
 801c488:	20001168 	.word	0x20001168

0801c48c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b082      	sub	sp, #8
 801c490:	af00      	add	r7, sp, #0
 801c492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801c494:	f000 f84e 	bl	801c534 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801c498:	4b03      	ldr	r3, [pc, #12]	; (801c4a8 <prvIdleTask+0x1c>)
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	2b01      	cmp	r3, #1
 801c49e:	d9f9      	bls.n	801c494 <prvIdleTask+0x8>
			{
				taskYIELD();
 801c4a0:	f000 fd2e 	bl	801cf00 <vPortYield>
		prvCheckTasksWaitingTermination();
 801c4a4:	e7f6      	b.n	801c494 <prvIdleTask+0x8>
 801c4a6:	46c0      	nop			; (mov r8, r8)
 801c4a8:	20000c84 	.word	0x20000c84

0801c4ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801c4ac:	b580      	push	{r7, lr}
 801c4ae:	b082      	sub	sp, #8
 801c4b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801c4b2:	2300      	movs	r3, #0
 801c4b4:	607b      	str	r3, [r7, #4]
 801c4b6:	e00c      	b.n	801c4d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801c4b8:	687a      	ldr	r2, [r7, #4]
 801c4ba:	0013      	movs	r3, r2
 801c4bc:	009b      	lsls	r3, r3, #2
 801c4be:	189b      	adds	r3, r3, r2
 801c4c0:	009b      	lsls	r3, r3, #2
 801c4c2:	4a14      	ldr	r2, [pc, #80]	; (801c514 <prvInitialiseTaskLists+0x68>)
 801c4c4:	189b      	adds	r3, r3, r2
 801c4c6:	0018      	movs	r0, r3
 801c4c8:	f7fe fe32 	bl	801b130 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	3301      	adds	r3, #1
 801c4d0:	607b      	str	r3, [r7, #4]
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	2b37      	cmp	r3, #55	; 0x37
 801c4d6:	d9ef      	bls.n	801c4b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801c4d8:	4b0f      	ldr	r3, [pc, #60]	; (801c518 <prvInitialiseTaskLists+0x6c>)
 801c4da:	0018      	movs	r0, r3
 801c4dc:	f7fe fe28 	bl	801b130 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801c4e0:	4b0e      	ldr	r3, [pc, #56]	; (801c51c <prvInitialiseTaskLists+0x70>)
 801c4e2:	0018      	movs	r0, r3
 801c4e4:	f7fe fe24 	bl	801b130 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801c4e8:	4b0d      	ldr	r3, [pc, #52]	; (801c520 <prvInitialiseTaskLists+0x74>)
 801c4ea:	0018      	movs	r0, r3
 801c4ec:	f7fe fe20 	bl	801b130 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801c4f0:	4b0c      	ldr	r3, [pc, #48]	; (801c524 <prvInitialiseTaskLists+0x78>)
 801c4f2:	0018      	movs	r0, r3
 801c4f4:	f7fe fe1c 	bl	801b130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801c4f8:	4b0b      	ldr	r3, [pc, #44]	; (801c528 <prvInitialiseTaskLists+0x7c>)
 801c4fa:	0018      	movs	r0, r3
 801c4fc:	f7fe fe18 	bl	801b130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801c500:	4b0a      	ldr	r3, [pc, #40]	; (801c52c <prvInitialiseTaskLists+0x80>)
 801c502:	4a05      	ldr	r2, [pc, #20]	; (801c518 <prvInitialiseTaskLists+0x6c>)
 801c504:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801c506:	4b0a      	ldr	r3, [pc, #40]	; (801c530 <prvInitialiseTaskLists+0x84>)
 801c508:	4a04      	ldr	r2, [pc, #16]	; (801c51c <prvInitialiseTaskLists+0x70>)
 801c50a:	601a      	str	r2, [r3, #0]
}
 801c50c:	46c0      	nop			; (mov r8, r8)
 801c50e:	46bd      	mov	sp, r7
 801c510:	b002      	add	sp, #8
 801c512:	bd80      	pop	{r7, pc}
 801c514:	20000c84 	.word	0x20000c84
 801c518:	200010e4 	.word	0x200010e4
 801c51c:	200010f8 	.word	0x200010f8
 801c520:	20001114 	.word	0x20001114
 801c524:	20001128 	.word	0x20001128
 801c528:	20001140 	.word	0x20001140
 801c52c:	2000110c 	.word	0x2000110c
 801c530:	20001110 	.word	0x20001110

0801c534 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801c534:	b580      	push	{r7, lr}
 801c536:	b082      	sub	sp, #8
 801c538:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801c53a:	e01a      	b.n	801c572 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 801c53c:	f000 fcf0 	bl	801cf20 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c540:	4b10      	ldr	r3, [pc, #64]	; (801c584 <prvCheckTasksWaitingTermination+0x50>)
 801c542:	68db      	ldr	r3, [r3, #12]
 801c544:	68db      	ldr	r3, [r3, #12]
 801c546:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	3304      	adds	r3, #4
 801c54c:	0018      	movs	r0, r3
 801c54e:	f7fe fe70 	bl	801b232 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801c552:	4b0d      	ldr	r3, [pc, #52]	; (801c588 <prvCheckTasksWaitingTermination+0x54>)
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	1e5a      	subs	r2, r3, #1
 801c558:	4b0b      	ldr	r3, [pc, #44]	; (801c588 <prvCheckTasksWaitingTermination+0x54>)
 801c55a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 801c55c:	4b0b      	ldr	r3, [pc, #44]	; (801c58c <prvCheckTasksWaitingTermination+0x58>)
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	1e5a      	subs	r2, r3, #1
 801c562:	4b0a      	ldr	r3, [pc, #40]	; (801c58c <prvCheckTasksWaitingTermination+0x58>)
 801c564:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 801c566:	f000 fced 	bl	801cf44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	0018      	movs	r0, r3
 801c56e:	f000 f80f 	bl	801c590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801c572:	4b06      	ldr	r3, [pc, #24]	; (801c58c <prvCheckTasksWaitingTermination+0x58>)
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d1e0      	bne.n	801c53c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801c57a:	46c0      	nop			; (mov r8, r8)
 801c57c:	46c0      	nop			; (mov r8, r8)
 801c57e:	46bd      	mov	sp, r7
 801c580:	b002      	add	sp, #8
 801c582:	bd80      	pop	{r7, pc}
 801c584:	20001128 	.word	0x20001128
 801c588:	20001154 	.word	0x20001154
 801c58c:	2000113c 	.word	0x2000113c

0801c590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801c590:	b580      	push	{r7, lr}
 801c592:	b082      	sub	sp, #8
 801c594:	af00      	add	r7, sp, #0
 801c596:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	3354      	adds	r3, #84	; 0x54
 801c59c:	0018      	movs	r0, r3
 801c59e:	f000 ff41 	bl	801d424 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	22b9      	movs	r2, #185	; 0xb9
 801c5a6:	5c9b      	ldrb	r3, [r3, r2]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d109      	bne.n	801c5c0 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5b0:	0018      	movs	r0, r3
 801c5b2:	f000 fdf3 	bl	801d19c <vPortFree>
				vPortFree( pxTCB );
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	0018      	movs	r0, r3
 801c5ba:	f000 fdef 	bl	801d19c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801c5be:	e010      	b.n	801c5e2 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	22b9      	movs	r2, #185	; 0xb9
 801c5c4:	5c9b      	ldrb	r3, [r3, r2]
 801c5c6:	2b01      	cmp	r3, #1
 801c5c8:	d104      	bne.n	801c5d4 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	0018      	movs	r0, r3
 801c5ce:	f000 fde5 	bl	801d19c <vPortFree>
	}
 801c5d2:	e006      	b.n	801c5e2 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	22b9      	movs	r2, #185	; 0xb9
 801c5d8:	5c9b      	ldrb	r3, [r3, r2]
 801c5da:	2b02      	cmp	r3, #2
 801c5dc:	d001      	beq.n	801c5e2 <prvDeleteTCB+0x52>
 801c5de:	b672      	cpsid	i
 801c5e0:	e7fe      	b.n	801c5e0 <prvDeleteTCB+0x50>
	}
 801c5e2:	46c0      	nop			; (mov r8, r8)
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	b002      	add	sp, #8
 801c5e8:	bd80      	pop	{r7, pc}
	...

0801c5ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801c5ec:	b580      	push	{r7, lr}
 801c5ee:	b082      	sub	sp, #8
 801c5f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801c5f2:	4b0b      	ldr	r3, [pc, #44]	; (801c620 <prvResetNextTaskUnblockTime+0x34>)
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d104      	bne.n	801c606 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801c5fc:	4b09      	ldr	r3, [pc, #36]	; (801c624 <prvResetNextTaskUnblockTime+0x38>)
 801c5fe:	2201      	movs	r2, #1
 801c600:	4252      	negs	r2, r2
 801c602:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801c604:	e008      	b.n	801c618 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c606:	4b06      	ldr	r3, [pc, #24]	; (801c620 <prvResetNextTaskUnblockTime+0x34>)
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	68db      	ldr	r3, [r3, #12]
 801c60c:	68db      	ldr	r3, [r3, #12]
 801c60e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	685a      	ldr	r2, [r3, #4]
 801c614:	4b03      	ldr	r3, [pc, #12]	; (801c624 <prvResetNextTaskUnblockTime+0x38>)
 801c616:	601a      	str	r2, [r3, #0]
}
 801c618:	46c0      	nop			; (mov r8, r8)
 801c61a:	46bd      	mov	sp, r7
 801c61c:	b002      	add	sp, #8
 801c61e:	bd80      	pop	{r7, pc}
 801c620:	2000110c 	.word	0x2000110c
 801c624:	20001174 	.word	0x20001174

0801c628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801c628:	b580      	push	{r7, lr}
 801c62a:	b082      	sub	sp, #8
 801c62c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801c62e:	4b0a      	ldr	r3, [pc, #40]	; (801c658 <xTaskGetSchedulerState+0x30>)
 801c630:	681b      	ldr	r3, [r3, #0]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d102      	bne.n	801c63c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801c636:	2301      	movs	r3, #1
 801c638:	607b      	str	r3, [r7, #4]
 801c63a:	e008      	b.n	801c64e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c63c:	4b07      	ldr	r3, [pc, #28]	; (801c65c <xTaskGetSchedulerState+0x34>)
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d102      	bne.n	801c64a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801c644:	2302      	movs	r3, #2
 801c646:	607b      	str	r3, [r7, #4]
 801c648:	e001      	b.n	801c64e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801c64a:	2300      	movs	r3, #0
 801c64c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801c64e:	687b      	ldr	r3, [r7, #4]
	}
 801c650:	0018      	movs	r0, r3
 801c652:	46bd      	mov	sp, r7
 801c654:	b002      	add	sp, #8
 801c656:	bd80      	pop	{r7, pc}
 801c658:	20001160 	.word	0x20001160
 801c65c:	2000117c 	.word	0x2000117c

0801c660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801c660:	b580      	push	{r7, lr}
 801c662:	b084      	sub	sp, #16
 801c664:	af00      	add	r7, sp, #0
 801c666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801c66c:	2300      	movs	r3, #0
 801c66e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	2b00      	cmp	r3, #0
 801c674:	d044      	beq.n	801c700 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801c676:	4b25      	ldr	r3, [pc, #148]	; (801c70c <xTaskPriorityDisinherit+0xac>)
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	68ba      	ldr	r2, [r7, #8]
 801c67c:	429a      	cmp	r2, r3
 801c67e:	d001      	beq.n	801c684 <xTaskPriorityDisinherit+0x24>
 801c680:	b672      	cpsid	i
 801c682:	e7fe      	b.n	801c682 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 801c684:	68bb      	ldr	r3, [r7, #8]
 801c686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d101      	bne.n	801c690 <xTaskPriorityDisinherit+0x30>
 801c68c:	b672      	cpsid	i
 801c68e:	e7fe      	b.n	801c68e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 801c690:	68bb      	ldr	r3, [r7, #8]
 801c692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c694:	1e5a      	subs	r2, r3, #1
 801c696:	68bb      	ldr	r3, [r7, #8]
 801c698:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801c69a:	68bb      	ldr	r3, [r7, #8]
 801c69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c69e:	68bb      	ldr	r3, [r7, #8]
 801c6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c6a2:	429a      	cmp	r2, r3
 801c6a4:	d02c      	beq.n	801c700 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801c6a6:	68bb      	ldr	r3, [r7, #8]
 801c6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d128      	bne.n	801c700 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c6ae:	68bb      	ldr	r3, [r7, #8]
 801c6b0:	3304      	adds	r3, #4
 801c6b2:	0018      	movs	r0, r3
 801c6b4:	f7fe fdbd 	bl	801b232 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801c6b8:	68bb      	ldr	r3, [r7, #8]
 801c6ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c6bc:	68bb      	ldr	r3, [r7, #8]
 801c6be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c6c0:	68bb      	ldr	r3, [r7, #8]
 801c6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6c4:	2238      	movs	r2, #56	; 0x38
 801c6c6:	1ad2      	subs	r2, r2, r3
 801c6c8:	68bb      	ldr	r3, [r7, #8]
 801c6ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801c6cc:	68bb      	ldr	r3, [r7, #8]
 801c6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c6d0:	4b0f      	ldr	r3, [pc, #60]	; (801c710 <xTaskPriorityDisinherit+0xb0>)
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	429a      	cmp	r2, r3
 801c6d6:	d903      	bls.n	801c6e0 <xTaskPriorityDisinherit+0x80>
 801c6d8:	68bb      	ldr	r3, [r7, #8]
 801c6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c6dc:	4b0c      	ldr	r3, [pc, #48]	; (801c710 <xTaskPriorityDisinherit+0xb0>)
 801c6de:	601a      	str	r2, [r3, #0]
 801c6e0:	68bb      	ldr	r3, [r7, #8]
 801c6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c6e4:	0013      	movs	r3, r2
 801c6e6:	009b      	lsls	r3, r3, #2
 801c6e8:	189b      	adds	r3, r3, r2
 801c6ea:	009b      	lsls	r3, r3, #2
 801c6ec:	4a09      	ldr	r2, [pc, #36]	; (801c714 <xTaskPriorityDisinherit+0xb4>)
 801c6ee:	189a      	adds	r2, r3, r2
 801c6f0:	68bb      	ldr	r3, [r7, #8]
 801c6f2:	3304      	adds	r3, #4
 801c6f4:	0019      	movs	r1, r3
 801c6f6:	0010      	movs	r0, r2
 801c6f8:	f7fe fd43 	bl	801b182 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801c6fc:	2301      	movs	r3, #1
 801c6fe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801c700:	68fb      	ldr	r3, [r7, #12]
	}
 801c702:	0018      	movs	r0, r3
 801c704:	46bd      	mov	sp, r7
 801c706:	b004      	add	sp, #16
 801c708:	bd80      	pop	{r7, pc}
 801c70a:	46c0      	nop			; (mov r8, r8)
 801c70c:	20000c80 	.word	0x20000c80
 801c710:	2000115c 	.word	0x2000115c
 801c714:	20000c84 	.word	0x20000c84

0801c718 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801c718:	b580      	push	{r7, lr}
 801c71a:	b084      	sub	sp, #16
 801c71c:	af00      	add	r7, sp, #0
 801c71e:	6078      	str	r0, [r7, #4]
 801c720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801c722:	4b21      	ldr	r3, [pc, #132]	; (801c7a8 <prvAddCurrentTaskToDelayedList+0x90>)
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c728:	4b20      	ldr	r3, [pc, #128]	; (801c7ac <prvAddCurrentTaskToDelayedList+0x94>)
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	3304      	adds	r3, #4
 801c72e:	0018      	movs	r0, r3
 801c730:	f7fe fd7f 	bl	801b232 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	3301      	adds	r3, #1
 801c738:	d10b      	bne.n	801c752 <prvAddCurrentTaskToDelayedList+0x3a>
 801c73a:	683b      	ldr	r3, [r7, #0]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d008      	beq.n	801c752 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c740:	4b1a      	ldr	r3, [pc, #104]	; (801c7ac <prvAddCurrentTaskToDelayedList+0x94>)
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	1d1a      	adds	r2, r3, #4
 801c746:	4b1a      	ldr	r3, [pc, #104]	; (801c7b0 <prvAddCurrentTaskToDelayedList+0x98>)
 801c748:	0011      	movs	r1, r2
 801c74a:	0018      	movs	r0, r3
 801c74c:	f7fe fd19 	bl	801b182 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801c750:	e026      	b.n	801c7a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801c752:	68fa      	ldr	r2, [r7, #12]
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	18d3      	adds	r3, r2, r3
 801c758:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801c75a:	4b14      	ldr	r3, [pc, #80]	; (801c7ac <prvAddCurrentTaskToDelayedList+0x94>)
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	68ba      	ldr	r2, [r7, #8]
 801c760:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801c762:	68ba      	ldr	r2, [r7, #8]
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	429a      	cmp	r2, r3
 801c768:	d209      	bcs.n	801c77e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c76a:	4b12      	ldr	r3, [pc, #72]	; (801c7b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801c76c:	681a      	ldr	r2, [r3, #0]
 801c76e:	4b0f      	ldr	r3, [pc, #60]	; (801c7ac <prvAddCurrentTaskToDelayedList+0x94>)
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	3304      	adds	r3, #4
 801c774:	0019      	movs	r1, r3
 801c776:	0010      	movs	r0, r2
 801c778:	f7fe fd25 	bl	801b1c6 <vListInsert>
}
 801c77c:	e010      	b.n	801c7a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c77e:	4b0e      	ldr	r3, [pc, #56]	; (801c7b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 801c780:	681a      	ldr	r2, [r3, #0]
 801c782:	4b0a      	ldr	r3, [pc, #40]	; (801c7ac <prvAddCurrentTaskToDelayedList+0x94>)
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	3304      	adds	r3, #4
 801c788:	0019      	movs	r1, r3
 801c78a:	0010      	movs	r0, r2
 801c78c:	f7fe fd1b 	bl	801b1c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801c790:	4b0a      	ldr	r3, [pc, #40]	; (801c7bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	68ba      	ldr	r2, [r7, #8]
 801c796:	429a      	cmp	r2, r3
 801c798:	d202      	bcs.n	801c7a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801c79a:	4b08      	ldr	r3, [pc, #32]	; (801c7bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801c79c:	68ba      	ldr	r2, [r7, #8]
 801c79e:	601a      	str	r2, [r3, #0]
}
 801c7a0:	46c0      	nop			; (mov r8, r8)
 801c7a2:	46bd      	mov	sp, r7
 801c7a4:	b004      	add	sp, #16
 801c7a6:	bd80      	pop	{r7, pc}
 801c7a8:	20001158 	.word	0x20001158
 801c7ac:	20000c80 	.word	0x20000c80
 801c7b0:	20001140 	.word	0x20001140
 801c7b4:	20001110 	.word	0x20001110
 801c7b8:	2000110c 	.word	0x2000110c
 801c7bc:	20001174 	.word	0x20001174

0801c7c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801c7c0:	b590      	push	{r4, r7, lr}
 801c7c2:	b089      	sub	sp, #36	; 0x24
 801c7c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801c7ca:	f000 fac9 	bl	801cd60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801c7ce:	4b17      	ldr	r3, [pc, #92]	; (801c82c <xTimerCreateTimerTask+0x6c>)
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d020      	beq.n	801c818 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801c7da:	2300      	movs	r3, #0
 801c7dc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801c7de:	003a      	movs	r2, r7
 801c7e0:	1d39      	adds	r1, r7, #4
 801c7e2:	2308      	movs	r3, #8
 801c7e4:	18fb      	adds	r3, r7, r3
 801c7e6:	0018      	movs	r0, r3
 801c7e8:	f7fe fc8a 	bl	801b100 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801c7ec:	683c      	ldr	r4, [r7, #0]
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	68ba      	ldr	r2, [r7, #8]
 801c7f2:	490f      	ldr	r1, [pc, #60]	; (801c830 <xTimerCreateTimerTask+0x70>)
 801c7f4:	480f      	ldr	r0, [pc, #60]	; (801c834 <xTimerCreateTimerTask+0x74>)
 801c7f6:	9202      	str	r2, [sp, #8]
 801c7f8:	9301      	str	r3, [sp, #4]
 801c7fa:	2302      	movs	r3, #2
 801c7fc:	9300      	str	r3, [sp, #0]
 801c7fe:	2300      	movs	r3, #0
 801c800:	0022      	movs	r2, r4
 801c802:	f7ff f968 	bl	801bad6 <xTaskCreateStatic>
 801c806:	0002      	movs	r2, r0
 801c808:	4b0b      	ldr	r3, [pc, #44]	; (801c838 <xTimerCreateTimerTask+0x78>)
 801c80a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801c80c:	4b0a      	ldr	r3, [pc, #40]	; (801c838 <xTimerCreateTimerTask+0x78>)
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	2b00      	cmp	r3, #0
 801c812:	d001      	beq.n	801c818 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801c814:	2301      	movs	r3, #1
 801c816:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d101      	bne.n	801c822 <xTimerCreateTimerTask+0x62>
 801c81e:	b672      	cpsid	i
 801c820:	e7fe      	b.n	801c820 <xTimerCreateTimerTask+0x60>
	return xReturn;
 801c822:	68fb      	ldr	r3, [r7, #12]
}
 801c824:	0018      	movs	r0, r3
 801c826:	46bd      	mov	sp, r7
 801c828:	b005      	add	sp, #20
 801c82a:	bd90      	pop	{r4, r7, pc}
 801c82c:	200011b0 	.word	0x200011b0
 801c830:	0801d5e0 	.word	0x0801d5e0
 801c834:	0801c959 	.word	0x0801c959
 801c838:	200011b4 	.word	0x200011b4

0801c83c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801c83c:	b590      	push	{r4, r7, lr}
 801c83e:	b08b      	sub	sp, #44	; 0x2c
 801c840:	af00      	add	r7, sp, #0
 801c842:	60f8      	str	r0, [r7, #12]
 801c844:	60b9      	str	r1, [r7, #8]
 801c846:	607a      	str	r2, [r7, #4]
 801c848:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801c84a:	2300      	movs	r3, #0
 801c84c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	2b00      	cmp	r3, #0
 801c852:	d101      	bne.n	801c858 <xTimerGenericCommand+0x1c>
 801c854:	b672      	cpsid	i
 801c856:	e7fe      	b.n	801c856 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801c858:	4b1c      	ldr	r3, [pc, #112]	; (801c8cc <xTimerGenericCommand+0x90>)
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d030      	beq.n	801c8c2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801c860:	2414      	movs	r4, #20
 801c862:	193b      	adds	r3, r7, r4
 801c864:	68ba      	ldr	r2, [r7, #8]
 801c866:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801c868:	193b      	adds	r3, r7, r4
 801c86a:	687a      	ldr	r2, [r7, #4]
 801c86c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801c86e:	193b      	adds	r3, r7, r4
 801c870:	68fa      	ldr	r2, [r7, #12]
 801c872:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801c874:	68bb      	ldr	r3, [r7, #8]
 801c876:	2b05      	cmp	r3, #5
 801c878:	dc19      	bgt.n	801c8ae <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801c87a:	f7ff fed5 	bl	801c628 <xTaskGetSchedulerState>
 801c87e:	0003      	movs	r3, r0
 801c880:	2b02      	cmp	r3, #2
 801c882:	d109      	bne.n	801c898 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801c884:	4b11      	ldr	r3, [pc, #68]	; (801c8cc <xTimerGenericCommand+0x90>)
 801c886:	6818      	ldr	r0, [r3, #0]
 801c888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c88a:	1939      	adds	r1, r7, r4
 801c88c:	2300      	movs	r3, #0
 801c88e:	f7fe fdbf 	bl	801b410 <xQueueGenericSend>
 801c892:	0003      	movs	r3, r0
 801c894:	627b      	str	r3, [r7, #36]	; 0x24
 801c896:	e014      	b.n	801c8c2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801c898:	4b0c      	ldr	r3, [pc, #48]	; (801c8cc <xTimerGenericCommand+0x90>)
 801c89a:	6818      	ldr	r0, [r3, #0]
 801c89c:	2314      	movs	r3, #20
 801c89e:	18f9      	adds	r1, r7, r3
 801c8a0:	2300      	movs	r3, #0
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	f7fe fdb4 	bl	801b410 <xQueueGenericSend>
 801c8a8:	0003      	movs	r3, r0
 801c8aa:	627b      	str	r3, [r7, #36]	; 0x24
 801c8ac:	e009      	b.n	801c8c2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801c8ae:	4b07      	ldr	r3, [pc, #28]	; (801c8cc <xTimerGenericCommand+0x90>)
 801c8b0:	6818      	ldr	r0, [r3, #0]
 801c8b2:	683a      	ldr	r2, [r7, #0]
 801c8b4:	2314      	movs	r3, #20
 801c8b6:	18f9      	adds	r1, r7, r3
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	f7fe fe6d 	bl	801b598 <xQueueGenericSendFromISR>
 801c8be:	0003      	movs	r3, r0
 801c8c0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801c8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c8c4:	0018      	movs	r0, r3
 801c8c6:	46bd      	mov	sp, r7
 801c8c8:	b00b      	add	sp, #44	; 0x2c
 801c8ca:	bd90      	pop	{r4, r7, pc}
 801c8cc:	200011b0 	.word	0x200011b0

0801c8d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801c8d0:	b580      	push	{r7, lr}
 801c8d2:	b086      	sub	sp, #24
 801c8d4:	af02      	add	r7, sp, #8
 801c8d6:	6078      	str	r0, [r7, #4]
 801c8d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c8da:	4b1e      	ldr	r3, [pc, #120]	; (801c954 <prvProcessExpiredTimer+0x84>)
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	68db      	ldr	r3, [r3, #12]
 801c8e0:	68db      	ldr	r3, [r3, #12]
 801c8e2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	3304      	adds	r3, #4
 801c8e8:	0018      	movs	r0, r3
 801c8ea:	f7fe fca2 	bl	801b232 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	2228      	movs	r2, #40	; 0x28
 801c8f2:	5c9b      	ldrb	r3, [r3, r2]
 801c8f4:	001a      	movs	r2, r3
 801c8f6:	2304      	movs	r3, #4
 801c8f8:	4013      	ands	r3, r2
 801c8fa:	d019      	beq.n	801c930 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	699a      	ldr	r2, [r3, #24]
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	18d1      	adds	r1, r2, r3
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	683a      	ldr	r2, [r7, #0]
 801c908:	68f8      	ldr	r0, [r7, #12]
 801c90a:	f000 f8c3 	bl	801ca94 <prvInsertTimerInActiveList>
 801c90e:	1e03      	subs	r3, r0, #0
 801c910:	d017      	beq.n	801c942 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c912:	687a      	ldr	r2, [r7, #4]
 801c914:	68f8      	ldr	r0, [r7, #12]
 801c916:	2300      	movs	r3, #0
 801c918:	9300      	str	r3, [sp, #0]
 801c91a:	2300      	movs	r3, #0
 801c91c:	2100      	movs	r1, #0
 801c91e:	f7ff ff8d 	bl	801c83c <xTimerGenericCommand>
 801c922:	0003      	movs	r3, r0
 801c924:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 801c926:	68bb      	ldr	r3, [r7, #8]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d10a      	bne.n	801c942 <prvProcessExpiredTimer+0x72>
 801c92c:	b672      	cpsid	i
 801c92e:	e7fe      	b.n	801c92e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	2228      	movs	r2, #40	; 0x28
 801c934:	5c9b      	ldrb	r3, [r3, r2]
 801c936:	2201      	movs	r2, #1
 801c938:	4393      	bics	r3, r2
 801c93a:	b2d9      	uxtb	r1, r3
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	2228      	movs	r2, #40	; 0x28
 801c940:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	6a1b      	ldr	r3, [r3, #32]
 801c946:	68fa      	ldr	r2, [r7, #12]
 801c948:	0010      	movs	r0, r2
 801c94a:	4798      	blx	r3
}
 801c94c:	46c0      	nop			; (mov r8, r8)
 801c94e:	46bd      	mov	sp, r7
 801c950:	b004      	add	sp, #16
 801c952:	bd80      	pop	{r7, pc}
 801c954:	200011a8 	.word	0x200011a8

0801c958 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801c958:	b580      	push	{r7, lr}
 801c95a:	b084      	sub	sp, #16
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c960:	2308      	movs	r3, #8
 801c962:	18fb      	adds	r3, r7, r3
 801c964:	0018      	movs	r0, r3
 801c966:	f000 f853 	bl	801ca10 <prvGetNextExpireTime>
 801c96a:	0003      	movs	r3, r0
 801c96c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801c96e:	68ba      	ldr	r2, [r7, #8]
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	0011      	movs	r1, r2
 801c974:	0018      	movs	r0, r3
 801c976:	f000 f803 	bl	801c980 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801c97a:	f000 f8cd 	bl	801cb18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c97e:	e7ef      	b.n	801c960 <prvTimerTask+0x8>

0801c980 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801c980:	b580      	push	{r7, lr}
 801c982:	b084      	sub	sp, #16
 801c984:	af00      	add	r7, sp, #0
 801c986:	6078      	str	r0, [r7, #4]
 801c988:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801c98a:	f7ff fac1 	bl	801bf10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c98e:	2308      	movs	r3, #8
 801c990:	18fb      	adds	r3, r7, r3
 801c992:	0018      	movs	r0, r3
 801c994:	f000 f85e 	bl	801ca54 <prvSampleTimeNow>
 801c998:	0003      	movs	r3, r0
 801c99a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801c99c:	68bb      	ldr	r3, [r7, #8]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d12b      	bne.n	801c9fa <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801c9a2:	683b      	ldr	r3, [r7, #0]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d10c      	bne.n	801c9c2 <prvProcessTimerOrBlockTask+0x42>
 801c9a8:	687a      	ldr	r2, [r7, #4]
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	429a      	cmp	r2, r3
 801c9ae:	d808      	bhi.n	801c9c2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 801c9b0:	f7ff faba 	bl	801bf28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801c9b4:	68fa      	ldr	r2, [r7, #12]
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	0011      	movs	r1, r2
 801c9ba:	0018      	movs	r0, r3
 801c9bc:	f7ff ff88 	bl	801c8d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801c9c0:	e01d      	b.n	801c9fe <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 801c9c2:	683b      	ldr	r3, [r7, #0]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d008      	beq.n	801c9da <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801c9c8:	4b0f      	ldr	r3, [pc, #60]	; (801ca08 <prvProcessTimerOrBlockTask+0x88>)
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d101      	bne.n	801c9d6 <prvProcessTimerOrBlockTask+0x56>
 801c9d2:	2301      	movs	r3, #1
 801c9d4:	e000      	b.n	801c9d8 <prvProcessTimerOrBlockTask+0x58>
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801c9da:	4b0c      	ldr	r3, [pc, #48]	; (801ca0c <prvProcessTimerOrBlockTask+0x8c>)
 801c9dc:	6818      	ldr	r0, [r3, #0]
 801c9de:	687a      	ldr	r2, [r7, #4]
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	1ad3      	subs	r3, r2, r3
 801c9e4:	683a      	ldr	r2, [r7, #0]
 801c9e6:	0019      	movs	r1, r3
 801c9e8:	f7ff f842 	bl	801ba70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801c9ec:	f7ff fa9c 	bl	801bf28 <xTaskResumeAll>
 801c9f0:	1e03      	subs	r3, r0, #0
 801c9f2:	d104      	bne.n	801c9fe <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 801c9f4:	f000 fa84 	bl	801cf00 <vPortYield>
}
 801c9f8:	e001      	b.n	801c9fe <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 801c9fa:	f7ff fa95 	bl	801bf28 <xTaskResumeAll>
}
 801c9fe:	46c0      	nop			; (mov r8, r8)
 801ca00:	46bd      	mov	sp, r7
 801ca02:	b004      	add	sp, #16
 801ca04:	bd80      	pop	{r7, pc}
 801ca06:	46c0      	nop			; (mov r8, r8)
 801ca08:	200011ac 	.word	0x200011ac
 801ca0c:	200011b0 	.word	0x200011b0

0801ca10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801ca10:	b580      	push	{r7, lr}
 801ca12:	b084      	sub	sp, #16
 801ca14:	af00      	add	r7, sp, #0
 801ca16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801ca18:	4b0d      	ldr	r3, [pc, #52]	; (801ca50 <prvGetNextExpireTime+0x40>)
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	681b      	ldr	r3, [r3, #0]
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d101      	bne.n	801ca26 <prvGetNextExpireTime+0x16>
 801ca22:	2201      	movs	r2, #1
 801ca24:	e000      	b.n	801ca28 <prvGetNextExpireTime+0x18>
 801ca26:	2200      	movs	r2, #0
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d105      	bne.n	801ca40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ca34:	4b06      	ldr	r3, [pc, #24]	; (801ca50 <prvGetNextExpireTime+0x40>)
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	68db      	ldr	r3, [r3, #12]
 801ca3a:	681b      	ldr	r3, [r3, #0]
 801ca3c:	60fb      	str	r3, [r7, #12]
 801ca3e:	e001      	b.n	801ca44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801ca40:	2300      	movs	r3, #0
 801ca42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801ca44:	68fb      	ldr	r3, [r7, #12]
}
 801ca46:	0018      	movs	r0, r3
 801ca48:	46bd      	mov	sp, r7
 801ca4a:	b004      	add	sp, #16
 801ca4c:	bd80      	pop	{r7, pc}
 801ca4e:	46c0      	nop			; (mov r8, r8)
 801ca50:	200011a8 	.word	0x200011a8

0801ca54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801ca54:	b580      	push	{r7, lr}
 801ca56:	b084      	sub	sp, #16
 801ca58:	af00      	add	r7, sp, #0
 801ca5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801ca5c:	f7ff faf0 	bl	801c040 <xTaskGetTickCount>
 801ca60:	0003      	movs	r3, r0
 801ca62:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 801ca64:	4b0a      	ldr	r3, [pc, #40]	; (801ca90 <prvSampleTimeNow+0x3c>)
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	68fa      	ldr	r2, [r7, #12]
 801ca6a:	429a      	cmp	r2, r3
 801ca6c:	d205      	bcs.n	801ca7a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 801ca6e:	f000 f919 	bl	801cca4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	2201      	movs	r2, #1
 801ca76:	601a      	str	r2, [r3, #0]
 801ca78:	e002      	b.n	801ca80 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	2200      	movs	r2, #0
 801ca7e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801ca80:	4b03      	ldr	r3, [pc, #12]	; (801ca90 <prvSampleTimeNow+0x3c>)
 801ca82:	68fa      	ldr	r2, [r7, #12]
 801ca84:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 801ca86:	68fb      	ldr	r3, [r7, #12]
}
 801ca88:	0018      	movs	r0, r3
 801ca8a:	46bd      	mov	sp, r7
 801ca8c:	b004      	add	sp, #16
 801ca8e:	bd80      	pop	{r7, pc}
 801ca90:	200011b8 	.word	0x200011b8

0801ca94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801ca94:	b580      	push	{r7, lr}
 801ca96:	b086      	sub	sp, #24
 801ca98:	af00      	add	r7, sp, #0
 801ca9a:	60f8      	str	r0, [r7, #12]
 801ca9c:	60b9      	str	r1, [r7, #8]
 801ca9e:	607a      	str	r2, [r7, #4]
 801caa0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801caa2:	2300      	movs	r3, #0
 801caa4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801caa6:	68fb      	ldr	r3, [r7, #12]
 801caa8:	68ba      	ldr	r2, [r7, #8]
 801caaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	68fa      	ldr	r2, [r7, #12]
 801cab0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801cab2:	68ba      	ldr	r2, [r7, #8]
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	429a      	cmp	r2, r3
 801cab8:	d812      	bhi.n	801cae0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801caba:	687a      	ldr	r2, [r7, #4]
 801cabc:	683b      	ldr	r3, [r7, #0]
 801cabe:	1ad2      	subs	r2, r2, r3
 801cac0:	68fb      	ldr	r3, [r7, #12]
 801cac2:	699b      	ldr	r3, [r3, #24]
 801cac4:	429a      	cmp	r2, r3
 801cac6:	d302      	bcc.n	801cace <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801cac8:	2301      	movs	r3, #1
 801caca:	617b      	str	r3, [r7, #20]
 801cacc:	e01b      	b.n	801cb06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801cace:	4b10      	ldr	r3, [pc, #64]	; (801cb10 <prvInsertTimerInActiveList+0x7c>)
 801cad0:	681a      	ldr	r2, [r3, #0]
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	3304      	adds	r3, #4
 801cad6:	0019      	movs	r1, r3
 801cad8:	0010      	movs	r0, r2
 801cada:	f7fe fb74 	bl	801b1c6 <vListInsert>
 801cade:	e012      	b.n	801cb06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801cae0:	687a      	ldr	r2, [r7, #4]
 801cae2:	683b      	ldr	r3, [r7, #0]
 801cae4:	429a      	cmp	r2, r3
 801cae6:	d206      	bcs.n	801caf6 <prvInsertTimerInActiveList+0x62>
 801cae8:	68ba      	ldr	r2, [r7, #8]
 801caea:	683b      	ldr	r3, [r7, #0]
 801caec:	429a      	cmp	r2, r3
 801caee:	d302      	bcc.n	801caf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801caf0:	2301      	movs	r3, #1
 801caf2:	617b      	str	r3, [r7, #20]
 801caf4:	e007      	b.n	801cb06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801caf6:	4b07      	ldr	r3, [pc, #28]	; (801cb14 <prvInsertTimerInActiveList+0x80>)
 801caf8:	681a      	ldr	r2, [r3, #0]
 801cafa:	68fb      	ldr	r3, [r7, #12]
 801cafc:	3304      	adds	r3, #4
 801cafe:	0019      	movs	r1, r3
 801cb00:	0010      	movs	r0, r2
 801cb02:	f7fe fb60 	bl	801b1c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801cb06:	697b      	ldr	r3, [r7, #20]
}
 801cb08:	0018      	movs	r0, r3
 801cb0a:	46bd      	mov	sp, r7
 801cb0c:	b006      	add	sp, #24
 801cb0e:	bd80      	pop	{r7, pc}
 801cb10:	200011ac 	.word	0x200011ac
 801cb14:	200011a8 	.word	0x200011a8

0801cb18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801cb18:	b590      	push	{r4, r7, lr}
 801cb1a:	b08d      	sub	sp, #52	; 0x34
 801cb1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801cb1e:	e0ac      	b.n	801cc7a <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801cb20:	2208      	movs	r2, #8
 801cb22:	18bb      	adds	r3, r7, r2
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	da0f      	bge.n	801cb4a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801cb2a:	18bb      	adds	r3, r7, r2
 801cb2c:	3304      	adds	r3, #4
 801cb2e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d101      	bne.n	801cb3a <prvProcessReceivedCommands+0x22>
 801cb36:	b672      	cpsid	i
 801cb38:	e7fe      	b.n	801cb38 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb3c:	681a      	ldr	r2, [r3, #0]
 801cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb40:	6858      	ldr	r0, [r3, #4]
 801cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb44:	689b      	ldr	r3, [r3, #8]
 801cb46:	0019      	movs	r1, r3
 801cb48:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801cb4a:	2208      	movs	r2, #8
 801cb4c:	18bb      	adds	r3, r7, r2
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	da00      	bge.n	801cb56 <prvProcessReceivedCommands+0x3e>
 801cb54:	e090      	b.n	801cc78 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801cb56:	18bb      	adds	r3, r7, r2
 801cb58:	689b      	ldr	r3, [r3, #8]
 801cb5a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801cb5c:	6a3b      	ldr	r3, [r7, #32]
 801cb5e:	695b      	ldr	r3, [r3, #20]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d004      	beq.n	801cb6e <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801cb64:	6a3b      	ldr	r3, [r7, #32]
 801cb66:	3304      	adds	r3, #4
 801cb68:	0018      	movs	r0, r3
 801cb6a:	f7fe fb62 	bl	801b232 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801cb6e:	1d3b      	adds	r3, r7, #4
 801cb70:	0018      	movs	r0, r3
 801cb72:	f7ff ff6f 	bl	801ca54 <prvSampleTimeNow>
 801cb76:	0003      	movs	r3, r0
 801cb78:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 801cb7a:	2308      	movs	r3, #8
 801cb7c:	18fb      	adds	r3, r7, r3
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	2b09      	cmp	r3, #9
 801cb82:	d900      	bls.n	801cb86 <prvProcessReceivedCommands+0x6e>
 801cb84:	e079      	b.n	801cc7a <prvProcessReceivedCommands+0x162>
 801cb86:	009a      	lsls	r2, r3, #2
 801cb88:	4b44      	ldr	r3, [pc, #272]	; (801cc9c <prvProcessReceivedCommands+0x184>)
 801cb8a:	18d3      	adds	r3, r2, r3
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801cb90:	6a3b      	ldr	r3, [r7, #32]
 801cb92:	2228      	movs	r2, #40	; 0x28
 801cb94:	5c9b      	ldrb	r3, [r3, r2]
 801cb96:	2201      	movs	r2, #1
 801cb98:	4313      	orrs	r3, r2
 801cb9a:	b2d9      	uxtb	r1, r3
 801cb9c:	6a3b      	ldr	r3, [r7, #32]
 801cb9e:	2228      	movs	r2, #40	; 0x28
 801cba0:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801cba2:	2408      	movs	r4, #8
 801cba4:	193b      	adds	r3, r7, r4
 801cba6:	685a      	ldr	r2, [r3, #4]
 801cba8:	6a3b      	ldr	r3, [r7, #32]
 801cbaa:	699b      	ldr	r3, [r3, #24]
 801cbac:	18d1      	adds	r1, r2, r3
 801cbae:	193b      	adds	r3, r7, r4
 801cbb0:	685b      	ldr	r3, [r3, #4]
 801cbb2:	69fa      	ldr	r2, [r7, #28]
 801cbb4:	6a38      	ldr	r0, [r7, #32]
 801cbb6:	f7ff ff6d 	bl	801ca94 <prvInsertTimerInActiveList>
 801cbba:	1e03      	subs	r3, r0, #0
 801cbbc:	d05d      	beq.n	801cc7a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801cbbe:	6a3b      	ldr	r3, [r7, #32]
 801cbc0:	6a1b      	ldr	r3, [r3, #32]
 801cbc2:	6a3a      	ldr	r2, [r7, #32]
 801cbc4:	0010      	movs	r0, r2
 801cbc6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801cbc8:	6a3b      	ldr	r3, [r7, #32]
 801cbca:	2228      	movs	r2, #40	; 0x28
 801cbcc:	5c9b      	ldrb	r3, [r3, r2]
 801cbce:	001a      	movs	r2, r3
 801cbd0:	2304      	movs	r3, #4
 801cbd2:	4013      	ands	r3, r2
 801cbd4:	d051      	beq.n	801cc7a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801cbd6:	193b      	adds	r3, r7, r4
 801cbd8:	685a      	ldr	r2, [r3, #4]
 801cbda:	6a3b      	ldr	r3, [r7, #32]
 801cbdc:	699b      	ldr	r3, [r3, #24]
 801cbde:	18d2      	adds	r2, r2, r3
 801cbe0:	6a38      	ldr	r0, [r7, #32]
 801cbe2:	2300      	movs	r3, #0
 801cbe4:	9300      	str	r3, [sp, #0]
 801cbe6:	2300      	movs	r3, #0
 801cbe8:	2100      	movs	r1, #0
 801cbea:	f7ff fe27 	bl	801c83c <xTimerGenericCommand>
 801cbee:	0003      	movs	r3, r0
 801cbf0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 801cbf2:	69bb      	ldr	r3, [r7, #24]
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d140      	bne.n	801cc7a <prvProcessReceivedCommands+0x162>
 801cbf8:	b672      	cpsid	i
 801cbfa:	e7fe      	b.n	801cbfa <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801cbfc:	6a3b      	ldr	r3, [r7, #32]
 801cbfe:	2228      	movs	r2, #40	; 0x28
 801cc00:	5c9b      	ldrb	r3, [r3, r2]
 801cc02:	2201      	movs	r2, #1
 801cc04:	4393      	bics	r3, r2
 801cc06:	b2d9      	uxtb	r1, r3
 801cc08:	6a3b      	ldr	r3, [r7, #32]
 801cc0a:	2228      	movs	r2, #40	; 0x28
 801cc0c:	5499      	strb	r1, [r3, r2]
					break;
 801cc0e:	e034      	b.n	801cc7a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801cc10:	6a3b      	ldr	r3, [r7, #32]
 801cc12:	2228      	movs	r2, #40	; 0x28
 801cc14:	5c9b      	ldrb	r3, [r3, r2]
 801cc16:	2201      	movs	r2, #1
 801cc18:	4313      	orrs	r3, r2
 801cc1a:	b2d9      	uxtb	r1, r3
 801cc1c:	6a3b      	ldr	r3, [r7, #32]
 801cc1e:	2228      	movs	r2, #40	; 0x28
 801cc20:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801cc22:	2308      	movs	r3, #8
 801cc24:	18fb      	adds	r3, r7, r3
 801cc26:	685a      	ldr	r2, [r3, #4]
 801cc28:	6a3b      	ldr	r3, [r7, #32]
 801cc2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801cc2c:	6a3b      	ldr	r3, [r7, #32]
 801cc2e:	699b      	ldr	r3, [r3, #24]
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d101      	bne.n	801cc38 <prvProcessReceivedCommands+0x120>
 801cc34:	b672      	cpsid	i
 801cc36:	e7fe      	b.n	801cc36 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801cc38:	6a3b      	ldr	r3, [r7, #32]
 801cc3a:	699a      	ldr	r2, [r3, #24]
 801cc3c:	69fb      	ldr	r3, [r7, #28]
 801cc3e:	18d1      	adds	r1, r2, r3
 801cc40:	69fb      	ldr	r3, [r7, #28]
 801cc42:	69fa      	ldr	r2, [r7, #28]
 801cc44:	6a38      	ldr	r0, [r7, #32]
 801cc46:	f7ff ff25 	bl	801ca94 <prvInsertTimerInActiveList>
					break;
 801cc4a:	e016      	b.n	801cc7a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801cc4c:	6a3b      	ldr	r3, [r7, #32]
 801cc4e:	2228      	movs	r2, #40	; 0x28
 801cc50:	5c9b      	ldrb	r3, [r3, r2]
 801cc52:	001a      	movs	r2, r3
 801cc54:	2302      	movs	r3, #2
 801cc56:	4013      	ands	r3, r2
 801cc58:	d104      	bne.n	801cc64 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 801cc5a:	6a3b      	ldr	r3, [r7, #32]
 801cc5c:	0018      	movs	r0, r3
 801cc5e:	f000 fa9d 	bl	801d19c <vPortFree>
 801cc62:	e00a      	b.n	801cc7a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801cc64:	6a3b      	ldr	r3, [r7, #32]
 801cc66:	2228      	movs	r2, #40	; 0x28
 801cc68:	5c9b      	ldrb	r3, [r3, r2]
 801cc6a:	2201      	movs	r2, #1
 801cc6c:	4393      	bics	r3, r2
 801cc6e:	b2d9      	uxtb	r1, r3
 801cc70:	6a3b      	ldr	r3, [r7, #32]
 801cc72:	2228      	movs	r2, #40	; 0x28
 801cc74:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801cc76:	e000      	b.n	801cc7a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801cc78:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801cc7a:	4b09      	ldr	r3, [pc, #36]	; (801cca0 <prvProcessReceivedCommands+0x188>)
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	2208      	movs	r2, #8
 801cc80:	18b9      	adds	r1, r7, r2
 801cc82:	2200      	movs	r2, #0
 801cc84:	0018      	movs	r0, r3
 801cc86:	f7fe fcf8 	bl	801b67a <xQueueReceive>
 801cc8a:	1e03      	subs	r3, r0, #0
 801cc8c:	d000      	beq.n	801cc90 <prvProcessReceivedCommands+0x178>
 801cc8e:	e747      	b.n	801cb20 <prvProcessReceivedCommands+0x8>
	}
}
 801cc90:	46c0      	nop			; (mov r8, r8)
 801cc92:	46c0      	nop			; (mov r8, r8)
 801cc94:	46bd      	mov	sp, r7
 801cc96:	b00b      	add	sp, #44	; 0x2c
 801cc98:	bd90      	pop	{r4, r7, pc}
 801cc9a:	46c0      	nop			; (mov r8, r8)
 801cc9c:	0801d6a4 	.word	0x0801d6a4
 801cca0:	200011b0 	.word	0x200011b0

0801cca4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801cca4:	b580      	push	{r7, lr}
 801cca6:	b088      	sub	sp, #32
 801cca8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ccaa:	e041      	b.n	801cd30 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ccac:	4b2a      	ldr	r3, [pc, #168]	; (801cd58 <prvSwitchTimerLists+0xb4>)
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	68db      	ldr	r3, [r3, #12]
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ccb6:	4b28      	ldr	r3, [pc, #160]	; (801cd58 <prvSwitchTimerLists+0xb4>)
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	68db      	ldr	r3, [r3, #12]
 801ccbc:	68db      	ldr	r3, [r3, #12]
 801ccbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	3304      	adds	r3, #4
 801ccc4:	0018      	movs	r0, r3
 801ccc6:	f7fe fab4 	bl	801b232 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	6a1b      	ldr	r3, [r3, #32]
 801ccce:	68fa      	ldr	r2, [r7, #12]
 801ccd0:	0010      	movs	r0, r2
 801ccd2:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	2228      	movs	r2, #40	; 0x28
 801ccd8:	5c9b      	ldrb	r3, [r3, r2]
 801ccda:	001a      	movs	r2, r3
 801ccdc:	2304      	movs	r3, #4
 801ccde:	4013      	ands	r3, r2
 801cce0:	d026      	beq.n	801cd30 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	699b      	ldr	r3, [r3, #24]
 801cce6:	693a      	ldr	r2, [r7, #16]
 801cce8:	18d3      	adds	r3, r2, r3
 801ccea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801ccec:	68ba      	ldr	r2, [r7, #8]
 801ccee:	693b      	ldr	r3, [r7, #16]
 801ccf0:	429a      	cmp	r2, r3
 801ccf2:	d90e      	bls.n	801cd12 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801ccf4:	68fb      	ldr	r3, [r7, #12]
 801ccf6:	68ba      	ldr	r2, [r7, #8]
 801ccf8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ccfa:	68fb      	ldr	r3, [r7, #12]
 801ccfc:	68fa      	ldr	r2, [r7, #12]
 801ccfe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801cd00:	4b15      	ldr	r3, [pc, #84]	; (801cd58 <prvSwitchTimerLists+0xb4>)
 801cd02:	681a      	ldr	r2, [r3, #0]
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	3304      	adds	r3, #4
 801cd08:	0019      	movs	r1, r3
 801cd0a:	0010      	movs	r0, r2
 801cd0c:	f7fe fa5b 	bl	801b1c6 <vListInsert>
 801cd10:	e00e      	b.n	801cd30 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801cd12:	693a      	ldr	r2, [r7, #16]
 801cd14:	68f8      	ldr	r0, [r7, #12]
 801cd16:	2300      	movs	r3, #0
 801cd18:	9300      	str	r3, [sp, #0]
 801cd1a:	2300      	movs	r3, #0
 801cd1c:	2100      	movs	r1, #0
 801cd1e:	f7ff fd8d 	bl	801c83c <xTimerGenericCommand>
 801cd22:	0003      	movs	r3, r0
 801cd24:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d101      	bne.n	801cd30 <prvSwitchTimerLists+0x8c>
 801cd2c:	b672      	cpsid	i
 801cd2e:	e7fe      	b.n	801cd2e <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801cd30:	4b09      	ldr	r3, [pc, #36]	; (801cd58 <prvSwitchTimerLists+0xb4>)
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d1b8      	bne.n	801ccac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801cd3a:	4b07      	ldr	r3, [pc, #28]	; (801cd58 <prvSwitchTimerLists+0xb4>)
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801cd40:	4b06      	ldr	r3, [pc, #24]	; (801cd5c <prvSwitchTimerLists+0xb8>)
 801cd42:	681a      	ldr	r2, [r3, #0]
 801cd44:	4b04      	ldr	r3, [pc, #16]	; (801cd58 <prvSwitchTimerLists+0xb4>)
 801cd46:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 801cd48:	4b04      	ldr	r3, [pc, #16]	; (801cd5c <prvSwitchTimerLists+0xb8>)
 801cd4a:	697a      	ldr	r2, [r7, #20]
 801cd4c:	601a      	str	r2, [r3, #0]
}
 801cd4e:	46c0      	nop			; (mov r8, r8)
 801cd50:	46bd      	mov	sp, r7
 801cd52:	b006      	add	sp, #24
 801cd54:	bd80      	pop	{r7, pc}
 801cd56:	46c0      	nop			; (mov r8, r8)
 801cd58:	200011a8 	.word	0x200011a8
 801cd5c:	200011ac 	.word	0x200011ac

0801cd60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801cd60:	b580      	push	{r7, lr}
 801cd62:	b082      	sub	sp, #8
 801cd64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801cd66:	f000 f8db 	bl	801cf20 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801cd6a:	4b16      	ldr	r3, [pc, #88]	; (801cdc4 <prvCheckForValidListAndQueue+0x64>)
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d123      	bne.n	801cdba <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 801cd72:	4b15      	ldr	r3, [pc, #84]	; (801cdc8 <prvCheckForValidListAndQueue+0x68>)
 801cd74:	0018      	movs	r0, r3
 801cd76:	f7fe f9db 	bl	801b130 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801cd7a:	4b14      	ldr	r3, [pc, #80]	; (801cdcc <prvCheckForValidListAndQueue+0x6c>)
 801cd7c:	0018      	movs	r0, r3
 801cd7e:	f7fe f9d7 	bl	801b130 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801cd82:	4b13      	ldr	r3, [pc, #76]	; (801cdd0 <prvCheckForValidListAndQueue+0x70>)
 801cd84:	4a10      	ldr	r2, [pc, #64]	; (801cdc8 <prvCheckForValidListAndQueue+0x68>)
 801cd86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801cd88:	4b12      	ldr	r3, [pc, #72]	; (801cdd4 <prvCheckForValidListAndQueue+0x74>)
 801cd8a:	4a10      	ldr	r2, [pc, #64]	; (801cdcc <prvCheckForValidListAndQueue+0x6c>)
 801cd8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801cd8e:	4b12      	ldr	r3, [pc, #72]	; (801cdd8 <prvCheckForValidListAndQueue+0x78>)
 801cd90:	4a12      	ldr	r2, [pc, #72]	; (801cddc <prvCheckForValidListAndQueue+0x7c>)
 801cd92:	2100      	movs	r1, #0
 801cd94:	9100      	str	r1, [sp, #0]
 801cd96:	2110      	movs	r1, #16
 801cd98:	200a      	movs	r0, #10
 801cd9a:	f7fe fac6 	bl	801b32a <xQueueGenericCreateStatic>
 801cd9e:	0002      	movs	r2, r0
 801cda0:	4b08      	ldr	r3, [pc, #32]	; (801cdc4 <prvCheckForValidListAndQueue+0x64>)
 801cda2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801cda4:	4b07      	ldr	r3, [pc, #28]	; (801cdc4 <prvCheckForValidListAndQueue+0x64>)
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d006      	beq.n	801cdba <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801cdac:	4b05      	ldr	r3, [pc, #20]	; (801cdc4 <prvCheckForValidListAndQueue+0x64>)
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	4a0b      	ldr	r2, [pc, #44]	; (801cde0 <prvCheckForValidListAndQueue+0x80>)
 801cdb2:	0011      	movs	r1, r2
 801cdb4:	0018      	movs	r0, r3
 801cdb6:	f7fe fe33 	bl	801ba20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801cdba:	f000 f8c3 	bl	801cf44 <vPortExitCritical>
}
 801cdbe:	46c0      	nop			; (mov r8, r8)
 801cdc0:	46bd      	mov	sp, r7
 801cdc2:	bd80      	pop	{r7, pc}
 801cdc4:	200011b0 	.word	0x200011b0
 801cdc8:	20001180 	.word	0x20001180
 801cdcc:	20001194 	.word	0x20001194
 801cdd0:	200011a8 	.word	0x200011a8
 801cdd4:	200011ac 	.word	0x200011ac
 801cdd8:	2000125c 	.word	0x2000125c
 801cddc:	200011bc 	.word	0x200011bc
 801cde0:	0801d5e8 	.word	0x0801d5e8

0801cde4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801cde4:	b580      	push	{r7, lr}
 801cde6:	b084      	sub	sp, #16
 801cde8:	af00      	add	r7, sp, #0
 801cdea:	60f8      	str	r0, [r7, #12]
 801cdec:	60b9      	str	r1, [r7, #8]
 801cdee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	3b04      	subs	r3, #4
 801cdf4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	2280      	movs	r2, #128	; 0x80
 801cdfa:	0452      	lsls	r2, r2, #17
 801cdfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	3b04      	subs	r3, #4
 801ce02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801ce04:	68ba      	ldr	r2, [r7, #8]
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	3b04      	subs	r3, #4
 801ce0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801ce10:	4a08      	ldr	r2, [pc, #32]	; (801ce34 <pxPortInitialiseStack+0x50>)
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	3b14      	subs	r3, #20
 801ce1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801ce1c:	687a      	ldr	r2, [r7, #4]
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	3b20      	subs	r3, #32
 801ce26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801ce28:	68fb      	ldr	r3, [r7, #12]
}
 801ce2a:	0018      	movs	r0, r3
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	b004      	add	sp, #16
 801ce30:	bd80      	pop	{r7, pc}
 801ce32:	46c0      	nop			; (mov r8, r8)
 801ce34:	0801ce39 	.word	0x0801ce39

0801ce38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801ce38:	b580      	push	{r7, lr}
 801ce3a:	b082      	sub	sp, #8
 801ce3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801ce3e:	2300      	movs	r3, #0
 801ce40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801ce42:	4b08      	ldr	r3, [pc, #32]	; (801ce64 <prvTaskExitError+0x2c>)
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	3301      	adds	r3, #1
 801ce48:	d001      	beq.n	801ce4e <prvTaskExitError+0x16>
 801ce4a:	b672      	cpsid	i
 801ce4c:	e7fe      	b.n	801ce4c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 801ce4e:	b672      	cpsid	i
	while( ulDummy == 0 )
 801ce50:	46c0      	nop			; (mov r8, r8)
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d0fc      	beq.n	801ce52 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801ce58:	46c0      	nop			; (mov r8, r8)
 801ce5a:	46c0      	nop			; (mov r8, r8)
 801ce5c:	46bd      	mov	sp, r7
 801ce5e:	b002      	add	sp, #8
 801ce60:	bd80      	pop	{r7, pc}
 801ce62:	46c0      	nop			; (mov r8, r8)
 801ce64:	2000000c 	.word	0x2000000c

0801ce68 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 801ce68:	b580      	push	{r7, lr}
 801ce6a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 801ce6c:	46c0      	nop			; (mov r8, r8)
 801ce6e:	46bd      	mov	sp, r7
 801ce70:	bd80      	pop	{r7, pc}
	...

0801ce80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 801ce80:	4a0b      	ldr	r2, [pc, #44]	; (801ceb0 <pxCurrentTCBConst2>)
 801ce82:	6813      	ldr	r3, [r2, #0]
 801ce84:	6818      	ldr	r0, [r3, #0]
 801ce86:	3020      	adds	r0, #32
 801ce88:	f380 8809 	msr	PSP, r0
 801ce8c:	2002      	movs	r0, #2
 801ce8e:	f380 8814 	msr	CONTROL, r0
 801ce92:	f3bf 8f6f 	isb	sy
 801ce96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 801ce98:	46ae      	mov	lr, r5
 801ce9a:	bc08      	pop	{r3}
 801ce9c:	bc04      	pop	{r2}
 801ce9e:	b662      	cpsie	i
 801cea0:	4718      	bx	r3
 801cea2:	46c0      	nop			; (mov r8, r8)
 801cea4:	46c0      	nop			; (mov r8, r8)
 801cea6:	46c0      	nop			; (mov r8, r8)
 801cea8:	46c0      	nop			; (mov r8, r8)
 801ceaa:	46c0      	nop			; (mov r8, r8)
 801ceac:	46c0      	nop			; (mov r8, r8)
 801ceae:	46c0      	nop			; (mov r8, r8)

0801ceb0 <pxCurrentTCBConst2>:
 801ceb0:	20000c80 	.word	0x20000c80
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 801ceb4:	46c0      	nop			; (mov r8, r8)
 801ceb6:	46c0      	nop			; (mov r8, r8)

0801ceb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801ceb8:	b580      	push	{r7, lr}
 801ceba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 801cebc:	4b0e      	ldr	r3, [pc, #56]	; (801cef8 <xPortStartScheduler+0x40>)
 801cebe:	681a      	ldr	r2, [r3, #0]
 801cec0:	4b0d      	ldr	r3, [pc, #52]	; (801cef8 <xPortStartScheduler+0x40>)
 801cec2:	21ff      	movs	r1, #255	; 0xff
 801cec4:	0409      	lsls	r1, r1, #16
 801cec6:	430a      	orrs	r2, r1
 801cec8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 801ceca:	4b0b      	ldr	r3, [pc, #44]	; (801cef8 <xPortStartScheduler+0x40>)
 801cecc:	681a      	ldr	r2, [r3, #0]
 801cece:	4b0a      	ldr	r3, [pc, #40]	; (801cef8 <xPortStartScheduler+0x40>)
 801ced0:	21ff      	movs	r1, #255	; 0xff
 801ced2:	0609      	lsls	r1, r1, #24
 801ced4:	430a      	orrs	r2, r1
 801ced6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 801ced8:	f000 f898 	bl	801d00c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801cedc:	4b07      	ldr	r3, [pc, #28]	; (801cefc <xPortStartScheduler+0x44>)
 801cede:	2200      	movs	r2, #0
 801cee0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 801cee2:	f7ff ffcd 	bl	801ce80 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801cee6:	f7ff f969 	bl	801c1bc <vTaskSwitchContext>
	prvTaskExitError();
 801ceea:	f7ff ffa5 	bl	801ce38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801ceee:	2300      	movs	r3, #0
}
 801cef0:	0018      	movs	r0, r3
 801cef2:	46bd      	mov	sp, r7
 801cef4:	bd80      	pop	{r7, pc}
 801cef6:	46c0      	nop			; (mov r8, r8)
 801cef8:	e000ed20 	.word	0xe000ed20
 801cefc:	2000000c 	.word	0x2000000c

0801cf00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 801cf00:	b580      	push	{r7, lr}
 801cf02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 801cf04:	4b05      	ldr	r3, [pc, #20]	; (801cf1c <vPortYield+0x1c>)
 801cf06:	2280      	movs	r2, #128	; 0x80
 801cf08:	0552      	lsls	r2, r2, #21
 801cf0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801cf0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801cf10:	f3bf 8f6f 	isb	sy
}
 801cf14:	46c0      	nop			; (mov r8, r8)
 801cf16:	46bd      	mov	sp, r7
 801cf18:	bd80      	pop	{r7, pc}
 801cf1a:	46c0      	nop			; (mov r8, r8)
 801cf1c:	e000ed04 	.word	0xe000ed04

0801cf20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801cf20:	b580      	push	{r7, lr}
 801cf22:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 801cf24:	b672      	cpsid	i
    uxCriticalNesting++;
 801cf26:	4b06      	ldr	r3, [pc, #24]	; (801cf40 <vPortEnterCritical+0x20>)
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	1c5a      	adds	r2, r3, #1
 801cf2c:	4b04      	ldr	r3, [pc, #16]	; (801cf40 <vPortEnterCritical+0x20>)
 801cf2e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 801cf30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801cf34:	f3bf 8f6f 	isb	sy
}
 801cf38:	46c0      	nop			; (mov r8, r8)
 801cf3a:	46bd      	mov	sp, r7
 801cf3c:	bd80      	pop	{r7, pc}
 801cf3e:	46c0      	nop			; (mov r8, r8)
 801cf40:	2000000c 	.word	0x2000000c

0801cf44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801cf44:	b580      	push	{r7, lr}
 801cf46:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801cf48:	4b09      	ldr	r3, [pc, #36]	; (801cf70 <vPortExitCritical+0x2c>)
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d101      	bne.n	801cf54 <vPortExitCritical+0x10>
 801cf50:	b672      	cpsid	i
 801cf52:	e7fe      	b.n	801cf52 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 801cf54:	4b06      	ldr	r3, [pc, #24]	; (801cf70 <vPortExitCritical+0x2c>)
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	1e5a      	subs	r2, r3, #1
 801cf5a:	4b05      	ldr	r3, [pc, #20]	; (801cf70 <vPortExitCritical+0x2c>)
 801cf5c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 801cf5e:	4b04      	ldr	r3, [pc, #16]	; (801cf70 <vPortExitCritical+0x2c>)
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d100      	bne.n	801cf68 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 801cf66:	b662      	cpsie	i
    }
}
 801cf68:	46c0      	nop			; (mov r8, r8)
 801cf6a:	46bd      	mov	sp, r7
 801cf6c:	bd80      	pop	{r7, pc}
 801cf6e:	46c0      	nop			; (mov r8, r8)
 801cf70:	2000000c 	.word	0x2000000c

0801cf74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 801cf74:	f3ef 8010 	mrs	r0, PRIMASK
 801cf78:	b672      	cpsid	i
 801cf7a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 801cf7c:	46c0      	nop			; (mov r8, r8)
 801cf7e:	0018      	movs	r0, r3

0801cf80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 801cf80:	f380 8810 	msr	PRIMASK, r0
 801cf84:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 801cf86:	46c0      	nop			; (mov r8, r8)
	...

0801cf90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801cf90:	f3ef 8009 	mrs	r0, PSP
 801cf94:	4b0e      	ldr	r3, [pc, #56]	; (801cfd0 <pxCurrentTCBConst>)
 801cf96:	681a      	ldr	r2, [r3, #0]
 801cf98:	3820      	subs	r0, #32
 801cf9a:	6010      	str	r0, [r2, #0]
 801cf9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801cf9e:	4644      	mov	r4, r8
 801cfa0:	464d      	mov	r5, r9
 801cfa2:	4656      	mov	r6, sl
 801cfa4:	465f      	mov	r7, fp
 801cfa6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801cfa8:	b508      	push	{r3, lr}
 801cfaa:	b672      	cpsid	i
 801cfac:	f7ff f906 	bl	801c1bc <vTaskSwitchContext>
 801cfb0:	b662      	cpsie	i
 801cfb2:	bc0c      	pop	{r2, r3}
 801cfb4:	6811      	ldr	r1, [r2, #0]
 801cfb6:	6808      	ldr	r0, [r1, #0]
 801cfb8:	3010      	adds	r0, #16
 801cfba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801cfbc:	46a0      	mov	r8, r4
 801cfbe:	46a9      	mov	r9, r5
 801cfc0:	46b2      	mov	sl, r6
 801cfc2:	46bb      	mov	fp, r7
 801cfc4:	f380 8809 	msr	PSP, r0
 801cfc8:	3820      	subs	r0, #32
 801cfca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801cfcc:	4718      	bx	r3
 801cfce:	46c0      	nop			; (mov r8, r8)

0801cfd0 <pxCurrentTCBConst>:
 801cfd0:	20000c80 	.word	0x20000c80
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 801cfd4:	46c0      	nop			; (mov r8, r8)
 801cfd6:	46c0      	nop			; (mov r8, r8)

0801cfd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801cfd8:	b580      	push	{r7, lr}
 801cfda:	b082      	sub	sp, #8
 801cfdc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801cfde:	f7ff ffc9 	bl	801cf74 <ulSetInterruptMaskFromISR>
 801cfe2:	0003      	movs	r3, r0
 801cfe4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801cfe6:	f7ff f839 	bl	801c05c <xTaskIncrementTick>
 801cfea:	1e03      	subs	r3, r0, #0
 801cfec:	d003      	beq.n	801cff6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801cfee:	4b06      	ldr	r3, [pc, #24]	; (801d008 <SysTick_Handler+0x30>)
 801cff0:	2280      	movs	r2, #128	; 0x80
 801cff2:	0552      	lsls	r2, r2, #21
 801cff4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	0018      	movs	r0, r3
 801cffa:	f7ff ffc1 	bl	801cf80 <vClearInterruptMaskFromISR>
}
 801cffe:	46c0      	nop			; (mov r8, r8)
 801d000:	46bd      	mov	sp, r7
 801d002:	b002      	add	sp, #8
 801d004:	bd80      	pop	{r7, pc}
 801d006:	46c0      	nop			; (mov r8, r8)
 801d008:	e000ed04 	.word	0xe000ed04

0801d00c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 801d010:	4b0b      	ldr	r3, [pc, #44]	; (801d040 <prvSetupTimerInterrupt+0x34>)
 801d012:	2200      	movs	r2, #0
 801d014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 801d016:	4b0b      	ldr	r3, [pc, #44]	; (801d044 <prvSetupTimerInterrupt+0x38>)
 801d018:	2200      	movs	r2, #0
 801d01a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801d01c:	4b0a      	ldr	r3, [pc, #40]	; (801d048 <prvSetupTimerInterrupt+0x3c>)
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	22fa      	movs	r2, #250	; 0xfa
 801d022:	0091      	lsls	r1, r2, #2
 801d024:	0018      	movs	r0, r3
 801d026:	f7fb f86f 	bl	8018108 <__udivsi3>
 801d02a:	0003      	movs	r3, r0
 801d02c:	001a      	movs	r2, r3
 801d02e:	4b07      	ldr	r3, [pc, #28]	; (801d04c <prvSetupTimerInterrupt+0x40>)
 801d030:	3a01      	subs	r2, #1
 801d032:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801d034:	4b02      	ldr	r3, [pc, #8]	; (801d040 <prvSetupTimerInterrupt+0x34>)
 801d036:	2207      	movs	r2, #7
 801d038:	601a      	str	r2, [r3, #0]
}
 801d03a:	46c0      	nop			; (mov r8, r8)
 801d03c:	46bd      	mov	sp, r7
 801d03e:	bd80      	pop	{r7, pc}
 801d040:	e000e010 	.word	0xe000e010
 801d044:	e000e018 	.word	0xe000e018
 801d048:	20000000 	.word	0x20000000
 801d04c:	e000e014 	.word	0xe000e014

0801d050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801d050:	b580      	push	{r7, lr}
 801d052:	b086      	sub	sp, #24
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801d058:	2300      	movs	r3, #0
 801d05a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801d05c:	f7fe ff58 	bl	801bf10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801d060:	4b49      	ldr	r3, [pc, #292]	; (801d188 <pvPortMalloc+0x138>)
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	2b00      	cmp	r3, #0
 801d066:	d101      	bne.n	801d06c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801d068:	f000 f8e0 	bl	801d22c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801d06c:	4b47      	ldr	r3, [pc, #284]	; (801d18c <pvPortMalloc+0x13c>)
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	687a      	ldr	r2, [r7, #4]
 801d072:	4013      	ands	r3, r2
 801d074:	d000      	beq.n	801d078 <pvPortMalloc+0x28>
 801d076:	e079      	b.n	801d16c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d012      	beq.n	801d0a4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 801d07e:	2208      	movs	r2, #8
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	189b      	adds	r3, r3, r2
 801d084:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	2207      	movs	r2, #7
 801d08a:	4013      	ands	r3, r2
 801d08c:	d00a      	beq.n	801d0a4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	2207      	movs	r2, #7
 801d092:	4393      	bics	r3, r2
 801d094:	3308      	adds	r3, #8
 801d096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	2207      	movs	r2, #7
 801d09c:	4013      	ands	r3, r2
 801d09e:	d001      	beq.n	801d0a4 <pvPortMalloc+0x54>
 801d0a0:	b672      	cpsid	i
 801d0a2:	e7fe      	b.n	801d0a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d060      	beq.n	801d16c <pvPortMalloc+0x11c>
 801d0aa:	4b39      	ldr	r3, [pc, #228]	; (801d190 <pvPortMalloc+0x140>)
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	687a      	ldr	r2, [r7, #4]
 801d0b0:	429a      	cmp	r2, r3
 801d0b2:	d85b      	bhi.n	801d16c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801d0b4:	4b37      	ldr	r3, [pc, #220]	; (801d194 <pvPortMalloc+0x144>)
 801d0b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801d0b8:	4b36      	ldr	r3, [pc, #216]	; (801d194 <pvPortMalloc+0x144>)
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801d0be:	e004      	b.n	801d0ca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 801d0c0:	697b      	ldr	r3, [r7, #20]
 801d0c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 801d0c4:	697b      	ldr	r3, [r7, #20]
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801d0ca:	697b      	ldr	r3, [r7, #20]
 801d0cc:	685b      	ldr	r3, [r3, #4]
 801d0ce:	687a      	ldr	r2, [r7, #4]
 801d0d0:	429a      	cmp	r2, r3
 801d0d2:	d903      	bls.n	801d0dc <pvPortMalloc+0x8c>
 801d0d4:	697b      	ldr	r3, [r7, #20]
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d1f1      	bne.n	801d0c0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801d0dc:	4b2a      	ldr	r3, [pc, #168]	; (801d188 <pvPortMalloc+0x138>)
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	697a      	ldr	r2, [r7, #20]
 801d0e2:	429a      	cmp	r2, r3
 801d0e4:	d042      	beq.n	801d16c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801d0e6:	693b      	ldr	r3, [r7, #16]
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	2208      	movs	r2, #8
 801d0ec:	189b      	adds	r3, r3, r2
 801d0ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801d0f0:	697b      	ldr	r3, [r7, #20]
 801d0f2:	681a      	ldr	r2, [r3, #0]
 801d0f4:	693b      	ldr	r3, [r7, #16]
 801d0f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801d0f8:	697b      	ldr	r3, [r7, #20]
 801d0fa:	685a      	ldr	r2, [r3, #4]
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	1ad2      	subs	r2, r2, r3
 801d100:	2308      	movs	r3, #8
 801d102:	005b      	lsls	r3, r3, #1
 801d104:	429a      	cmp	r2, r3
 801d106:	d916      	bls.n	801d136 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801d108:	697a      	ldr	r2, [r7, #20]
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	18d3      	adds	r3, r2, r3
 801d10e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801d110:	68bb      	ldr	r3, [r7, #8]
 801d112:	2207      	movs	r2, #7
 801d114:	4013      	ands	r3, r2
 801d116:	d001      	beq.n	801d11c <pvPortMalloc+0xcc>
 801d118:	b672      	cpsid	i
 801d11a:	e7fe      	b.n	801d11a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801d11c:	697b      	ldr	r3, [r7, #20]
 801d11e:	685a      	ldr	r2, [r3, #4]
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	1ad2      	subs	r2, r2, r3
 801d124:	68bb      	ldr	r3, [r7, #8]
 801d126:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801d128:	697b      	ldr	r3, [r7, #20]
 801d12a:	687a      	ldr	r2, [r7, #4]
 801d12c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801d12e:	68bb      	ldr	r3, [r7, #8]
 801d130:	0018      	movs	r0, r3
 801d132:	f000 f8db 	bl	801d2ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801d136:	4b16      	ldr	r3, [pc, #88]	; (801d190 <pvPortMalloc+0x140>)
 801d138:	681a      	ldr	r2, [r3, #0]
 801d13a:	697b      	ldr	r3, [r7, #20]
 801d13c:	685b      	ldr	r3, [r3, #4]
 801d13e:	1ad2      	subs	r2, r2, r3
 801d140:	4b13      	ldr	r3, [pc, #76]	; (801d190 <pvPortMalloc+0x140>)
 801d142:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801d144:	4b12      	ldr	r3, [pc, #72]	; (801d190 <pvPortMalloc+0x140>)
 801d146:	681a      	ldr	r2, [r3, #0]
 801d148:	4b13      	ldr	r3, [pc, #76]	; (801d198 <pvPortMalloc+0x148>)
 801d14a:	681b      	ldr	r3, [r3, #0]
 801d14c:	429a      	cmp	r2, r3
 801d14e:	d203      	bcs.n	801d158 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801d150:	4b0f      	ldr	r3, [pc, #60]	; (801d190 <pvPortMalloc+0x140>)
 801d152:	681a      	ldr	r2, [r3, #0]
 801d154:	4b10      	ldr	r3, [pc, #64]	; (801d198 <pvPortMalloc+0x148>)
 801d156:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801d158:	697b      	ldr	r3, [r7, #20]
 801d15a:	685a      	ldr	r2, [r3, #4]
 801d15c:	4b0b      	ldr	r3, [pc, #44]	; (801d18c <pvPortMalloc+0x13c>)
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	431a      	orrs	r2, r3
 801d162:	697b      	ldr	r3, [r7, #20]
 801d164:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801d166:	697b      	ldr	r3, [r7, #20]
 801d168:	2200      	movs	r2, #0
 801d16a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801d16c:	f7fe fedc 	bl	801bf28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	2207      	movs	r2, #7
 801d174:	4013      	ands	r3, r2
 801d176:	d001      	beq.n	801d17c <pvPortMalloc+0x12c>
 801d178:	b672      	cpsid	i
 801d17a:	e7fe      	b.n	801d17a <pvPortMalloc+0x12a>
	return pvReturn;
 801d17c:	68fb      	ldr	r3, [r7, #12]
}
 801d17e:	0018      	movs	r0, r3
 801d180:	46bd      	mov	sp, r7
 801d182:	b006      	add	sp, #24
 801d184:	bd80      	pop	{r7, pc}
 801d186:	46c0      	nop			; (mov r8, r8)
 801d188:	20001eb4 	.word	0x20001eb4
 801d18c:	20001ec0 	.word	0x20001ec0
 801d190:	20001eb8 	.word	0x20001eb8
 801d194:	20001eac 	.word	0x20001eac
 801d198:	20001ebc 	.word	0x20001ebc

0801d19c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801d19c:	b580      	push	{r7, lr}
 801d19e:	b084      	sub	sp, #16
 801d1a0:	af00      	add	r7, sp, #0
 801d1a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d035      	beq.n	801d21a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801d1ae:	2308      	movs	r3, #8
 801d1b0:	425b      	negs	r3, r3
 801d1b2:	68fa      	ldr	r2, [r7, #12]
 801d1b4:	18d3      	adds	r3, r2, r3
 801d1b6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801d1bc:	68bb      	ldr	r3, [r7, #8]
 801d1be:	685a      	ldr	r2, [r3, #4]
 801d1c0:	4b18      	ldr	r3, [pc, #96]	; (801d224 <vPortFree+0x88>)
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	4013      	ands	r3, r2
 801d1c6:	d101      	bne.n	801d1cc <vPortFree+0x30>
 801d1c8:	b672      	cpsid	i
 801d1ca:	e7fe      	b.n	801d1ca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801d1cc:	68bb      	ldr	r3, [r7, #8]
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d001      	beq.n	801d1d8 <vPortFree+0x3c>
 801d1d4:	b672      	cpsid	i
 801d1d6:	e7fe      	b.n	801d1d6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801d1d8:	68bb      	ldr	r3, [r7, #8]
 801d1da:	685a      	ldr	r2, [r3, #4]
 801d1dc:	4b11      	ldr	r3, [pc, #68]	; (801d224 <vPortFree+0x88>)
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	4013      	ands	r3, r2
 801d1e2:	d01a      	beq.n	801d21a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801d1e4:	68bb      	ldr	r3, [r7, #8]
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d116      	bne.n	801d21a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801d1ec:	68bb      	ldr	r3, [r7, #8]
 801d1ee:	685a      	ldr	r2, [r3, #4]
 801d1f0:	4b0c      	ldr	r3, [pc, #48]	; (801d224 <vPortFree+0x88>)
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	43db      	mvns	r3, r3
 801d1f6:	401a      	ands	r2, r3
 801d1f8:	68bb      	ldr	r3, [r7, #8]
 801d1fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801d1fc:	f7fe fe88 	bl	801bf10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801d200:	68bb      	ldr	r3, [r7, #8]
 801d202:	685a      	ldr	r2, [r3, #4]
 801d204:	4b08      	ldr	r3, [pc, #32]	; (801d228 <vPortFree+0x8c>)
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	18d2      	adds	r2, r2, r3
 801d20a:	4b07      	ldr	r3, [pc, #28]	; (801d228 <vPortFree+0x8c>)
 801d20c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801d20e:	68bb      	ldr	r3, [r7, #8]
 801d210:	0018      	movs	r0, r3
 801d212:	f000 f86b 	bl	801d2ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801d216:	f7fe fe87 	bl	801bf28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801d21a:	46c0      	nop			; (mov r8, r8)
 801d21c:	46bd      	mov	sp, r7
 801d21e:	b004      	add	sp, #16
 801d220:	bd80      	pop	{r7, pc}
 801d222:	46c0      	nop			; (mov r8, r8)
 801d224:	20001ec0 	.word	0x20001ec0
 801d228:	20001eb8 	.word	0x20001eb8

0801d22c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801d22c:	b580      	push	{r7, lr}
 801d22e:	b084      	sub	sp, #16
 801d230:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801d232:	23c0      	movs	r3, #192	; 0xc0
 801d234:	011b      	lsls	r3, r3, #4
 801d236:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801d238:	4b26      	ldr	r3, [pc, #152]	; (801d2d4 <prvHeapInit+0xa8>)
 801d23a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	2207      	movs	r2, #7
 801d240:	4013      	ands	r3, r2
 801d242:	d00c      	beq.n	801d25e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	3307      	adds	r3, #7
 801d248:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801d24a:	68fb      	ldr	r3, [r7, #12]
 801d24c:	2207      	movs	r2, #7
 801d24e:	4393      	bics	r3, r2
 801d250:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801d252:	68ba      	ldr	r2, [r7, #8]
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	1ad2      	subs	r2, r2, r3
 801d258:	4b1e      	ldr	r3, [pc, #120]	; (801d2d4 <prvHeapInit+0xa8>)
 801d25a:	18d3      	adds	r3, r2, r3
 801d25c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801d262:	4b1d      	ldr	r3, [pc, #116]	; (801d2d8 <prvHeapInit+0xac>)
 801d264:	687a      	ldr	r2, [r7, #4]
 801d266:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801d268:	4b1b      	ldr	r3, [pc, #108]	; (801d2d8 <prvHeapInit+0xac>)
 801d26a:	2200      	movs	r2, #0
 801d26c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	68ba      	ldr	r2, [r7, #8]
 801d272:	18d3      	adds	r3, r2, r3
 801d274:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801d276:	2208      	movs	r2, #8
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	1a9b      	subs	r3, r3, r2
 801d27c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	2207      	movs	r2, #7
 801d282:	4393      	bics	r3, r2
 801d284:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801d286:	68fa      	ldr	r2, [r7, #12]
 801d288:	4b14      	ldr	r3, [pc, #80]	; (801d2dc <prvHeapInit+0xb0>)
 801d28a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 801d28c:	4b13      	ldr	r3, [pc, #76]	; (801d2dc <prvHeapInit+0xb0>)
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	2200      	movs	r2, #0
 801d292:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801d294:	4b11      	ldr	r3, [pc, #68]	; (801d2dc <prvHeapInit+0xb0>)
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	2200      	movs	r2, #0
 801d29a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801d2a0:	683b      	ldr	r3, [r7, #0]
 801d2a2:	68fa      	ldr	r2, [r7, #12]
 801d2a4:	1ad2      	subs	r2, r2, r3
 801d2a6:	683b      	ldr	r3, [r7, #0]
 801d2a8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801d2aa:	4b0c      	ldr	r3, [pc, #48]	; (801d2dc <prvHeapInit+0xb0>)
 801d2ac:	681a      	ldr	r2, [r3, #0]
 801d2ae:	683b      	ldr	r3, [r7, #0]
 801d2b0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801d2b2:	683b      	ldr	r3, [r7, #0]
 801d2b4:	685a      	ldr	r2, [r3, #4]
 801d2b6:	4b0a      	ldr	r3, [pc, #40]	; (801d2e0 <prvHeapInit+0xb4>)
 801d2b8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801d2ba:	683b      	ldr	r3, [r7, #0]
 801d2bc:	685a      	ldr	r2, [r3, #4]
 801d2be:	4b09      	ldr	r3, [pc, #36]	; (801d2e4 <prvHeapInit+0xb8>)
 801d2c0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801d2c2:	4b09      	ldr	r3, [pc, #36]	; (801d2e8 <prvHeapInit+0xbc>)
 801d2c4:	2280      	movs	r2, #128	; 0x80
 801d2c6:	0612      	lsls	r2, r2, #24
 801d2c8:	601a      	str	r2, [r3, #0]
}
 801d2ca:	46c0      	nop			; (mov r8, r8)
 801d2cc:	46bd      	mov	sp, r7
 801d2ce:	b004      	add	sp, #16
 801d2d0:	bd80      	pop	{r7, pc}
 801d2d2:	46c0      	nop			; (mov r8, r8)
 801d2d4:	200012ac 	.word	0x200012ac
 801d2d8:	20001eac 	.word	0x20001eac
 801d2dc:	20001eb4 	.word	0x20001eb4
 801d2e0:	20001ebc 	.word	0x20001ebc
 801d2e4:	20001eb8 	.word	0x20001eb8
 801d2e8:	20001ec0 	.word	0x20001ec0

0801d2ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801d2ec:	b580      	push	{r7, lr}
 801d2ee:	b084      	sub	sp, #16
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801d2f4:	4b27      	ldr	r3, [pc, #156]	; (801d394 <prvInsertBlockIntoFreeList+0xa8>)
 801d2f6:	60fb      	str	r3, [r7, #12]
 801d2f8:	e002      	b.n	801d300 <prvInsertBlockIntoFreeList+0x14>
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	681b      	ldr	r3, [r3, #0]
 801d2fe:	60fb      	str	r3, [r7, #12]
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	681b      	ldr	r3, [r3, #0]
 801d304:	687a      	ldr	r2, [r7, #4]
 801d306:	429a      	cmp	r2, r3
 801d308:	d8f7      	bhi.n	801d2fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801d30a:	68fb      	ldr	r3, [r7, #12]
 801d30c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	685b      	ldr	r3, [r3, #4]
 801d312:	68ba      	ldr	r2, [r7, #8]
 801d314:	18d3      	adds	r3, r2, r3
 801d316:	687a      	ldr	r2, [r7, #4]
 801d318:	429a      	cmp	r2, r3
 801d31a:	d108      	bne.n	801d32e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	685a      	ldr	r2, [r3, #4]
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	685b      	ldr	r3, [r3, #4]
 801d324:	18d2      	adds	r2, r2, r3
 801d326:	68fb      	ldr	r3, [r7, #12]
 801d328:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	685b      	ldr	r3, [r3, #4]
 801d336:	68ba      	ldr	r2, [r7, #8]
 801d338:	18d2      	adds	r2, r2, r3
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	429a      	cmp	r2, r3
 801d340:	d118      	bne.n	801d374 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	681a      	ldr	r2, [r3, #0]
 801d346:	4b14      	ldr	r3, [pc, #80]	; (801d398 <prvInsertBlockIntoFreeList+0xac>)
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	429a      	cmp	r2, r3
 801d34c:	d00d      	beq.n	801d36a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	685a      	ldr	r2, [r3, #4]
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	685b      	ldr	r3, [r3, #4]
 801d358:	18d2      	adds	r2, r2, r3
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	681a      	ldr	r2, [r3, #0]
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	601a      	str	r2, [r3, #0]
 801d368:	e008      	b.n	801d37c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801d36a:	4b0b      	ldr	r3, [pc, #44]	; (801d398 <prvInsertBlockIntoFreeList+0xac>)
 801d36c:	681a      	ldr	r2, [r3, #0]
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	601a      	str	r2, [r3, #0]
 801d372:	e003      	b.n	801d37c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	681a      	ldr	r2, [r3, #0]
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801d37c:	68fa      	ldr	r2, [r7, #12]
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	429a      	cmp	r2, r3
 801d382:	d002      	beq.n	801d38a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	687a      	ldr	r2, [r7, #4]
 801d388:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d38a:	46c0      	nop			; (mov r8, r8)
 801d38c:	46bd      	mov	sp, r7
 801d38e:	b004      	add	sp, #16
 801d390:	bd80      	pop	{r7, pc}
 801d392:	46c0      	nop			; (mov r8, r8)
 801d394:	20001eac 	.word	0x20001eac
 801d398:	20001eb4 	.word	0x20001eb4

0801d39c <__libc_init_array>:
 801d39c:	b570      	push	{r4, r5, r6, lr}
 801d39e:	2600      	movs	r6, #0
 801d3a0:	4d0c      	ldr	r5, [pc, #48]	; (801d3d4 <__libc_init_array+0x38>)
 801d3a2:	4c0d      	ldr	r4, [pc, #52]	; (801d3d8 <__libc_init_array+0x3c>)
 801d3a4:	1b64      	subs	r4, r4, r5
 801d3a6:	10a4      	asrs	r4, r4, #2
 801d3a8:	42a6      	cmp	r6, r4
 801d3aa:	d109      	bne.n	801d3c0 <__libc_init_array+0x24>
 801d3ac:	2600      	movs	r6, #0
 801d3ae:	f000 f8f9 	bl	801d5a4 <_init>
 801d3b2:	4d0a      	ldr	r5, [pc, #40]	; (801d3dc <__libc_init_array+0x40>)
 801d3b4:	4c0a      	ldr	r4, [pc, #40]	; (801d3e0 <__libc_init_array+0x44>)
 801d3b6:	1b64      	subs	r4, r4, r5
 801d3b8:	10a4      	asrs	r4, r4, #2
 801d3ba:	42a6      	cmp	r6, r4
 801d3bc:	d105      	bne.n	801d3ca <__libc_init_array+0x2e>
 801d3be:	bd70      	pop	{r4, r5, r6, pc}
 801d3c0:	00b3      	lsls	r3, r6, #2
 801d3c2:	58eb      	ldr	r3, [r5, r3]
 801d3c4:	4798      	blx	r3
 801d3c6:	3601      	adds	r6, #1
 801d3c8:	e7ee      	b.n	801d3a8 <__libc_init_array+0xc>
 801d3ca:	00b3      	lsls	r3, r6, #2
 801d3cc:	58eb      	ldr	r3, [r5, r3]
 801d3ce:	4798      	blx	r3
 801d3d0:	3601      	adds	r6, #1
 801d3d2:	e7f2      	b.n	801d3ba <__libc_init_array+0x1e>
 801d3d4:	0801d734 	.word	0x0801d734
 801d3d8:	0801d734 	.word	0x0801d734
 801d3dc:	0801d734 	.word	0x0801d734
 801d3e0:	0801d738 	.word	0x0801d738

0801d3e4 <__retarget_lock_acquire_recursive>:
 801d3e4:	4770      	bx	lr

0801d3e6 <__retarget_lock_release_recursive>:
 801d3e6:	4770      	bx	lr

0801d3e8 <memcpy>:
 801d3e8:	2300      	movs	r3, #0
 801d3ea:	b510      	push	{r4, lr}
 801d3ec:	429a      	cmp	r2, r3
 801d3ee:	d100      	bne.n	801d3f2 <memcpy+0xa>
 801d3f0:	bd10      	pop	{r4, pc}
 801d3f2:	5ccc      	ldrb	r4, [r1, r3]
 801d3f4:	54c4      	strb	r4, [r0, r3]
 801d3f6:	3301      	adds	r3, #1
 801d3f8:	e7f8      	b.n	801d3ec <memcpy+0x4>

0801d3fa <memset>:
 801d3fa:	0003      	movs	r3, r0
 801d3fc:	1882      	adds	r2, r0, r2
 801d3fe:	4293      	cmp	r3, r2
 801d400:	d100      	bne.n	801d404 <memset+0xa>
 801d402:	4770      	bx	lr
 801d404:	7019      	strb	r1, [r3, #0]
 801d406:	3301      	adds	r3, #1
 801d408:	e7f9      	b.n	801d3fe <memset+0x4>

0801d40a <cleanup_glue>:
 801d40a:	b570      	push	{r4, r5, r6, lr}
 801d40c:	000d      	movs	r5, r1
 801d40e:	6809      	ldr	r1, [r1, #0]
 801d410:	0004      	movs	r4, r0
 801d412:	2900      	cmp	r1, #0
 801d414:	d001      	beq.n	801d41a <cleanup_glue+0x10>
 801d416:	f7ff fff8 	bl	801d40a <cleanup_glue>
 801d41a:	0029      	movs	r1, r5
 801d41c:	0020      	movs	r0, r4
 801d41e:	f000 f877 	bl	801d510 <_free_r>
 801d422:	bd70      	pop	{r4, r5, r6, pc}

0801d424 <_reclaim_reent>:
 801d424:	4b31      	ldr	r3, [pc, #196]	; (801d4ec <_reclaim_reent+0xc8>)
 801d426:	b570      	push	{r4, r5, r6, lr}
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	0004      	movs	r4, r0
 801d42c:	4283      	cmp	r3, r0
 801d42e:	d049      	beq.n	801d4c4 <_reclaim_reent+0xa0>
 801d430:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801d432:	2b00      	cmp	r3, #0
 801d434:	d00a      	beq.n	801d44c <_reclaim_reent+0x28>
 801d436:	2500      	movs	r5, #0
 801d438:	68db      	ldr	r3, [r3, #12]
 801d43a:	42ab      	cmp	r3, r5
 801d43c:	d147      	bne.n	801d4ce <_reclaim_reent+0xaa>
 801d43e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d440:	6819      	ldr	r1, [r3, #0]
 801d442:	2900      	cmp	r1, #0
 801d444:	d002      	beq.n	801d44c <_reclaim_reent+0x28>
 801d446:	0020      	movs	r0, r4
 801d448:	f000 f862 	bl	801d510 <_free_r>
 801d44c:	6961      	ldr	r1, [r4, #20]
 801d44e:	2900      	cmp	r1, #0
 801d450:	d002      	beq.n	801d458 <_reclaim_reent+0x34>
 801d452:	0020      	movs	r0, r4
 801d454:	f000 f85c 	bl	801d510 <_free_r>
 801d458:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d45a:	2900      	cmp	r1, #0
 801d45c:	d002      	beq.n	801d464 <_reclaim_reent+0x40>
 801d45e:	0020      	movs	r0, r4
 801d460:	f000 f856 	bl	801d510 <_free_r>
 801d464:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d466:	2900      	cmp	r1, #0
 801d468:	d002      	beq.n	801d470 <_reclaim_reent+0x4c>
 801d46a:	0020      	movs	r0, r4
 801d46c:	f000 f850 	bl	801d510 <_free_r>
 801d470:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801d472:	2900      	cmp	r1, #0
 801d474:	d002      	beq.n	801d47c <_reclaim_reent+0x58>
 801d476:	0020      	movs	r0, r4
 801d478:	f000 f84a 	bl	801d510 <_free_r>
 801d47c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d47e:	2900      	cmp	r1, #0
 801d480:	d002      	beq.n	801d488 <_reclaim_reent+0x64>
 801d482:	0020      	movs	r0, r4
 801d484:	f000 f844 	bl	801d510 <_free_r>
 801d488:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801d48a:	2900      	cmp	r1, #0
 801d48c:	d002      	beq.n	801d494 <_reclaim_reent+0x70>
 801d48e:	0020      	movs	r0, r4
 801d490:	f000 f83e 	bl	801d510 <_free_r>
 801d494:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801d496:	2900      	cmp	r1, #0
 801d498:	d002      	beq.n	801d4a0 <_reclaim_reent+0x7c>
 801d49a:	0020      	movs	r0, r4
 801d49c:	f000 f838 	bl	801d510 <_free_r>
 801d4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d4a2:	2900      	cmp	r1, #0
 801d4a4:	d002      	beq.n	801d4ac <_reclaim_reent+0x88>
 801d4a6:	0020      	movs	r0, r4
 801d4a8:	f000 f832 	bl	801d510 <_free_r>
 801d4ac:	69a3      	ldr	r3, [r4, #24]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d008      	beq.n	801d4c4 <_reclaim_reent+0xa0>
 801d4b2:	0020      	movs	r0, r4
 801d4b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d4b6:	4798      	blx	r3
 801d4b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d4ba:	2900      	cmp	r1, #0
 801d4bc:	d002      	beq.n	801d4c4 <_reclaim_reent+0xa0>
 801d4be:	0020      	movs	r0, r4
 801d4c0:	f7ff ffa3 	bl	801d40a <cleanup_glue>
 801d4c4:	bd70      	pop	{r4, r5, r6, pc}
 801d4c6:	5949      	ldr	r1, [r1, r5]
 801d4c8:	2900      	cmp	r1, #0
 801d4ca:	d108      	bne.n	801d4de <_reclaim_reent+0xba>
 801d4cc:	3504      	adds	r5, #4
 801d4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d4d0:	68d9      	ldr	r1, [r3, #12]
 801d4d2:	2d80      	cmp	r5, #128	; 0x80
 801d4d4:	d1f7      	bne.n	801d4c6 <_reclaim_reent+0xa2>
 801d4d6:	0020      	movs	r0, r4
 801d4d8:	f000 f81a 	bl	801d510 <_free_r>
 801d4dc:	e7af      	b.n	801d43e <_reclaim_reent+0x1a>
 801d4de:	680e      	ldr	r6, [r1, #0]
 801d4e0:	0020      	movs	r0, r4
 801d4e2:	f000 f815 	bl	801d510 <_free_r>
 801d4e6:	0031      	movs	r1, r6
 801d4e8:	e7ee      	b.n	801d4c8 <_reclaim_reent+0xa4>
 801d4ea:	46c0      	nop			; (mov r8, r8)
 801d4ec:	20000010 	.word	0x20000010

0801d4f0 <__malloc_lock>:
 801d4f0:	b510      	push	{r4, lr}
 801d4f2:	4802      	ldr	r0, [pc, #8]	; (801d4fc <__malloc_lock+0xc>)
 801d4f4:	f7ff ff76 	bl	801d3e4 <__retarget_lock_acquire_recursive>
 801d4f8:	bd10      	pop	{r4, pc}
 801d4fa:	46c0      	nop			; (mov r8, r8)
 801d4fc:	20001ec4 	.word	0x20001ec4

0801d500 <__malloc_unlock>:
 801d500:	b510      	push	{r4, lr}
 801d502:	4802      	ldr	r0, [pc, #8]	; (801d50c <__malloc_unlock+0xc>)
 801d504:	f7ff ff6f 	bl	801d3e6 <__retarget_lock_release_recursive>
 801d508:	bd10      	pop	{r4, pc}
 801d50a:	46c0      	nop			; (mov r8, r8)
 801d50c:	20001ec4 	.word	0x20001ec4

0801d510 <_free_r>:
 801d510:	b570      	push	{r4, r5, r6, lr}
 801d512:	0005      	movs	r5, r0
 801d514:	2900      	cmp	r1, #0
 801d516:	d010      	beq.n	801d53a <_free_r+0x2a>
 801d518:	1f0c      	subs	r4, r1, #4
 801d51a:	6823      	ldr	r3, [r4, #0]
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	da00      	bge.n	801d522 <_free_r+0x12>
 801d520:	18e4      	adds	r4, r4, r3
 801d522:	0028      	movs	r0, r5
 801d524:	f7ff ffe4 	bl	801d4f0 <__malloc_lock>
 801d528:	4a1d      	ldr	r2, [pc, #116]	; (801d5a0 <_free_r+0x90>)
 801d52a:	6813      	ldr	r3, [r2, #0]
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d105      	bne.n	801d53c <_free_r+0x2c>
 801d530:	6063      	str	r3, [r4, #4]
 801d532:	6014      	str	r4, [r2, #0]
 801d534:	0028      	movs	r0, r5
 801d536:	f7ff ffe3 	bl	801d500 <__malloc_unlock>
 801d53a:	bd70      	pop	{r4, r5, r6, pc}
 801d53c:	42a3      	cmp	r3, r4
 801d53e:	d908      	bls.n	801d552 <_free_r+0x42>
 801d540:	6821      	ldr	r1, [r4, #0]
 801d542:	1860      	adds	r0, r4, r1
 801d544:	4283      	cmp	r3, r0
 801d546:	d1f3      	bne.n	801d530 <_free_r+0x20>
 801d548:	6818      	ldr	r0, [r3, #0]
 801d54a:	685b      	ldr	r3, [r3, #4]
 801d54c:	1841      	adds	r1, r0, r1
 801d54e:	6021      	str	r1, [r4, #0]
 801d550:	e7ee      	b.n	801d530 <_free_r+0x20>
 801d552:	001a      	movs	r2, r3
 801d554:	685b      	ldr	r3, [r3, #4]
 801d556:	2b00      	cmp	r3, #0
 801d558:	d001      	beq.n	801d55e <_free_r+0x4e>
 801d55a:	42a3      	cmp	r3, r4
 801d55c:	d9f9      	bls.n	801d552 <_free_r+0x42>
 801d55e:	6811      	ldr	r1, [r2, #0]
 801d560:	1850      	adds	r0, r2, r1
 801d562:	42a0      	cmp	r0, r4
 801d564:	d10b      	bne.n	801d57e <_free_r+0x6e>
 801d566:	6820      	ldr	r0, [r4, #0]
 801d568:	1809      	adds	r1, r1, r0
 801d56a:	1850      	adds	r0, r2, r1
 801d56c:	6011      	str	r1, [r2, #0]
 801d56e:	4283      	cmp	r3, r0
 801d570:	d1e0      	bne.n	801d534 <_free_r+0x24>
 801d572:	6818      	ldr	r0, [r3, #0]
 801d574:	685b      	ldr	r3, [r3, #4]
 801d576:	1841      	adds	r1, r0, r1
 801d578:	6011      	str	r1, [r2, #0]
 801d57a:	6053      	str	r3, [r2, #4]
 801d57c:	e7da      	b.n	801d534 <_free_r+0x24>
 801d57e:	42a0      	cmp	r0, r4
 801d580:	d902      	bls.n	801d588 <_free_r+0x78>
 801d582:	230c      	movs	r3, #12
 801d584:	602b      	str	r3, [r5, #0]
 801d586:	e7d5      	b.n	801d534 <_free_r+0x24>
 801d588:	6821      	ldr	r1, [r4, #0]
 801d58a:	1860      	adds	r0, r4, r1
 801d58c:	4283      	cmp	r3, r0
 801d58e:	d103      	bne.n	801d598 <_free_r+0x88>
 801d590:	6818      	ldr	r0, [r3, #0]
 801d592:	685b      	ldr	r3, [r3, #4]
 801d594:	1841      	adds	r1, r0, r1
 801d596:	6021      	str	r1, [r4, #0]
 801d598:	6063      	str	r3, [r4, #4]
 801d59a:	6054      	str	r4, [r2, #4]
 801d59c:	e7ca      	b.n	801d534 <_free_r+0x24>
 801d59e:	46c0      	nop			; (mov r8, r8)
 801d5a0:	20001ec8 	.word	0x20001ec8

0801d5a4 <_init>:
 801d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5a6:	46c0      	nop			; (mov r8, r8)
 801d5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d5aa:	bc08      	pop	{r3}
 801d5ac:	469e      	mov	lr, r3
 801d5ae:	4770      	bx	lr

0801d5b0 <_fini>:
 801d5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5b2:	46c0      	nop			; (mov r8, r8)
 801d5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d5b6:	bc08      	pop	{r3}
 801d5b8:	469e      	mov	lr, r3
 801d5ba:	4770      	bx	lr
